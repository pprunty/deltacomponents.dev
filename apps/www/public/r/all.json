{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "all",
  "type": "registry:ui",
  "description": "All UI components from Delta UI",
  "dependencies": [
    "framer-motion",
    "lucide-react",
    "swiper"
  ],
  "registryDependencies": [
    "x-scrollable"
  ],
  "files": [
    {
      "path": "components/ui/cambio-image.tsx",
      "type": "registry:ui",
      "target": "",
      "content": "\"use client\"\n\nimport { useEffect, useRef, useState } from \"react\"\nimport { Cambio } from \"cambio\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype MotionPreset = \"snappy\" | \"smooth\" | \"bouncy\" | \"reduced\"\n\ninterface CambioImageProps {\n  src: string\n  alt: string\n  width: number\n  height: number\n  loading?: \"lazy\" | \"eager\"\n  index?: number\n  motion?:\n    | MotionPreset\n    | {\n        trigger?: MotionPreset\n        popup?: MotionPreset\n        backdrop?: MotionPreset\n      }\n  dismissible?: boolean\n  className?: string\n  draggable?: boolean\n  enableInitialAnimation?: boolean\n}\n\nexport function CambioImage({\n  src,\n  alt,\n  width,\n  height,\n  loading = \"lazy\",\n  index = 0,\n  motion = \"smooth\",\n  dismissible = true,\n  className,\n  draggable = false,\n  enableInitialAnimation = true,\n}: CambioImageProps) {\n  const [isVisible, setIsVisible] = useState(false)\n\n  /* NEW — track the zoom state */\n  const [open, setOpen] = useState(false)\n  const ref = useRef<HTMLDivElement>(null)\n\n  /* Grace-period so the close animation can finish on top */\n  const handleOpenChange = (o: boolean) => {\n    setOpen(true) // keep it on top immediately\n    if (!o) setTimeout(() => setOpen(false), 400) // default \"smooth\" preset ≈ 300 ms\n  }\n\n  useEffect(() => {\n    if (!enableInitialAnimation) {\n      setIsVisible(true)\n      return\n    }\n\n    const io = new IntersectionObserver(\n      ([e]) => {\n        if (e.isIntersecting) {\n          setIsVisible(true)\n          io.disconnect()\n        }\n      },\n      { threshold: 0.1 }\n    )\n    if (ref.current) {\n      io.observe(ref.current)\n    }\n    return () => io.disconnect()\n  }, [enableInitialAnimation])\n\n  /* Massive z-index only while the item is zooming/closing */\n  const zIndex = open ? 999 : 10 + index\n\n  return (\n    <span\n      ref={ref}\n      className={cn(\n        \"relative inline-block w-full transition-all duration-500 ease-out\",\n        className\n      )}\n      style={{\n        opacity: enableInitialAnimation ? (isVisible ? 1 : 0) : 1,\n        filter: enableInitialAnimation\n          ? isVisible\n            ? \"blur(0)\"\n            : \"blur(4px)\"\n          : \"blur(0)\",\n        zIndex,\n      }}\n    >\n      {/* @ts-ignore */}\n      <Cambio.Root\n        motion={motion}\n        dismissible={dismissible}\n        open={open}\n        onOpenChange={handleOpenChange}\n      >\n        {/* @ts-ignore */}\n        <Cambio.Trigger className=\"relative w-full cursor-zoom-in overflow-hidden\">\n          <img\n            src={src}\n            alt={alt}\n            width={width}\n            height={height}\n            loading={loading}\n            draggable={draggable}\n            className={cn(\"h-auto w-full\", className)}\n            style={{ pointerEvents: \"none\" }}\n          />\n        </Cambio.Trigger>\n\n        {/* @ts-ignore */}\n        <Cambio.Portal>\n          {/* @ts-ignore */}\n          <Cambio.Backdrop className=\"fixed inset-0 z-[100] bg-black/40\" />\n          {/* @ts-ignore */}\n          <Cambio.Popup className=\"z-[101] w-full overflow-hidden md:w-[70%]\">\n            <img\n              src={src}\n              alt={alt}\n              width={width}\n              height={height}\n              loading=\"eager\"\n              draggable={draggable}\n              className=\"h-auto w-full object-contain\"\n              style={{ pointerEvents: \"none\" }}\n            />\n          </Cambio.Popup>\n        </Cambio.Portal>\n      </Cambio.Root>\n    </span>\n  )\n}\n"
    },
    {
      "path": "components/ui/card-deck.tsx",
      "type": "registry:ui",
      "target": "",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport { motion } from \"framer-motion\"\nimport { ChevronLeftIcon, ChevronRightIcon } from \"lucide-react\"\nimport { Autoplay, EffectCards, Navigation, Pagination } from \"swiper/modules\"\nimport { Swiper, SwiperSlide } from \"swiper/react\"\n\nimport \"swiper/css/effect-cards\"\nimport \"swiper/css/pagination\"\nimport \"swiper/css/navigation\"\nimport \"swiper/css\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface CardDeckContainerProps {\n  children: React.ReactNode\n  className?: string\n  showPagination?: boolean\n  showNavigation?: boolean\n  infinite?: boolean\n  autoplay?: boolean\n  spaceBetween?: number\n}\n\ninterface CardDeckItemProps {\n  children: React.ReactNode\n  className?: string\n}\n\n// New modular API components\nexport function CardDeckContainer({\n  children,\n  className,\n  showPagination = false,\n  showNavigation = false,\n  infinite = true,\n  autoplay = false,\n  spaceBetween = 40,\n}: CardDeckContainerProps) {\n  const css = `\n  .card-deck {\n    padding: 20px 0 50px 0 !important;\n  }\n  .card-deck .swiper-slide {\n    overflow: visible !important;\n  }\n  .card-deck .swiper-slide-shadow-cards {\n    border-radius: 1.5rem !important;\n  }\n  `\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, translateY: 20 }}\n      animate={{ opacity: 1, translateY: 0 }}\n      transition={{\n        duration: 0.3,\n        delay: 0.5,\n      }}\n      className={cn(\"relative w-full max-w-3xl overflow-visible\", className)}\n    >\n      <style>{css}</style>\n\n      <Swiper\n        spaceBetween={spaceBetween}\n        autoplay={\n          autoplay\n            ? {\n                delay: 1000,\n                disableOnInteraction: false,\n              }\n            : false\n        }\n        effect=\"cards\"\n        grabCursor={true}\n        loop={infinite}\n        allowTouchMove={true}\n        touchRatio={1}\n        resistance={true}\n        resistanceRatio={infinite ? 0 : 0.85}\n        pagination={\n          showPagination\n            ? {\n                clickable: true,\n              }\n            : false\n        }\n        navigation={\n          showNavigation\n            ? {\n                nextEl: \".swiper-button-next\",\n                prevEl: \".swiper-button-prev\",\n              }\n            : false\n        }\n        className=\"card-deck h-[320px] w-[220px] sm:h-[420px] sm:w-[280px]\"\n        modules={[EffectCards, Autoplay, Pagination, Navigation]}\n      >\n        {React.Children.map(children, (child, index) => {\n          if (React.isValidElement(child)) {\n            const slideClass = child.props.className || \"rounded-3xl\"\n\n            return (\n              <SwiperSlide\n                key={index}\n                className={cn(slideClass, \"overflow-hidden\")}\n              >\n                {child.props.children}\n              </SwiperSlide>\n            )\n          }\n          return null\n        })}\n        {showNavigation && (\n          <div>\n            <div className=\"swiper-button-next after:hidden\">\n              <ChevronRightIcon className=\"h-6 w-6 text-white\" />\n            </div>\n            <div className=\"swiper-button-prev after:hidden\">\n              <ChevronLeftIcon className=\"h-6 w-6 text-white\" />\n            </div>\n          </div>\n        )}\n      </Swiper>\n    </motion.div>\n  )\n}\n\nexport function CardDeckItem({ children, className }: CardDeckItemProps) {\n  // This component passes its children and className to CardDeckContainer for rendering\n  return <>{children}</>\n}\n"
    },
    {
      "path": "components/ui/admonition.tsx",
      "type": "registry:ui",
      "target": "",
      "content": "import React from \"react\"\nimport {\n  AlertCircle,\n  AlertTriangle,\n  CheckCircle,\n  Info,\n  Lightbulb,\n  XCircle,\n} from \"lucide-react\"\n\nconst admonitionConfig = {\n  note: {\n    bgColor: \"bg-blue-50 dark:bg-blue-950/30\",\n    borderColor: \"border-blue-200 dark:border-blue-800\",\n    textColor: \"text-blue-700 dark:text-blue-300\",\n    iconColor: \"text-blue-600 dark:text-blue-400\",\n    icon: Info,\n  },\n  tip: {\n    bgColor: \"bg-green-50 dark:bg-green-950/30\",\n    borderColor: \"border-green-200 dark:border-green-800\",\n    textColor: \"text-green-700 dark:text-green-300\",\n    iconColor: \"text-green-600 dark:text-green-400\",\n    icon: Lightbulb,\n  },\n  info: {\n    bgColor: \"bg-cyan-50 dark:bg-cyan-950/30\",\n    borderColor: \"border-cyan-200 dark:border-cyan-800\",\n    textColor: \"text-cyan-700 dark:text-cyan-300\",\n    iconColor: \"text-cyan-600 dark:text-cyan-400\",\n    icon: Info,\n  },\n  warning: {\n    bgColor: \"bg-amber-50 dark:bg-amber-950/30\",\n    borderColor: \"border-amber-200 dark:border-amber-700\",\n    textColor: \"text-amber-700 dark:text-amber-300\",\n    iconColor: \"text-amber-600 dark:text-amber-400\",\n    icon: AlertTriangle,\n  },\n  danger: {\n    bgColor: \"bg-red-50 dark:bg-red-950/30\",\n    borderColor: \"border-red-200 dark:border-red-800\",\n    textColor: \"text-red-700 dark:text-red-300\",\n    iconColor: \"text-red-600 dark:text-red-400\",\n    icon: XCircle,\n  },\n  success: {\n    bgColor: \"bg-emerald-50 dark:bg-emerald-950/30\",\n    borderColor: \"border-emerald-200 dark:border-emerald-800\",\n    textColor: \"text-emerald-700 dark:text-emerald-300\",\n    iconColor: \"text-emerald-600 dark:text-emerald-400\",\n    icon: CheckCircle,\n  },\n  caution: {\n    bgColor: \"bg-orange-50 dark:bg-orange-950/30\",\n    borderColor: \"border-orange-200 dark:border-orange-700\",\n    textColor: \"text-orange-700 dark:text-orange-300\",\n    iconColor: \"text-orange-600 dark:text-orange-400\",\n    icon: AlertCircle,\n  },\n}\n\ninterface AdmonitionProps {\n  type?: keyof typeof admonitionConfig\n  title?: string\n  children: React.ReactNode\n  icon?: React.ComponentType<{ className?: string }>\n  className?: string\n}\n\nexport function Admonition({\n  type = \"note\",\n  title,\n  children,\n  icon: CustomIcon,\n  className = \"\",\n}: AdmonitionProps) {\n  const config = admonitionConfig[type]\n  const IconComponent = CustomIcon || config.icon\n\n  return (\n    <div\n      className={` ${config.bgColor} ${config.borderColor} rounded-lg border p-4 ${className} `.trim()}\n    >\n      <div className=\"flex gap-3\">\n        <div className={`${config.iconColor} mt-0.5 flex-shrink-0`}>\n          <IconComponent className=\"h-5 w-5\" style={{ lineHeight: \"1lh\" }} />\n        </div>\n        <div className=\"min-w-0 flex-1\">\n          {title && (\n            <div className={`${config.textColor} mb-1 text-sm font-semibold`}>\n              {title}\n            </div>\n          )}\n          <div className={`${config.textColor} text-sm leading-relaxed`}>\n            {children}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n"
    },
    {
      "path": "components/ui/x-scrollable.tsx",
      "type": "registry:ui",
      "target": "",
      "content": "\"use client\"\n\nimport { useEffect, useRef, useState, type ReactNode } from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface XScrollableProps {\n  children: ReactNode\n  className?: string\n  showScrollbar?: boolean\n  scrollbarTrackClassName?: string\n  scrollbarThumbClassName?: string\n  onScroll?: (\n    scrollLeft: number,\n    scrollWidth: number,\n    clientWidth: number\n  ) => void\n}\n\nexport function XScrollable({\n  children,\n  className,\n  showScrollbar = false,\n  scrollbarTrackClassName,\n  scrollbarThumbClassName,\n  onScroll,\n}: XScrollableProps) {\n  const scrollContainerRef = useRef<HTMLDivElement>(null)\n  const [showLeftShadow, setShowLeftShadow] = useState(false)\n  const [showRightShadow, setShowRightShadow] = useState(false)\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current\n    if (!scrollContainer) return\n\n    const handleScroll = () => {\n      const { scrollLeft, scrollWidth, clientWidth } = scrollContainer\n      setShowLeftShadow(scrollLeft > 0)\n      setShowRightShadow(scrollLeft < scrollWidth - clientWidth)\n      onScroll?.(scrollLeft, scrollWidth, clientWidth)\n    }\n\n    handleScroll() // Initial check\n    scrollContainer.addEventListener(\"scroll\", handleScroll)\n\n    return () => {\n      scrollContainer.removeEventListener(\"scroll\", handleScroll)\n    }\n  }, [onScroll])\n\n  return (\n    <div className=\"relative\">\n      <div\n        ref={scrollContainerRef}\n        className={cn(\n          \"overflow-x-auto overflow-y-hidden\",\n          showScrollbar\n            ? \"scrollbar-thin scrollbar-track-transparent scrollbar-thumb-gray-300 hover:scrollbar-thumb-gray-400\"\n            : \"scrollbar-hide\",\n          className\n        )}\n      >\n        {children}\n      </div>\n      {showLeftShadow && (\n        <div className=\"from-background pointer-events-none absolute top-0 bottom-0 left-0 w-8 bg-gradient-to-r to-transparent\" />\n      )}\n      {showRightShadow && (\n        <div className=\"from-background pointer-events-none absolute top-0 right-0 bottom-0 w-8 bg-gradient-to-l to-transparent\" />\n      )}\n      {showScrollbar && (\n        <div\n          className={cn(\n            \"mt-1 h-1 rounded-full bg-gray-200\",\n            scrollbarTrackClassName\n          )}\n        >\n          <div\n            className={cn(\n              \"h-full rounded-full bg-gray-400\",\n              scrollbarThumbClassName\n            )}\n            style={{\n              width: scrollContainerRef.current\n                ? `${(scrollContainerRef.current.clientWidth / scrollContainerRef.current.scrollWidth) * 100}%`\n                : \"0%\",\n              transform: scrollContainerRef.current\n                ? `translateX(${(scrollContainerRef.current.scrollLeft / scrollContainerRef.current.clientWidth) * 100}%)`\n                : \"translateX(0%)\",\n            }}\n          />\n        </div>\n      )}\n    </div>\n  )\n}\n"
    },
    {
      "path": "components/ui/tabs.tsx",
      "type": "registry:ui",
      "target": "",
      "content": "\"use client\"\n\nimport React, {\n  forwardRef,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  type ReactNode,\n} from \"react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { XScrollable } from \"@/components/ui/x-scrollable\"\n\n// Base Tabs component (Root)\nconst Tabs = forwardRef<\n  HTMLDivElement,\n  {\n    defaultValue?: string\n    value?: string\n    onValueChange?: (value: string) => void\n    className?: string\n    children?: ReactNode\n  }\n>(\n  (\n    { defaultValue, value, onValueChange, className, children, ...props },\n    ref\n  ) => {\n    const [activeValue, setActiveValue] = useState(value || defaultValue || \"\")\n\n    useEffect(() => {\n      if (value !== undefined) {\n        setActiveValue(value)\n      }\n    }, [value])\n\n    const handleValueChange = useCallback(\n      (newValue: string) => {\n        if (value === undefined) {\n          setActiveValue(newValue)\n        }\n        onValueChange?.(newValue)\n      },\n      [onValueChange, value]\n    )\n\n    return (\n      <div ref={ref} className={cn(\"tabs-container\", className)} {...props}>\n        {React.Children.map(children, (child) => {\n          if (!React.isValidElement(child)) return child\n\n          // Only pass tab-related props to tab components\n          const childType = child.type\n          const isTabComponent =\n            childType === TabsList ||\n            childType === TabsTrigger ||\n            childType === TabsContent ||\n            (typeof childType === \"function\" &&\n              ((childType as any).displayName === \"TabsList\" ||\n                (childType as any).displayName === \"TabsTrigger\" ||\n                (childType as any).displayName === \"TabsContent\"))\n\n          if (isTabComponent) {\n            return React.cloneElement(\n              child as React.ReactElement<{\n                activeValue?: string\n                onValueChange?: (value: string) => void\n                className?: string\n                children?: ReactNode\n                [key: string]: any\n              }>,\n              {\n                activeValue,\n                onValueChange: handleValueChange,\n              }\n            )\n          }\n\n          return child\n        })}\n      </div>\n    )\n  }\n)\nTabs.displayName = \"Tabs\"\n\n// TabsList component\nconst TabsList = forwardRef<\n  HTMLDivElement,\n  {\n    className?: string\n    activeValue?: string\n    onValueChange?: (value: string) => void\n    children?: ReactNode\n    showHoverEffect?: boolean\n    showActiveIndicator?: boolean\n    activeIndicatorPosition?: \"top\" | \"bottom\"\n    activeIndicatorOffset?: number\n    size?: \"sm\" | \"md\" | \"lg\"\n    variant?: \"default\" | \"pills\" | \"underlined\"\n    stretch?: boolean\n    ariaLabel?: string\n    showBottomBorder?: boolean\n    bottomBorderClassName?: string\n    activeIndicatorClassName?: string\n    hoverIndicatorClassName?: string\n  }\n>(\n  (\n    {\n      className,\n      activeValue,\n      onValueChange,\n      children,\n      showHoverEffect = true,\n      showActiveIndicator = true,\n      activeIndicatorPosition = \"bottom\",\n      activeIndicatorOffset = 0,\n      size = \"sm\",\n      variant = \"default\",\n      stretch = false,\n      ariaLabel = \"Tabs\",\n      showBottomBorder = false,\n      bottomBorderClassName,\n      activeIndicatorClassName,\n      hoverIndicatorClassName,\n      ...props\n    },\n    ref\n  ) => {\n    const [hoveredIndex, setHoveredIndex] = useState<number | null>(null)\n    const [hoverStyle, setHoverStyle] = useState({})\n    const [activeStyle, setActiveStyle] = useState({\n      left: \"0px\",\n      width: \"0px\",\n    })\n    const tabRefs = useRef<(HTMLDivElement | null)[]>([])\n    const scrollContainerRef = useRef<HTMLDivElement | null>(null)\n\n    // Find active tab index based on value\n    const activeIndex = React.Children.toArray(children).findIndex(\n      (child) =>\n        React.isValidElement(child) &&\n        (child as React.ReactElement<{ value: string }>).props.value ===\n          activeValue\n    )\n\n    // Update hover indicator position\n    useEffect(() => {\n      if (hoveredIndex !== null && showHoverEffect) {\n        const hoveredElement = tabRefs.current[hoveredIndex]\n        if (hoveredElement) {\n          const { offsetLeft, offsetWidth } = hoveredElement\n          setHoverStyle({\n            left: `${offsetLeft}px`,\n            width: `${offsetWidth}px`,\n          })\n        }\n      }\n    }, [hoveredIndex, showHoverEffect])\n\n    // Update active indicator position\n    const updateActiveIndicator = useCallback(() => {\n      if (showActiveIndicator && activeIndex >= 0) {\n        const activeElement = tabRefs.current[activeIndex]\n        if (activeElement) {\n          const { offsetLeft, offsetWidth } = activeElement\n          setActiveStyle({\n            left: `${offsetLeft}px`,\n            width: `${offsetWidth}px`,\n          })\n        }\n      }\n    }, [activeIndex, showActiveIndicator])\n\n    // Update active indicator on active tab change\n    useEffect(() => {\n      updateActiveIndicator()\n    }, [activeIndex, updateActiveIndicator])\n\n    // Initialize active indicator position\n    useEffect(() => {\n      requestAnimationFrame(updateActiveIndicator)\n    }, [updateActiveIndicator])\n\n    // Function to scroll tab to center\n    const scrollTabToCenter = (index: number) => {\n      const tabElement = tabRefs.current[index]\n      const scrollContainer = scrollContainerRef.current\n\n      if (tabElement && scrollContainer) {\n        const containerWidth = scrollContainer.offsetWidth\n        const tabWidth = tabElement.offsetWidth\n        const tabLeft = tabElement.offsetLeft\n\n        // Calculate position to center the tab\n        const scrollTarget = tabLeft - containerWidth / 2 + tabWidth / 2\n\n        // Smooth scroll to the target position\n        scrollContainer.scrollTo({\n          left: scrollTarget,\n          behavior: \"smooth\",\n        })\n      }\n    }\n\n    // Size classes\n    const sizeClasses = {\n      sm: \"h-[32px] text-sm\",\n      md: \"h-[40px] text-base\",\n      lg: \"h-[48px] text-lg\",\n    }\n\n    // Variant classes\n    const variantClasses = {\n      default: \"\",\n      pills: \"rounded-full\",\n      underlined: \"\",\n    }\n\n    // Active indicator classes\n    const activeIndicatorClasses = {\n      default: \"h-[4px] bg-primary dark:bg-primary\",\n      pills: \"hidden\",\n      underlined: \"h-[4px] bg-primary dark:bg-primary\",\n    }\n\n    // Hover indicator classes\n    const hoverIndicatorClasses = {\n      default: \"bg-muted dark:bg-muted rounded-[6px]\",\n      pills: \"bg-muted dark:bg-muted rounded-full\",\n      underlined: \"bg-muted dark:bg-muted rounded-[6px]\",\n    }\n\n    // Create a proper ref callback function\n    const setTabRef = useCallback(\n      (el: HTMLDivElement | null, index: number) => {\n        tabRefs.current[index] = el\n      },\n      []\n    )\n\n    // Save a reference to the scroll container when it's mounted\n    const handleScrollableRef = useCallback((node: HTMLDivElement | null) => {\n      if (node) {\n        // Find the actual scrollable div inside XScrollable\n        const scrollableDiv = node.querySelector(\n          'div[class*=\"overflow-x-auto\"]'\n        )\n        if (scrollableDiv) {\n          scrollContainerRef.current = scrollableDiv as HTMLDivElement\n        }\n      }\n    }, [])\n\n    // Center the active tab on initial render only\n    useEffect(() => {\n      if (activeIndex >= 0) {\n        // Use a small timeout to ensure the tabs are properly rendered\n        const timer = setTimeout(() => {\n          scrollTabToCenter(activeIndex)\n        }, 100)\n\n        return () => clearTimeout(timer)\n      }\n    }, []) // Empty dependency array means this only runs once on mount\n\n    return (\n      <div\n        ref={handleScrollableRef}\n        className={cn(\"relative\", className)}\n        role=\"tablist\"\n        aria-label={ariaLabel}\n        {...props}\n      >\n        <XScrollable showScrollbar={false}>\n          <div className={cn(\"relative\", showBottomBorder && \"pb-px\")}>\n            {/* Bottom border for the entire tab list */}\n            {showBottomBorder && (\n              <div\n                className={cn(\n                  \"bg-border dark:bg-border absolute right-0 bottom-0 left-0 h-px\",\n                  bottomBorderClassName\n                )}\n              />\n            )}\n\n            {/* Hover Indicator */}\n            {showHoverEffect && (\n              <div\n                className={cn(\n                  \"absolute z-0 flex items-center transition-all duration-300 ease-out\",\n                  sizeClasses[size],\n                  hoverIndicatorClasses[variant],\n                  hoverIndicatorClassName\n                )}\n                style={{\n                  ...hoverStyle,\n                  opacity: hoveredIndex !== null ? 1 : 0,\n                  transition: \"all 300ms ease-out\",\n                }}\n                aria-hidden=\"true\"\n              />\n            )}\n\n            {/* Tabs */}\n            <div\n              ref={ref}\n              className={cn(\n                \"relative flex items-center\",\n                stretch ? \"w-full\" : \"\",\n                variant === \"default\" ? \"space-x-[6px]\" : \"space-x-[2px]\"\n              )}\n            >\n              {React.Children.map(children, (child, index) => {\n                if (!React.isValidElement(child)) return child\n\n                const props = (\n                  child as React.ReactElement<{\n                    value: string\n                    disabled?: boolean\n                    label?: string\n                    className?: string\n                    activeClassName?: string\n                    inactiveClassName?: string\n                    disabledClassName?: string\n                  }>\n                ).props\n\n                const { value, disabled } = props\n                const isActive = value === activeValue\n\n                return (\n                  <div\n                    key={value}\n                    ref={(el) => setTabRef(el, index)}\n                    className={cn(\n                      \"mb-2 cursor-pointer px-3 py-2 transition-colors duration-300 sm:mb-1.5\",\n                      sizeClasses[size],\n                      variant === \"pills\" && isActive\n                        ? \"rounded-full bg-[#0e0f1114] dark:bg-[#ffffff1a]\"\n                        : \"\",\n                      disabled ? \"cursor-not-allowed opacity-50\" : \"\",\n                      stretch ? \"flex-1 text-center\" : \"\",\n                      isActive\n                        ? props.activeClassName ||\n                            \"text-foreground dark:text-foreground\"\n                        : props.inactiveClassName ||\n                            \"text-muted-foreground dark:text-muted-foreground\",\n                      disabled && props.disabledClassName,\n                      variantClasses[variant],\n                      props.className\n                    )}\n                    onMouseEnter={() => !disabled && setHoveredIndex(index)}\n                    onMouseLeave={() => setHoveredIndex(null)}\n                    onClick={() => {\n                      if (!disabled) {\n                        onValueChange?.(value)\n                        scrollTabToCenter(index)\n                      }\n                    }}\n                    role=\"tab\"\n                    aria-selected={isActive}\n                    aria-disabled={disabled}\n                    aria-controls={`tabpanel-${value}`}\n                    id={`tab-${value}`}\n                    tabIndex={isActive ? 0 : -1}\n                  >\n                    <div className=\"flex h-full items-center justify-center whitespace-nowrap\">\n                      {child}\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n\n            {/* Active Indicator */}\n            {showActiveIndicator && variant !== \"pills\" && activeIndex >= 0 && (\n              <div\n                className={cn(\n                  \"absolute z-10 transition-all duration-300 ease-out\",\n                  activeIndicatorClasses[variant],\n                  activeIndicatorPosition === \"top\"\n                    ? \"top-[-1px]\"\n                    : \"bottom-[-1px]\",\n                  activeIndicatorClassName\n                )}\n                style={{\n                  ...activeStyle,\n                  transition: \"all 300ms ease-out z-50\",\n                  [activeIndicatorPosition]: `${activeIndicatorOffset}px`,\n                }}\n                aria-hidden=\"true\"\n              />\n            )}\n          </div>\n        </XScrollable>\n      </div>\n    )\n  }\n)\nTabsList.displayName = \"TabsList\"\n\n// TabsTrigger component\nconst TabsTrigger = forwardRef<\n  HTMLDivElement,\n  {\n    value: string\n    disabled?: boolean\n    label?: string\n    className?: string\n    activeClassName?: string\n    inactiveClassName?: string\n    disabledClassName?: string\n    activeValue?: string\n    onValueChange?: (value: string) => void\n    children?: ReactNode\n  }\n>(\n  (\n    {\n      value,\n      disabled = false,\n      label,\n      className,\n      activeClassName,\n      inactiveClassName,\n      disabledClassName,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    return (\n      <div ref={ref} className={className} {...props}>\n        {label || children}\n      </div>\n    )\n  }\n)\n\nTabsTrigger.displayName = \"TabsTrigger\"\n\n// TabsContent component\nconst TabsContent = forwardRef<\n  HTMLDivElement,\n  {\n    value: string\n    className?: string\n    activeValue?: string\n    onValueChange?: (value: string) => void\n    children: ReactNode\n  }\n>(\n  (\n    {\n      value,\n      className,\n      activeValue,\n      onValueChange, // Destructure this prop to prevent it from being passed to the div\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    if (value !== activeValue) return null\n\n    return (\n      <div\n        ref={ref}\n        role=\"tabpanel\"\n        id={`tabpanel-${value}`}\n        aria-labelledby={`tab-${value}`}\n        className={className}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n)\nTabsContent.displayName = \"TabsContent\"\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"
    }
  ]
}