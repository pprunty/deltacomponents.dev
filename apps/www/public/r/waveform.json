{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "waveform",
  "type": "registry:ui",
  "files": [
    {
      "path": "components/ui/waveform.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useRef, type HTMLAttributes } from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport type WaveformProps = HTMLAttributes<HTMLDivElement> & {\n  height?: string | number\n  barWidth?: number\n  barGap?: number\n  barRadius?: number\n  barColor?: string\n  fadeEdges?: boolean\n  fadeWidth?: number\n  data?: number[]\n}\n\nexport type ScrollingWaveformProps = WaveformProps & {\n  speed?: number\n  barCount?: number\n  amplitude?: number\n}\n\nexport const Waveform = ({\n  height = 100,\n  barWidth = 3,\n  barGap = 1,\n  barRadius = 2,\n  barColor = \"currentColor\",\n  fadeEdges = false,\n  fadeWidth = 20,\n  data = [],\n  className,\n  ...props\n}: WaveformProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const ctx = canvas.getContext(\"2d\")\n    if (!ctx) return\n\n    const rect = canvas.getBoundingClientRect()\n    const dpr = window.devicePixelRatio || 1\n\n    canvas.width = rect.width * dpr\n    canvas.height = rect.height * dpr\n    ctx.scale(dpr, dpr)\n\n    ctx.clearRect(0, 0, rect.width, rect.height)\n    ctx.fillStyle = barColor\n\n    const barCount = Math.floor(rect.width / (barWidth + barGap))\n    const centerY = rect.height / 2\n\n    for (let i = 0; i < barCount && i < data.length; i++) {\n      const x = i * (barWidth + barGap)\n      const barHeight = Math.max(2, data[i] * rect.height * 0.8)\n      const y = centerY - barHeight / 2\n\n      if (barRadius > 0) {\n        ctx.beginPath()\n        ctx.roundRect(x, y, barWidth, barHeight, barRadius)\n        ctx.fill()\n      } else {\n        ctx.fillRect(x, y, barWidth, barHeight)\n      }\n    }\n\n    if (fadeEdges && fadeWidth > 0) {\n      const gradient = ctx.createLinearGradient(0, 0, fadeWidth, 0)\n      gradient.addColorStop(0, \"rgba(255, 255, 255, 1)\")\n      gradient.addColorStop(1, \"rgba(255, 255, 255, 0)\")\n\n      ctx.globalCompositeOperation = \"destination-out\"\n      ctx.fillStyle = gradient\n      ctx.fillRect(0, 0, fadeWidth, rect.height)\n\n      const rightGradient = ctx.createLinearGradient(\n        rect.width - fadeWidth,\n        0,\n        rect.width,\n        0\n      )\n      rightGradient.addColorStop(0, \"rgba(255, 255, 255, 0)\")\n      rightGradient.addColorStop(1, \"rgba(255, 255, 255, 1)\")\n\n      ctx.fillStyle = rightGradient\n      ctx.fillRect(rect.width - fadeWidth, 0, fadeWidth, rect.height)\n    }\n  }, [data, barWidth, barGap, barRadius, barColor, fadeEdges, fadeWidth])\n\n  return (\n    <div className={cn(\"relative\", className)} {...props}>\n      <canvas\n        ref={canvasRef}\n        className=\"w-full\"\n        style={{ height: typeof height === \"number\" ? `${height}px` : height }}\n      />\n    </div>\n  )\n}\n\nexport const ScrollingWaveform = ({\n  speed = 50,\n  barCount = 50,\n  amplitude = 0.8,\n  ...props\n}: ScrollingWaveformProps) => {\n  const dataRef = useRef<number[]>([])\n  const animationRef = useRef<number>()\n  const lastUpdateRef = useRef(0)\n\n  useEffect(() => {\n    // Initialize with random data\n    dataRef.current = Array.from(\n      { length: barCount },\n      () => Math.random() * amplitude\n    )\n\n    const animate = (timestamp: number) => {\n      if (timestamp - lastUpdateRef.current >= speed) {\n        // Shift data left and add new random value\n        dataRef.current.shift()\n        dataRef.current.push(Math.random() * amplitude)\n        lastUpdateRef.current = timestamp\n      }\n      animationRef.current = requestAnimationFrame(animate)\n    }\n\n    animationRef.current = requestAnimationFrame(animate)\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current)\n      }\n    }\n  }, [speed, barCount, amplitude])\n\n  return <Waveform {...props} data={dataRef.current} />\n}\n",
      "type": "registry:ui"
    }
  ]
}