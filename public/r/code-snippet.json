{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-snippet",
  "type": "registry:component",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "dependencies": [
    "prism-react-renderer",
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/media/code-snippet.tsx",
      "content": "\"use client\"\n\nimport React, { useEffect, useState } from \"react\"\nimport { Highlight, PrismTheme } from \"prism-react-renderer\"\n\nimport { cn } from \"@/lib/utils\"\nimport defaultTheme from \"@/styles/prism-theme.json\"\n\nimport { CopyButton } from \"./copy-button\"\n\ninterface CodeSnippetProps {\n  title?: string\n  code: string\n  language?: string\n  className?: string\n  border?: boolean\n  theme?: PrismTheme\n  showLineNumbers?: boolean\n  adaptiveTheme?: {\n    light: PrismTheme\n    dark: PrismTheme\n  }\n}\n\nexport const CodeSnippet: React.FC<CodeSnippetProps> = ({\n  title,\n  code,\n  language = \"typescript\",\n  className,\n  border = true,\n  theme,\n  showLineNumbers = true,\n  adaptiveTheme,\n}) => {\n  const lines = code.trim().split(\"\\n\")\n  const [isDark, setIsDark] = useState(false)\n\n  // Hook to detect dark mode\n  useEffect(() => {\n    const checkDarkMode = () => {\n      setIsDark(document.documentElement.classList.contains(\"dark\"))\n    }\n\n    // Check on mount\n    checkDarkMode()\n\n    // Watch for changes\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.type === \"attributes\" && mutation.attributeName === \"class\") {\n          checkDarkMode()\n        }\n      })\n    })\n\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"class\"],\n    })\n\n    return () => observer.disconnect()\n  }, [])\n\n  // Select theme based on adaptiveTheme prop or fallback to theme/default\n  const selectedTheme = adaptiveTheme \n    ? (isDark ? adaptiveTheme.dark : adaptiveTheme.light)\n    : theme || (defaultTheme as PrismTheme)\n\n  return (\n    <div\n      className={cn(\n        \"rounded-2xl overflow-hidden pointer-events-auto\",\n        border && \"border border-border\",\n        className\n      )}\n    >\n      {title ? (\n        <div\n          className=\"flex items-center justify-between pl-4 pr-3 py-2 border-b h-11\"\n          style={{ \n            backgroundColor: selectedTheme.plain?.backgroundColor || \"#151515\", \n            borderBottomColor: selectedTheme.plain?.backgroundColor === \"#FFFFFF\" ? \"#e5e5e5\" : \"#2a2a2a\"\n          }}\n        >\n          <h3 \n            className=\"text-sm font-medium\" \n            style={{ color: selectedTheme.plain?.color || \"#FFFFFF\" }}\n          >\n            {title}\n          </h3>\n          <CopyButton \n            value={code} \n            className={selectedTheme.plain?.backgroundColor === \"#FFFFFF\" \n              ? \"text-zinc-600 hover:bg-zinc-200 hover:text-zinc-800\" \n              : \"text-zinc-50 hover:bg-zinc-700 hover:text-zinc-50\"\n            } \n          />\n        </div>\n      ) : null}\n      <div\n        className=\"relative max-h-[calc(530px-44px)] py-4\"\n        style={{ backgroundColor: selectedTheme.plain?.backgroundColor || \"#151515\" }}\n      >\n        {!title && (\n          <div\n            className={`absolute ${\n              lines.length === 1\n                ? \"top-1/2 -translate-y-1/2 right-3\"\n                : \"top-4 right-3\"\n            }`}\n          >\n            <CopyButton \n              value={code} \n              className={selectedTheme.plain?.backgroundColor === \"#FFFFFF\" \n                ? \"text-zinc-600 hover:bg-zinc-200 hover:text-zinc-800\" \n                : \"text-zinc-50 hover:bg-zinc-700 hover:text-zinc-50\"\n              } \n            />\n          </div>\n        )}\n        <Highlight theme={selectedTheme} code={code.trim()} language={language}>\n          {({ className, style, tokens, getLineProps, getTokenProps }) => (\n            <pre\n              className={`${className} text-[13px] overflow-x-auto overflow-y-auto max-h-[calc(530px-88px)] font-mono font-medium`}\n              style={style}\n            >\n              {tokens.map((line, i) => (\n                <div\n                  key={i}\n                  {...getLineProps({ line })}\n                  className=\"flex items-center py-px px-4\"\n                  style={{}}\n                  onMouseEnter={(e) =>\n                    (e.currentTarget.style.backgroundColor =\n                      selectedTheme.plain?.backgroundColor === \"#FFFFFF\"\n                        ? \"#f5f5f5\"\n                        : \"#202020\")\n                  }\n                  onMouseLeave={(e) =>\n                    (e.currentTarget.style.backgroundColor = \"transparent\")\n                  }\n                >\n                  {showLineNumbers && (\n                    <span\n                      className=\"mr-4 select-none text-right text-[10px] items-center flex\"\n                      style={{\n                        color:\n                          selectedTheme.plain?.backgroundColor === \"#FFFFFF\"\n                            ? \"#999999\"\n                            : \"#757575\",\n                        minWidth: \"1.5rem\",\n                      }}\n                    >\n                      {i + 1}\n                    </span>\n                  )}\n                  <span className={!showLineNumbers ? \"ml-0\" : \"\"}>\n                    {line.map((token, key) => (\n                      <span key={key} {...getTokenProps({ token })} />\n                    ))}\n                  </span>\n                </div>\n              ))}\n            </pre>\n          )}\n        </Highlight>\n      </div>\n    </div>\n  )\n}\n\nexport default CodeSnippet\n",
      "type": "registry:component",
      "target": "/components/delta/media/code-snippet.tsx"
    },
    {
      "path": "registry/media/copy-button.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { CheckIcon, ClipboardIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ninterface CopyButtonProps extends React.ComponentProps<typeof Button> {\n  value: string\n  src?: string\n}\n\nexport function CopyButton({\n  value,\n  className,\n  variant = \"ghost\",\n  ...props\n}: CopyButtonProps) {\n  const [hasCopied, setHasCopied] = React.useState(false)\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      setHasCopied(false)\n    }, 2000)\n  }, [hasCopied])\n\n  return (\n    <Button\n      size=\"icon\"\n      variant={variant}\n      className={cn(\n        \"relative z-10 size-6 text-zinc-50 hover:bg-zinc-700 hover:text-zinc-50 [&_svg]:size-3\",\n        className\n      )}\n      onClick={() => {\n        navigator.clipboard.writeText(value)\n        setHasCopied(true)\n      }}\n      {...props}\n    >\n      <span className=\"sr-only\">Copy</span>\n      {hasCopied ? <CheckIcon /> : <ClipboardIcon />}\n    </Button>\n  )\n}\n",
      "type": "registry:component",
      "target": "/components/delta/media/copy-button.tsx"
    }
  ]
}