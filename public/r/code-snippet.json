{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-snippet",
  "type": "registry:component",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "dependencies": ["prism-react-renderer", "lucide-react"],
  "registryDependencies": ["button"],
  "files": [
    {
      "path": "registry/media/code-snippet.tsx",
      "content": "\"use client\"\n\nimport React, { useEffect, useState } from \"react\"\nimport { Highlight, PrismTheme } from \"prism-react-renderer\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport { CopyButton } from \"./copy-button\"\n\n// Inline theme definitions to make component self-contained\nconst defaultTheme: PrismTheme = {\n  plain: {\n    color: \"#FFFFFF\",\n    backgroundColor: \"#151515\",\n  },\n  styles: [\n    {\n      types: [\"comment\"],\n      style: {\n        color: \"#757575\",\n        fontStyle: \"italic\",\n      },\n    },\n    {\n      types: [\"keyword\", \"property\", \"property-access\", \"attr-name\"],\n      style: {\n        color: \"#77b7d7\",\n      },\n    },\n    {\n      types: [\"tag\"],\n      style: {\n        color: \"#dfab5c\",\n      },\n    },\n    {\n      types: [\"punctuation\", \"symbol\", \"dom\"],\n      style: {\n        color: \"#ffffff\",\n      },\n    },\n    {\n      types: [\"definition\", \"function\"],\n      style: {\n        color: \"#86d9ca\",\n      },\n    },\n    {\n      types: [\"string\", \"char\", \"attr-value\"],\n      style: {\n        color: \"#977cdc\",\n      },\n    },\n    {\n      types: [\"static\", \"number\"],\n      style: {\n        color: \"#ff6658\",\n      },\n    },\n  ],\n}\n\nconst lightTheme: PrismTheme = {\n  plain: {\n    color: \"#24292e\",\n    backgroundColor: \"#FAFAFA\",\n  },\n  styles: [\n    {\n      types: [\"comment\"],\n      style: {\n        color: \"#8b949e\",\n        fontStyle: \"italic\",\n      },\n    },\n    {\n      types: [\"variable\", \"parameter\"],\n      style: {\n        color: \"#e36209\",\n      },\n    },\n    {\n      types: [\"keyword\", \"builtin\", \"function-definition\"],\n      style: {\n        color: \"#d73a49\",\n      },\n    },\n    {\n      types: [\"property\", \"property-access\", \"attr-name\"],\n      style: {\n        color: \"#005cc5\",\n      },\n    },\n    {\n      types: [\"tag\"],\n      style: {\n        color: \"#22863a\",\n      },\n    },\n    {\n      types: [\"punctuation\", \"symbol\", \"dom\", \"operator\"],\n      style: {\n        color: \"#24292e\",\n      },\n    },\n    {\n      types: [\"function\"],\n      style: {\n        color: \"#6f42c1\",\n      },\n    },\n    {\n      types: [\"class-name\"],\n      style: {\n        color: \"#6f42c1\",\n      },\n    },\n    {\n      types: [\"string\", \"char\", \"attr-value\"],\n      style: {\n        color: \"#032f62\",\n      },\n    },\n    {\n      types: [\"static\", \"number\"],\n      style: {\n        color: \"#005cc5\",\n      },\n    },\n  ],\n}\n\ninterface CodeSnippetProps {\n  title?: string\n  code: string\n  language?: string\n  className?: string\n  border?: boolean\n  theme?: PrismTheme\n  showLineNumbers?: boolean\n  adaptiveTheme?: {\n    light: PrismTheme\n    dark: PrismTheme\n  }\n  tabs?: { [key: string]: { code: string; language?: string } }\n  activeTab?: string\n  onTabChange?: (tab: string) => void\n}\n\nexport const CodeSnippet: React.FC<CodeSnippetProps> = ({\n  title,\n  code,\n  language = \"typescript\",\n  className,\n  border = true,\n  theme,\n  showLineNumbers = true,\n  adaptiveTheme,\n  tabs,\n  activeTab,\n  onTabChange,\n}) => {\n  // Handle tabs functionality\n  const currentTab = tabs && activeTab ? activeTab : null\n  const currentCode = currentTab && tabs ? tabs[currentTab].code : code\n  const currentLanguage =\n    currentTab && tabs ? tabs[currentTab].language || language : language\n\n  const lines = currentCode.trim().split(\"\\n\")\n  const [isDark, setIsDark] = useState(false)\n\n  // Hook to detect dark mode\n  useEffect(() => {\n    const checkDarkMode = () => {\n      setIsDark(document.documentElement.classList.contains(\"dark\"))\n    }\n\n    // Check on mount\n    checkDarkMode()\n\n    // Watch for changes\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (\n          mutation.type === \"attributes\" &&\n          mutation.attributeName === \"class\"\n        ) {\n          checkDarkMode()\n        }\n      })\n    })\n\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"class\"],\n    })\n\n    return () => observer.disconnect()\n  }, [])\n\n  // Select theme based on adaptiveTheme prop or auto-detect light/dark mode\n  const selectedTheme = adaptiveTheme\n    ? isDark\n      ? adaptiveTheme.dark\n      : adaptiveTheme.light\n    : theme || (isDark ? defaultTheme : lightTheme)\n\n  return (\n    <div\n      className={cn(\n        \"rounded-sm overflow-hidden pointer-events-auto\",\n        border && \"border border-border\",\n        className\n      )}\n    >\n      {title || tabs ? (\n        <div\n          className=\"flex items-center justify-between border-b\"\n          style={{\n            backgroundColor: selectedTheme.plain?.backgroundColor || \"#151515\",\n            borderBottomColor:\n              selectedTheme.plain?.backgroundColor?.toLowerCase() ===\n                \"#ffffff\" || selectedTheme.plain?.backgroundColor === \"#FAFAFA\"\n                ? \"#e5e5e5\"\n                : \"#2a2a2a\",\n          }}\n        >\n          {title ? (\n            <h3\n              className=\"text-sm font-medium pl-4 py-2\"\n              style={{ color: selectedTheme.plain?.color || \"#FFFFFF\" }}\n            >\n              {title}\n            </h3>\n          ) : null}\n\n          {tabs && !title ? (\n            <div className=\"flex items-center px-3 \">\n              <div className=\"h-7 translate-y-[2px] gap-3 bg-transparent p-0 pl-1 flex\">\n                {Object.entries(tabs).map(([key]) => (\n                  <button\n                    key={key}\n                    onClick={() => onTabChange?.(key)}\n                    className={cn(\n                      \"rounded-none border-b-2 border-transparent bg-transparent p-0 pb-1.5 font-mono text-sm transition-colors\",\n                      activeTab === key\n                        ? selectedTheme.plain?.backgroundColor?.toLowerCase() ===\n                            \"#ffffff\" ||\n                          selectedTheme.plain?.backgroundColor === \"#FAFAFA\"\n                          ? \"border-b-zinc-900 text-zinc-900\"\n                          : \"border-b-zinc-50 text-zinc-50\"\n                        : selectedTheme.plain?.backgroundColor?.toLowerCase() ===\n                              \"#ffffff\" ||\n                            selectedTheme.plain?.backgroundColor === \"#FAFAFA\"\n                          ? \"text-zinc-600 hover:text-zinc-800\"\n                          : \"text-zinc-400 hover:text-zinc-200\"\n                    )}\n                  >\n                    {key}\n                  </button>\n                ))}\n              </div>\n            </div>\n          ) : null}\n\n          <CopyButton\n            value={currentCode}\n            className={cn(\n              \"mr-3\",\n              selectedTheme.plain?.backgroundColor?.toLowerCase() ===\n                \"#ffffff\" || selectedTheme.plain?.backgroundColor === \"#FAFAFA\"\n                ? \"text-zinc-600 hover:bg-zinc-200 hover:text-zinc-800\"\n                : \"text-zinc-50 hover:bg-zinc-700 hover:text-zinc-50\"\n            )}\n          />\n        </div>\n      ) : null}\n      <div\n        className=\"relative max-h-[calc(530px-44px)] py-4\"\n        style={{\n          backgroundColor: selectedTheme.plain?.backgroundColor || \"#151515\",\n        }}\n      >\n        {!title && !tabs && (\n          <div\n            className={`absolute ${\n              lines.length === 1\n                ? \"top-1/2 -translate-y-1/2 right-3\"\n                : \"top-4 right-3\"\n            }`}\n          >\n            <CopyButton\n              value={currentCode}\n              className={\n                selectedTheme.plain?.backgroundColor?.toLowerCase() ===\n                  \"#ffffff\" ||\n                selectedTheme.plain?.backgroundColor === \"#FAFAFA\"\n                  ? \"text-zinc-600 hover:bg-zinc-200 hover:text-zinc-800\"\n                  : \"text-zinc-50 hover:bg-zinc-700 hover:text-zinc-50\"\n              }\n            />\n          </div>\n        )}\n        <Highlight\n          theme={selectedTheme}\n          code={currentCode.trim()}\n          language={currentLanguage}\n        >\n          {({ className, style, tokens, getLineProps, getTokenProps }) => (\n            <pre\n              className={`${className} text-[13px] overflow-x-auto overflow-y-auto max-h-[calc(530px-88px)] font-mono font-medium thin-scrollbar`}\n              style={{\n                ...style,\n                scrollbarWidth: \"thin\",\n                scrollbarColor:\n                  selectedTheme.plain?.backgroundColor?.toLowerCase() ===\n                    \"#ffffff\" ||\n                  selectedTheme.plain?.backgroundColor === \"#FAFAFA\"\n                    ? \"#d1d5db transparent\"\n                    : \"#4b5563 transparent\",\n              }}\n            >\n              {tokens.map((line, i) => (\n                <div\n                  key={i}\n                  {...getLineProps({ line })}\n                  className=\"flex items-center py-px px-4\"\n                  style={{}}\n                  onMouseEnter={(e) =>\n                    (e.currentTarget.style.backgroundColor =\n                      selectedTheme.plain?.backgroundColor?.toLowerCase() ===\n                        \"#ffffff\" ||\n                      selectedTheme.plain?.backgroundColor === \"#FAFAFA\"\n                        ? \"#f5f5f5\"\n                        : \"#202020\")\n                  }\n                  onMouseLeave={(e) =>\n                    (e.currentTarget.style.backgroundColor = \"transparent\")\n                  }\n                >\n                  {showLineNumbers && (\n                    <span\n                      className=\"mr-4 select-none text-right text-[10px] items-center flex\"\n                      style={{\n                        color:\n                          selectedTheme.plain?.backgroundColor === \"#FFFFFF\" ||\n                          selectedTheme.plain?.backgroundColor === \"#FAFAFA\"\n                            ? \"#999999\"\n                            : \"#757575\",\n                        minWidth: \"1.5rem\",\n                      }}\n                    >\n                      {i + 1}\n                    </span>\n                  )}\n                  <span className={!showLineNumbers ? \"ml-0\" : \"\"}>\n                    {line.map((token, key) => (\n                      <span key={key} {...getTokenProps({ token })} />\n                    ))}\n                  </span>\n                </div>\n              ))}\n            </pre>\n          )}\n        </Highlight>\n      </div>\n    </div>\n  )\n}\n\nexport default CodeSnippet\n",
      "type": "registry:component",
      "target": "components/delta/code-snippet.tsx"
    },
    {
      "path": "registry/media/copy-button.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { CheckIcon, CopyIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ninterface CopyButtonProps extends React.ComponentProps<typeof Button> {\n  value: string\n  src?: string\n}\n\nexport function CopyButton({\n  value,\n  className,\n  variant = \"ghost\",\n  ...props\n}: CopyButtonProps) {\n  const [hasCopied, setHasCopied] = React.useState(false)\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      setHasCopied(false)\n    }, 2000)\n  }, [hasCopied])\n\n  return (\n    <Button\n      size=\"icon\"\n      variant={variant}\n      className={cn(\n        \"relative z-10 size-6 text-zinc-50 hover:bg-zinc-700 hover:text-zinc-50 [&_svg]:size-2\",\n        className\n      )}\n      onClick={() => {\n        navigator.clipboard.writeText(value)\n        setHasCopied(true)\n      }}\n      {...props}\n    >\n      <span className=\"sr-only\">Copy</span>\n      {hasCopied ? <CheckIcon /> : <CopyIcon />}\n    </Button>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/delta/copy-button.tsx"
    }
  ]
}
