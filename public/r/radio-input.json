{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radio-input",
  "type": "registry:component",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "dependencies": [
    "zod"
  ],
  "files": [
    {
      "path": "registry/inputs/radio-input.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport type { z } from \"zod\"\n\nimport { cn } from \"@/lib/utils\"\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\"\n\nexport interface RadioOption {\n  value: string\n  label: string\n  description?: string\n  disabled?: boolean\n  icon?: React.ReactNode\n}\n\nexport interface RadioInputProps {\n  /** The label for the radio group */\n  label: string\n  /** The name of the radio group (used for form submission) */\n  name: string\n  /** Options for the radio group */\n  options: RadioOption[]\n  /** Optional description text to display below the label */\n  description?: string\n  /** Error message to display (typically from Zod validation) */\n  error?: string\n  /** Whether the field is required */\n  required?: boolean\n  /** Whether the field is in a loading/pending state */\n  pending?: boolean\n  /** Default selected value */\n  defaultValue?: string\n  /** Controlled selected value */\n  value?: string\n  /** Container className for the entire component */\n  containerClassName?: string\n  /** Radio group className */\n  radioGroupClassName?: string\n  /** Radio item className */\n  radioItemClassName?: string\n  /** Label className */\n  labelClassName?: string\n  /** Label variant - 'default' or 'muted' */\n  labelVariant?: \"default\" | \"muted\"\n  /** Radio input variant - 'default' or 'pill' */\n  variant?: \"default\" | \"pill\"\n  /** Layout orientation - 'vertical' or 'horizontal' */\n  orientation?: \"vertical\" | \"horizontal\"\n  /** Zod schema for validation (optional - can be handled at the form level) */\n  schema?: z.ZodType<string>\n  /** Callback when validation occurs */\n  onValidate?: (isValid: boolean, value: string, error?: string) => void\n  /** Callback when selection changes */\n  onValueChange?: (value: string) => void\n  /** ID for the radio group */\n  id?: string\n  /** Whether the radio group is disabled */\n  disabled?: boolean\n}\n\n/**\n * RadioInput component that integrates with Zod validation\n */\nexport function RadioInput({\n  label,\n  name,\n  options,\n  description,\n  error,\n  required = false,\n  pending = false,\n  defaultValue,\n  value,\n  containerClassName,\n  radioGroupClassName,\n  radioItemClassName,\n  labelClassName,\n  labelVariant = \"default\",\n  variant = \"default\",\n  orientation = \"vertical\",\n  schema,\n  onValidate,\n  onValueChange,\n  id = name,\n  disabled = false,\n}: RadioInputProps) {\n  const [localError, setLocalError] = React.useState<string | undefined>(error)\n  const [currentValue, setCurrentValue] = React.useState<string | undefined>(\n    value || defaultValue\n  )\n  const hasError = !!localError || !!error\n  const errorId = `error-${id}`\n\n  // Update local error when prop changes\n  React.useEffect(() => {\n    setLocalError(error)\n  }, [error])\n\n  // Update current value when controlled value changes\n  React.useEffect(() => {\n    setCurrentValue(value || defaultValue)\n  }, [value, defaultValue])\n\n  // Handle validation with the provided schema\n  const validateRadio = React.useCallback(\n    (value: string) => {\n      if (!schema) return\n\n      const result = schema.safeParse(value)\n      if (!result.success) {\n        const errorMessage =\n          result.error.errors[0]?.message || \"Invalid selection\"\n        setLocalError(errorMessage)\n        onValidate?.(false, value, errorMessage)\n      } else {\n        setLocalError(undefined)\n        onValidate?.(true, value)\n      }\n    },\n    [schema, onValidate]\n  )\n\n  // Handle selection change\n  const handleValueChange = (newValue: string) => {\n    // Update current value for proper state tracking\n    setCurrentValue(newValue)\n\n    // If we have a schema, validate on change\n    if (schema) {\n      validateRadio(newValue)\n    }\n\n    // Call the original onValueChange if provided\n    onValueChange?.(newValue)\n  }\n\n  return (\n    <div\n      className={cn(\"group/field grid gap-2\", containerClassName)}\n      data-invalid={hasError}\n    >\n      <label\n        id={`${id}-label`}\n        className={cn(\n          \"text-sm font-normal leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-data-[invalid=true]/field:text-destructive\",\n          labelVariant === \"muted\" && \"text-muted-foreground\",\n          labelClassName\n        )}\n      >\n        {label}\n        {required && <span aria-hidden=\"true\"> *</span>}\n      </label>\n\n      {description && (\n        <p className=\"text-xs text-muted-foreground\">{description}</p>\n      )}\n\n      <RadioGroup\n        defaultValue={defaultValue}\n        value={value || currentValue}\n        onValueChange={handleValueChange}\n        disabled={pending || disabled}\n        className={cn(\n          // Orientation styling\n          orientation === \"horizontal\"\n            ? \"flex items-center gap-4\"\n            : \"space-y-3\",\n          radioGroupClassName\n        )}\n        aria-labelledby={`${id}-label`}\n        aria-invalid={hasError}\n        aria-errormessage={hasError ? errorId : undefined}\n        aria-required={required}\n      >\n        {options.map((option, index) => (\n          <div\n            key={option.value}\n            className={cn(\n              \"flex items-start gap-3 p-4 rounded-md transition-all duration-200 cursor-pointer group\",\n\n              // Default variant styling\n              variant === \"default\" && [\n                \"bg-background border border-border\",\n                // Selected state for default variant\n                `data-[state=checked]:border-primary data-[state=checked]:ring-2 data-[state=checked]:ring-primary/20`,\n              ],\n\n              // Pill variant styling - consistent border width to prevent layout shift\n              variant === \"pill\" && [\n                \"bg-muted rounded-lg border-2 border-transparent\",\n                \"hover:bg-muted/80\",\n                // Selected state for pill variant - shows accent border like text-input\n                `data-[state=checked]:border-primary data-[state=checked]:bg-primary/5`,\n              ],\n\n              // Error styling\n              \"group-data-[invalid=true]/field:border-destructive data-[state=checked]:group-data-[invalid=true]/field:border-destructive\"\n            )}\n            data-state={currentValue === option.value ? \"checked\" : \"unchecked\"}\n            onClick={() => {\n              if (!option.disabled && !pending && !disabled) {\n                handleValueChange(option.value)\n              }\n            }}\n          >\n            <RadioGroupItem\n              value={option.value}\n              id={`${id}-${option.value}`}\n              disabled={option.disabled || pending || disabled}\n              className={cn(\n                \"mt-0.5 data-[state=checked]:border-primary data-[state=checked]:text-primary focus-visible:ring-primary\",\n                \"group-data-[invalid=true]/field:border-destructive data-[state=checked]:group-data-[invalid=true]/field:border-destructive\",\n                radioItemClassName\n              )}\n            />\n            <div className=\"grid gap-1 leading-none flex-1\">\n              <label\n                htmlFor={`${id}-${option.value}`}\n                className=\"text-sm font-normal leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\n              >\n                {option.label}\n              </label>\n              {option.description && (\n                <p className=\"text-xs text-muted-foreground\">\n                  {option.description}\n                </p>\n              )}\n            </div>\n            {option.icon && (\n              <div className=\"flex-shrink-0 w-8 h-8 flex items-center justify-center text-muted-foreground\">\n                {option.icon}\n              </div>\n            )}\n          </div>\n        ))}\n      </RadioGroup>\n\n      {hasError && (\n        <p id={errorId} className=\"text-destructive text-xs\">\n          {localError || error}\n        </p>\n      )}\n\n      {/* Hidden input for form submission */}\n      <input type=\"hidden\" name={name} value={currentValue || \"\"} />\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "/components/delta/inputs/radio-input.tsx"
    }
  ]
}