{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radio-input",
  "type": "registry:component",
  "title": "Radio Input",
  "description": "A component for radio-input",
  "dependencies": [
    "zod"
  ],
  "registryDependencies": [
    "utils",
    "radio-group"
  ],
  "files": [
    {
      "path": "delta/components/radio-input.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/lib/utils';\nimport type { z } from 'zod';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\n\nexport interface RadioOption {\n  value: string;\n  label: string;\n  description?: string;\n  disabled?: boolean;\n}\n\nexport interface RadioInputProps {\n  /** The label for the radio group */\n  label: string;\n  /** The name of the radio group (used for form submission) */\n  name: string;\n  /** Options for the radio group */\n  options: RadioOption[];\n  /** Optional description text to display below the label */\n  description?: string;\n  /** Error message to display (typically from Zod validation) */\n  error?: string;\n  /** Whether the field is required */\n  required?: boolean;\n  /** Whether the field is in a loading/pending state */\n  pending?: boolean;\n  /** Default selected value */\n  defaultValue?: string;\n  /** Controlled selected value */\n  value?: string;\n  /** Container className for the entire component */\n  containerClassName?: string;\n  /** Radio group className */\n  radioGroupClassName?: string;\n  /** Radio item className */\n  radioItemClassName?: string;\n  /** Label className */\n  labelClassName?: string;\n  /** Label variant - 'default' or 'muted' */\n  labelVariant?: 'default' | 'muted';\n  /** Layout orientation - 'vertical' or 'horizontal' */\n  orientation?: 'vertical' | 'horizontal';\n  /** Zod schema for validation (optional - can be handled at the form level) */\n  schema?: z.ZodType<string>;\n  /** Callback when validation occurs */\n  onValidate?: (isValid: boolean, value: string, error?: string) => void;\n  /** Callback when selection changes */\n  onValueChange?: (value: string) => void;\n  /** ID for the radio group */\n  id?: string;\n  /** Whether the radio group is disabled */\n  disabled?: boolean;\n}\n\n/**\n * RadioInput component that integrates with Zod validation\n */\nexport function RadioInput({\n  label,\n  name,\n  options,\n  description,\n  error,\n  required = false,\n  pending = false,\n  defaultValue,\n  value,\n  containerClassName,\n  radioGroupClassName,\n  radioItemClassName,\n  labelClassName,\n  labelVariant = 'default',\n  orientation = 'vertical',\n  schema,\n  onValidate,\n  onValueChange,\n  id = name,\n  disabled = false,\n}: RadioInputProps) {\n  const [localError, setLocalError] = React.useState<string | undefined>(error);\n  const hasError = !!localError || !!error;\n  const errorId = `error-${id}`;\n\n  // Update local error when prop changes\n  React.useEffect(() => {\n    setLocalError(error);\n  }, [error]);\n\n  // Handle validation with the provided schema\n  const validateRadio = React.useCallback(\n    (value: string) => {\n      if (!schema) return;\n\n      const result = schema.safeParse(value);\n      if (!result.success) {\n        const errorMessage =\n          result.error.errors[0]?.message || 'Invalid selection';\n        setLocalError(errorMessage);\n        onValidate?.(false, value, errorMessage);\n      } else {\n        setLocalError(undefined);\n        onValidate?.(true, value);\n      }\n    },\n    [schema, onValidate],\n  );\n\n  // Handle selection change\n  const handleValueChange = (newValue: string) => {\n    // If we have a schema, validate on change\n    if (schema) {\n      validateRadio(newValue);\n    }\n\n    // Call the original onValueChange if provided\n    onValueChange?.(newValue);\n  };\n\n  return (\n    <div\n      className={cn('group/field grid gap-2', containerClassName)}\n      data-invalid={hasError}\n    >\n      <label\n        id={`${id}-label`}\n        className={cn(\n          'text-sm mb-2 font-normal leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-data-[invalid=true]/field:text-destructive',\n          labelVariant === 'muted' && 'text-muted-foreground',\n          labelClassName,\n        )}\n      >\n        {label}\n        {required && <span aria-hidden=\"true\"> *</span>}\n      </label>\n\n      {description && (\n        <p className=\"text-xs text-muted-foreground\">{description}</p>\n      )}\n\n      <RadioGroup\n        defaultValue={defaultValue}\n        value={value}\n        onValueChange={handleValueChange}\n        disabled={pending || disabled}\n        className={cn(\n          orientation === 'horizontal'\n            ? 'flex items-center space-x-4'\n            : 'space-y-3',\n          radioGroupClassName,\n        )}\n        aria-labelledby={`${id}-label`}\n        aria-invalid={hasError}\n        aria-errormessage={hasError ? errorId : undefined}\n        aria-required={required}\n      >\n        {options.map((option) => (\n          <div key={option.value} className=\"flex items-start space-x-2\">\n            <RadioGroupItem\n              value={option.value}\n              id={`${id}-${option.value}`}\n              disabled={option.disabled || pending || disabled}\n              className={cn(\n                'group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive',\n                radioItemClassName,\n              )}\n            />\n            <div className=\"grid gap-1 leading-none\">\n              <label\n                htmlFor={`${id}-${option.value}`}\n                className=\"text-xs font-normal leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n              >\n                {option.label}\n              </label>\n              {option.description && (\n                <p className=\"text-xs text-muted-foreground\">\n                  {option.description}\n                </p>\n              )}\n            </div>\n          </div>\n        ))}\n      </RadioGroup>\n\n      {hasError && (\n        <p id={errorId} className=\"text-destructive text-xs\">\n          {localError || error}\n        </p>\n      )}\n\n      {/* Hidden input for form submission */}\n      <input type=\"hidden\" name={name} value={value || defaultValue || ''} />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/components/radio-input.tsx"
    },
    {
      "path": "delta/examples/radio-input-basic-demo.tsx",
      "content": "'use client';\n\nimport { RadioInput } from '@/delta/components/radio-input';\n\nexport default function RadioInputBasicDemo() {\n  const options = [\n    { value: 'email', label: 'Email', description: 'Get updates via email' },\n    { value: 'sms', label: 'SMS', description: 'Get updates via text message' },\n    {\n      value: 'push',\n      label: 'Push Notifications',\n      description: 'Get updates via push notifications',\n    },\n  ];\n\n  return (\n    <div className=\"max-w-md mx-auto\">\n      <RadioInput\n        label=\"Notification Preferences\"\n        name=\"notifications\"\n        options={options}\n        description=\"How would you like to receive notifications?\"\n        defaultValue=\"email\"\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/examples/radio-input-basic-demo.tsx"
    },
    {
      "path": "content/docs/radio-input.mdx",
      "content": "# RadioInput\n\nA customizable radio input component with validation support, orientation options, and accessibility features.\n\n## Basic Usage\n\n<ComponentTabs name=\"radio-input-basic\" />\n\n<InstallationInstructions componentName=\"radio-input\" />\n\n## Props\n\n<Table>\n  <TableHeader>\n    <TableRow>\n      <TableHead>Name</TableHead>\n      <TableHead>Type</TableHead>\n      <TableHead>Default</TableHead>\n      <TableHead>Description</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell>`name`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>The name of the radio group (used for form submission)</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`options`</TableCell>\n      <TableCell>`Array<{ value: string, label: string, description?: string, disabled?: boolean }>`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Options for the radio group</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`description`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Optional description text to display below the label</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`error`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Error message to display (typically from Zod validation)</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`required`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether the field is required</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`orientation`</TableCell>\n      <TableCell>`'vertical' | 'horizontal'`</TableCell>\n      <TableCell>`'vertical'`</TableCell>\n      <TableCell>Layout orientation - 'vertical' or 'horizontal'</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`value`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Controlled selected value</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`defaultValue`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Default selected value</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`disabled`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether the radio group is disabled</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n\n## Examples\n\n### Basic Example\n\n```tsx\nimport { RadioInput } from \"@/components/ui/radio-input\"\n\nexport default function Example() {\n  const options = [\n    { value: \"option1\", label: \"Option 1\" },\n    { value: \"option2\", label: \"Option 2\" },\n    { value: \"option3\", label: \"Option 3\" }\n  ]\n\n  return (\n    <RadioInput\n      label=\"Select an option\"\n      name=\"options\"\n      options={options}\n      defaultValue=\"option1\"\n    />\n  )\n}\n```\n\n### Horizontal Layout\n\n```tsx\nimport { RadioInput } from \"@/components/ui/radio-input\"\n\nexport default function HorizontalExample() {\n  const options = [\n    { value: \"yes\", label: \"Yes\" },\n    { value: \"no\", label: \"No\" }\n  ]\n\n  return (\n    <RadioInput\n      label=\"Proceed with action?\"\n      name=\"confirm\"\n      options={options}\n      orientation=\"horizontal\"\n    />\n  )\n}\n```\n\n### With Descriptions and Controlled State\n\n```tsx\nimport { useState } from \"react\"\nimport { RadioInput } from \"@/components/ui/radio-input\"\n\nexport default function ControlledExample() {\n  const [selectedOption, setSelectedOption] = useState(\"basic\")\n  \n  const options = [\n    { \n      value: \"basic\", \n      label: \"Basic Plan\", \n      description: \"$10/month - Access to basic features\" \n    },\n    { \n      value: \"pro\", \n      label: \"Pro Plan\", \n      description: \"$25/month - Access to all features\" \n    },\n    { \n      value: \"enterprise\", \n      label: \"Enterprise Plan\", \n      description: \"$100/month - Priority support and custom features\" \n    }\n  ]\n  \n  return (\n    <RadioInput\n      label=\"Select Subscription Plan\"\n      name=\"plan\"\n      options={options}\n      value={selectedOption}\n      onValueChange={setSelectedOption}\n    />\n  )\n}\n```\n\n## Accessibility\n\nThe RadioInput component is built with accessibility in mind:\n\n- Proper labeling and ARIA attributes\n- Support for required field indicators\n- Error messages are properly associated with the radio group\n- Keyboard navigation support\n- Clear focus states for keyboard users\n",
      "type": "registry:component",
      "target": "content/docs/radio-input.mdx"
    }
  ]
}