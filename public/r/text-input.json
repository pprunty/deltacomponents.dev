{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text-input",
  "type": "registry:component",
  "title": "Text Input",
  "description": "A text input component with validation, error handling, and various styling options",
  "dependencies": [
    "zod"
  ],
  "registryDependencies": [
    "input"
  ],
  "files": [
    {
      "path": "delta/inputs/text-input.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { Input } from '@/components/ui/input';\nimport { cn } from '@/lib/utils';\nimport type { z } from 'zod';\n\nexport interface TextInputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {\n  /** The label for the input field */\n  label: string;\n  /** The name of the input field (used for form submission) */\n  name: string;\n  /** Optional description text to display below the label */\n  description?: string;\n  /** Optional hint text to display below the input */\n  hint?: string;\n  /** Error message to display (typically from Zod validation) */\n  error?: string;\n  /** Whether the field is required */\n  required?: boolean;\n  /** Whether the field is in a loading/pending state */\n  pending?: boolean;\n  /** Default value for the input */\n  defaultValue?: string;\n  /** Container className for the entire component */\n  containerClassName?: string;\n  /** Label className for customizing the label */\n  labelClassName?: string;\n  /** Label variant - 'default' or 'muted' */\n  labelVariant?: 'default' | 'muted';\n  /** Input variant - 'default' or 'pill' */\n  variant?: 'default' | 'pill';\n  /** Whether to show a colored border (only applies to pill variant) */\n  coloredBorder?: boolean;\n  /** Zod schema for validation (optional - can be handled at the form level) */\n  schema?: z.ZodType<string>;\n  /** Callback when validation occurs */\n  onValidate?: (isValid: boolean, value: string, error?: string) => void;\n}\n\n/**\n * TextInput component that integrates with Zod validation\n */\nexport function TextInput({\n  label,\n  name,\n  description,\n  hint,\n  error,\n  required = false,\n  pending = false,\n  defaultValue,\n  containerClassName,\n  labelClassName,\n  labelVariant = 'default',\n  variant = 'default',\n  coloredBorder = false,\n  schema,\n  onValidate,\n  className,\n  id = name,\n  value,\n  ...props\n}: TextInputProps) {\n  const [localError, setLocalError] = React.useState<string | undefined>(error);\n  const hasError = !!localError || !!error;\n  const errorId = `error-${id}`;\n  const hintId = `hint-${id}`;\n\n  // Determine if component is controlled or uncontrolled\n  const isControlled = value !== undefined;\n\n  // Update local error when prop changes\n  React.useEffect(() => {\n    setLocalError(error);\n  }, [error]);\n\n  // Handle validation with the provided schema\n  const validateInput = React.useCallback(\n    (value: string) => {\n      if (!schema) return;\n\n      const result = schema.safeParse(value);\n      if (!result.success) {\n        const errorMessage = result.error.errors[0]?.message || 'Invalid input';\n        setLocalError(errorMessage);\n        onValidate?.(false, value, errorMessage);\n      } else {\n        setLocalError(undefined);\n        onValidate?.(true, value);\n      }\n    },\n    [schema, onValidate],\n  );\n\n  // Handle input change\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n\n    // If we have a schema, validate on change\n    if (schema) {\n      validateInput(newValue);\n    }\n\n    // Call the original onChange if provided\n    props.onChange?.(e);\n  };\n\n  // Handle blur event for validation\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (schema) {\n      validateInput(e.target.value);\n    }\n\n    // Call the original onBlur if provided\n    props.onBlur?.(e);\n  };\n\n  return (\n    <div\n      className={cn('group/field grid gap-2', containerClassName)}\n      data-invalid={hasError}\n    >\n      <label\n        htmlFor={id}\n        className={cn(\n          'text-sm font-normal leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-data-[invalid=true]/field:text-destructive',\n          labelVariant === 'muted' && 'text-muted-foreground',\n          labelClassName,\n        )}\n      >\n        {label}\n        {required && <span aria-hidden=\"true\"> *</span>}\n      </label>\n\n      {description && (\n        <p className=\"text-xs text-muted-foreground\">{description}</p>\n      )}\n\n      <Input\n        id={id}\n        name={name}\n        disabled={pending || props.disabled}\n        aria-invalid={hasError}\n        aria-errormessage={hasError ? errorId : undefined}\n        aria-describedby={hint ? hintId : undefined}\n        aria-required={required}\n        className={cn(\n          // Default variant styling\n          'h-[46px] md:text-md text-md focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#4E90F9] dark:ring-offset-black ring-offset-white',\n          variant === 'default' &&\n            'shadow-[0px_2px_2px_rgba(0,0,0,0.03),_0px_4px_7px_rgba(0,0,0,0.02)]',\n\n          // Pill variant styling - less rounded\n          variant === 'pill' &&\n            'bg-muted border-0 rounded-lg h-12 px-4 focus:ring-offset-2',\n          variant === 'pill' && coloredBorder && 'border-2 border-primary',\n          variant === 'pill' && 'placeholder:text-muted-foreground',\n\n          // Error styling for both variants\n          'group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive',\n          className,\n        )}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        // Only pass one of value or defaultValue, not both\n        {...(isControlled ? { value } : { defaultValue })}\n        {...props}\n      />\n\n      {hint && !hasError && (\n        <p id={hintId} className=\"text-xs text-muted-foreground mt-1\">\n          {hint}\n        </p>\n      )}\n\n      {hasError && (\n        <p id={errorId} className=\"text-destructive text-xs\">\n          {localError || error}\n        </p>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/inputs/text-input.tsx"
    },
    {
      "path": "delta/inputs/text-input-demo.tsx",
      "content": "'use client';\n\nimport { TextInput } from './text-input';\nimport { z } from 'zod';\n\nexport default function TextInputDemo() {\n  return (\n    <div className=\"container mx-auto max-w-7xl px-4 py-8 space-y-8\">\n      <DefaultTextInputDemo />\n      <PillTextInputDemo />\n      <ValidationTextInputDemo />\n      <MutedLabelTextInputDemo />\n      <RequiredTextInputDemo />\n      <DisabledTextInputDemo />\n      <HintTextInputDemo />\n    </div>\n  );\n}\n\nexport function DefaultTextInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Default Text Input</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <TextInput label=\"Name\" name=\"name\" placeholder=\"Enter your name\" />\n        <TextInput\n          label=\"Email\"\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"Enter your email\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function PillTextInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Pill Variant</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <TextInput\n          label=\"Username\"\n          name=\"username\"\n          placeholder=\"Enter your username\"\n          variant=\"pill\"\n        />\n        <TextInput\n          label=\"Phone Number\"\n          name=\"phone\"\n          type=\"tel\"\n          placeholder=\"Enter your phone number\"\n          variant=\"pill\"\n          coloredBorder\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function ValidationTextInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">With Validation</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <TextInput\n          label=\"Password\"\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Enter your password\"\n          error=\"Password must be at least 8 characters\"\n          schema={z.string().min(8, 'Password must be at least 8 characters')}\n        />\n        <TextInput\n          label=\"Email\"\n          name=\"email-validation\"\n          type=\"email\"\n          placeholder=\"Enter your email\"\n          error=\"Please enter a valid email address\"\n          schema={z.string().email('Please enter a valid email address')}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function MutedLabelTextInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Muted Label Variant</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <TextInput\n          label=\"First Name\"\n          name=\"first-name\"\n          placeholder=\"Enter your first name\"\n          labelVariant=\"muted\"\n        />\n        <TextInput\n          label=\"Last Name\"\n          name=\"last-name\"\n          placeholder=\"Enter your last name\"\n          labelVariant=\"muted\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function RequiredTextInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Required Fields</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <TextInput\n          label=\"Full Name\"\n          name=\"full-name\"\n          placeholder=\"Enter your full name\"\n          required\n        />\n        <TextInput\n          label=\"Email Address\"\n          name=\"email-required\"\n          type=\"email\"\n          placeholder=\"Enter your email address\"\n          required\n          variant=\"pill\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function DisabledTextInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Disabled State</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <TextInput\n          label=\"Username\"\n          name=\"username-disabled\"\n          placeholder=\"Enter your username\"\n          disabled\n          defaultValue=\"johndoe\"\n        />\n        <TextInput\n          label=\"Email\"\n          name=\"email-disabled\"\n          type=\"email\"\n          placeholder=\"Enter your email\"\n          disabled\n          defaultValue=\"john@example.com\"\n          variant=\"pill\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function HintTextInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">With Hint Text</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <TextInput\n          label=\"Password\"\n          name=\"password-hint\"\n          type=\"password\"\n          placeholder=\"Enter your password\"\n          hint=\"Password must be at least 8 characters and include a number\"\n        />\n        <TextInput\n          label=\"Username\"\n          name=\"username-hint\"\n          placeholder=\"Choose a username\"\n          hint=\"Username can only contain letters, numbers, and underscores\"\n          variant=\"pill\"\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/inputs/text-input-demo.tsx"
    }
  ]
}