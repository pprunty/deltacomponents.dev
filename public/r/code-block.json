{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-block",
  "type": "registry:component",
  "dependencies": [
    "shikiji",
    "next-themes",
    "@phosphor-icons/react",
    "lucide-react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/media/code-block.tsx",
      "content": "\"use client\"\n\n/**\n * Production-grade CodeBlock component powered by **react-shiki**.\n *\n * ▸ Dual-theme aware via `next-themes` (preset ThemeOption → Shiki bundle).\n * ▸ Copy-to-clipboard, optional line-numbers, per-line highlights, caption,\n *   gradient-fade + expand/collapse.\n * ▸ No `dangerouslySetInnerHTML`; react-shiki returns real React nodes.\n * ▸ Memoised internally by react-shiki so no extra LocalStorage cache needed.\n *\n * 2025-05-19 — patch-02 ✅\n *   • **Line numbers visible** → enable default styles from react-shiki.\n *   • **Font size** → force `text-[13px]` on the <pre> root.\n */\nimport { useEffect, useRef, useState } from \"react\"\nimport { CheckIcon, ChevronDown, ChevronUp, ClipboardIcon } from \"lucide-react\"\nimport { useTheme } from \"next-themes\"\nimport ShikiHighlighter from \"react-shiki\"\nimport type { BundledTheme } from \"shikiji\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\n// import './code-block.css';\n\n// -------------------------------------------------------------------------------------\n// Theme mapping\n// -------------------------------------------------------------------------------------\nexport type ThemeOption =\n  | \"default\"\n  | \"github\"\n  | \"vitesse\"\n  | \"gruvbox\"\n  | \"plastic\"\n\nconst themeMapping: Record<\n  ThemeOption,\n  { light: BundledTheme; dark: BundledTheme }\n> = {\n  default: { light: \"github-light\", dark: \"github-dark\" },\n  github: { light: \"github-light\", dark: \"github-dark\" },\n  vitesse: { light: \"vitesse-light\", dark: \"vitesse-dark\" },\n  gruvbox: { light: \"solarized-light\", dark: \"material-theme-darker\" },\n  plastic: { light: \"light-plus\", dark: \"material-theme\" },\n}\n\n// -------------------------------------------------------------------------------------\n// Helpers\n// -------------------------------------------------------------------------------------\n// Highlight functionality will be handled in a different way\n\n// -------------------------------------------------------------------------------------\n// Component\n// -------------------------------------------------------------------------------------\nexport interface CodeBlockProps {\n  code: string\n  language?: string\n  caption?: string\n  theme?: ThemeOption\n  showCopyButton?: boolean\n  showLineNumbers?: boolean\n  highlightLines?: number[]\n  maxHeight?: string\n  showExpandButton?: boolean\n  border?: boolean\n  gradientOverlay?: boolean\n  className?: string\n}\n\nexport default function CodeBlock({\n  code,\n  language = \"typescript\",\n  caption,\n  theme = \"default\",\n  showCopyButton = true,\n  showLineNumbers = false,\n  highlightLines = [],\n  maxHeight = \"300px\",\n  showExpandButton = true,\n  border = false,\n  gradientOverlay = false,\n  className,\n}: CodeBlockProps) {\n  const { resolvedTheme } = useTheme()\n  const [mounted, setMounted] = useState(false)\n  const [expanded, setExpanded] = useState(false)\n  const [copied, setCopied] = useState(false)\n  const [contentOverflows, setContentOverflows] = useState(false)\n  const contentRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => setMounted(true), [])\n\n  useEffect(() => {\n    const el = contentRef.current\n    if (!el) return\n    const check = () => setContentOverflows(el.scrollHeight > el.clientHeight)\n    check()\n    window.addEventListener(\"resize\", check)\n    return () => window.removeEventListener(\"resize\", check)\n  }, [code, maxHeight, expanded])\n\n  // theme selection\n  const themeObj = themeMapping[theme] ?? themeMapping.default\n  const shikiTheme = { light: themeObj.light, dark: themeObj.dark } as const\n\n  // clipboard helper\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(code).then(() => {\n      setCopied(true)\n      setTimeout(() => setCopied(false), 1500)\n    })\n  }\n\n  return (\n    <div\n      className={cn(\n        \"relative w-full bg-card text-card-foreground\",\n        border && \"border border-border rounded-lg\",\n        className\n      )}\n    >\n      {caption && (\n        <div className=\"text-sm text-muted-foreground mb-2\">{caption}</div>\n      )}\n\n      {/* copy */}\n      {showCopyButton && mounted && (\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          aria-label=\"Copy code\"\n          className=\"absolute right-2.5 top-2 z-10 size-6 text-zinc-50 hover:bg-zinc-700 hover:text-zinc-50 [&_svg]:size-3\"\n          onClick={copyToClipboard}\n        >\n          {copied ? <CheckIcon /> : <ClipboardIcon />}\n        </Button>\n      )}\n\n      {/* code */}\n      <div\n        ref={contentRef}\n        style={\n          {\n            \"--code-block-max-height\": gradientOverlay ? \"150px\" : maxHeight,\n          } as React.CSSProperties\n        }\n        className={cn(\n          \"relative code-content\",\n          !expanded\n            ? \"max-h-[var(--code-block-max-height)] overflow-y-auto\"\n            : \"max-h-[600px] overflow-y-auto\"\n        )}\n      >\n        <ShikiHighlighter\n          language={language}\n          theme={shikiTheme}\n          defaultColor={resolvedTheme === \"dark\" ? \"dark\" : \"light\"}\n          /** default styles include line-number gutter */\n          addDefaultStyles\n          showLanguage={false}\n          className={cn(\n            \"text-sm\", // global font-size override\n            showLineNumbers && \"show-line-numbers\",\n            highlightLines.length > 0 && \"has-highlight\",\n            !showLineNumbers && \"pl-4\"\n          )}\n        >\n          {code.trimEnd()}\n        </ShikiHighlighter>\n\n        {!expanded && gradientOverlay && contentOverflows && (\n          <div className=\"absolute bottom-0 left-0 right-0 h-24 bg-gradient-to-t from-card from-10% to-transparent pointer-events-none\" />\n        )}\n      </div>\n\n      {showExpandButton && contentOverflows && (\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          aria-label={expanded ? \"Collapse code\" : \"Expand code\"}\n          className=\"mt-1 flex mx-auto\"\n          onClick={() => setExpanded(!expanded)}\n        >\n          {expanded ? <ChevronUp size={18} /> : <ChevronDown size={18} />}\n        </Button>\n      )}\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/media/code-block.css",
      "content": "/* Custom styles for Shiki code blocks */\n.shiki-container {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,\n    \"Liberation Mono\", \"Courier New\", monospace;\n  font-size: 14px;\n  line-height: 1.5;\n}\n\n.shiki-container pre {\n  margin: 0;\n  padding: 0;\n}\n\n.shiki-container code {\n  display: block;\n  overflow-x: auto;\n  padding: 0;\n}\n\n/* Remove the overriding styles that were causing issues */\n.shiki {\n  background-color: transparent !important;\n  /* Add some breathing room inside the code container */\n  padding: 0 !important;\n}\n\n/* Custom scrollbar styling for better UX */\n.overflow-y-auto,\n.overflow-x-auto {\n  scrollbar-width: thin;\n  scrollbar-color: rgba(155, 155, 155, 0.5) transparent;\n}\n\n.overflow-y-auto::-webkit-scrollbar,\n.overflow-x-auto::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n.overflow-y-auto::-webkit-scrollbar-track,\n.overflow-x-auto::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.overflow-y-auto::-webkit-scrollbar-thumb,\n.overflow-x-auto::-webkit-scrollbar-thumb {\n  background-color: rgba(155, 155, 155, 0.5);\n  border-radius: 20px;\n  border: 3px solid transparent;\n}\n\n.overflow-y-auto::-webkit-scrollbar-thumb:hover,\n.overflow-x-auto::-webkit-scrollbar-thumb:hover {\n  background-color: rgba(155, 155, 155, 0.7);\n}\n\n/* Line number styles */\n.line-number {\n  display: inline-block;\n  width: 2rem;\n  text-align: right;\n  padding-right: 1rem;\n  user-select: none;\n  opacity: 0.5;\n}\n\n/* Highlighted line styles */\n.highlighted-line {\n  background-color: rgba(255, 255, 0, 0.1);\n  display: block;\n  margin: 0 -1rem;\n  padding: 0 1rem;\n}\n",
      "type": "registry:component"
    }
  ]
}