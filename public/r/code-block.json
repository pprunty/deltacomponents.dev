{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-block",
  "type": "registry:component",
  "title": "Code Block",
  "description": "A component for code-block",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "delta/components/code-block.tsx",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport { useEffect, useState, useRef } from \"react\"\nimport { getHighlighter } from \"shikiji\"\nimport type { Highlighter, BundledTheme } from \"shikiji\"\nimport { useTheme } from \"next-themes\"\nimport { cn } from \"@/lib/utils\"\nimport { ClipboardText, Check, CaretDown, CaretUp } from \"@phosphor-icons/react\"\nimport \"./code-block.css\"\n\n// Define theme mapping\ntype ThemeOption = \"github\" | \"vitesse\" | \"gruvbox\" | \"plastic\" | \"default\"\n\n// Map theme options to actual Shikiji theme names\nconst themeMapping: Record<ThemeOption, { light: BundledTheme; dark: BundledTheme }> = {\n  default: { light: \"github-light\", dark: \"github-dark\" },\n  github: { light: \"github-light\", dark: \"github-dark\" },\n  vitesse: { light: \"vitesse-light\", dark: \"vitesse-dark\" },\n  // Gruvbox isn't in the list, using similar themes\n  gruvbox: { light: \"solarized-light\", dark: \"material-theme-darker\" },\n  // Plastic isn't in the list, using similar dark themes\n  plastic: { light: \"light-plus\", dark: \"material-theme\" },\n}\n\n// Get all unique theme names for loading\nconst allThemes = Array.from(\n  new Set(\n    Object.values(themeMapping).flatMap(({ light, dark }) => [light, dark])\n  )\n) as BundledTheme[]\n\n// Cache key generator\nconst getCacheKey = (code: string, language: string, theme: BundledTheme) =>\n  `code-block-${btoa(code)}-${language}-${theme}`\n\nexport interface CodeBlockProps {\n  code: string\n  language?: string\n  showLineNumbers?: boolean\n  className?: string\n  highlightLines?: number[]\n  caption?: string\n  maxHeight?: string\n  showCopyButton?: boolean\n  showExpandButton?: boolean\n  theme?: ThemeOption\n  border?: boolean\n}\n\nexport default function CodeBlock({\n  code,\n  language = \"typescript\",\n  showLineNumbers = false,\n  className,\n  highlightLines = [],\n  caption,\n  maxHeight = \"300px\",\n  showCopyButton = true,\n  showExpandButton = true,\n  theme = \"default\",\n  border = true,\n}: CodeBlockProps) {\n  const [highlighter, setHighlighter] = useState<Highlighter | null>(null)\n  const [highlightedCode, setHighlightedCode] = useState<string>(\"\")\n  const [copied, setCopied] = useState(false)\n  const [mounted, setMounted] = useState(false)\n  const [expanded, setExpanded] = useState(false)\n  const [contentOverflows, setContentOverflows] = useState(false)\n  const [isLoading, setIsLoading] = useState(true)\n  const contentRef = useRef<HTMLDivElement>(null)\n  const [currentTheme, setCurrentTheme] = useState<BundledTheme>(\"github-light\")\n\n  const { resolvedTheme } = useTheme()\n\n  // Initialize the highlighter\n  useEffect(() => {\n    const initHighlighter = async () => {\n      try {\n        setIsLoading(true)\n        const hl = await getHighlighter({\n          themes: allThemes,\n          langs: [language as string],\n        })\n        \n        // Load all themes explicitly\n        await Promise.all(\n          allThemes.map(theme => hl.loadTheme(theme))\n        )\n        \n        setHighlighter(hl)\n      } catch (error) {\n        console.error(\"Failed to initialize highlighter:\", error)\n      }\n    }\n\n    initHighlighter()\n  }, [language])\n\n  // Update the currentTheme when the theme changes\n  useEffect(() => {\n    if (!mounted) return\n    const isDark = resolvedTheme === \"dark\"\n    const selectedTheme = themeMapping[theme] || themeMapping.default\n    setCurrentTheme(isDark ? selectedTheme.dark : selectedTheme.light)\n  }, [resolvedTheme, mounted, theme])\n\n  // Handle theme changes and code highlighting with caching\n  useEffect(() => {\n    if (!highlighter || !mounted) return\n\n    try {\n      setIsLoading(true)\n\n      // Generate cache key\n      const cacheKey = getCacheKey(code, language, currentTheme)\n\n      // Try to get from cache\n      const cachedHtml = localStorage.getItem(cacheKey)\n\n      if (cachedHtml) {\n        setHighlightedCode(cachedHtml)\n        setIsLoading(false)\n        return\n      }\n\n      // If not in cache, generate and cache it\n      const html = highlighter.codeToHtml(code, {\n        lang: language as string,\n        theme: currentTheme,\n      })\n\n      setHighlightedCode(html)\n      localStorage.setItem(cacheKey, html)\n      setIsLoading(false)\n    } catch (error) {\n      console.error(\"Error highlighting code:\", error)\n      setHighlightedCode(`<pre>${code}</pre>`)\n      setIsLoading(false)\n    }\n  }, [highlighter, code, language, mounted, currentTheme])\n\n  // Check if content overflows the maxHeight\n  useEffect(() => {\n    if (!contentRef.current || !mounted) return\n\n    const checkOverflow = () => {\n      const element = contentRef.current\n      if (!element) return\n\n      // Convert maxHeight to pixels for comparison\n      let maxHeightPx = 0\n      if (maxHeight.endsWith(\"px\")) {\n        maxHeightPx = Number.parseInt(maxHeight, 10)\n      } else if (maxHeight.endsWith(\"rem\")) {\n        const remValue = Number.parseInt(maxHeight, 10)\n        const rootFontSize = Number.parseFloat(getComputedStyle(document.documentElement).fontSize)\n        maxHeightPx = remValue * rootFontSize\n      } else if (maxHeight.endsWith(\"em\")) {\n        const emValue = Number.parseInt(maxHeight, 10)\n        const parentFontSize = Number.parseFloat(getComputedStyle(element.parentElement || document.body).fontSize)\n        maxHeightPx = emValue * parentFontSize\n      } else if (maxHeight.endsWith(\"vh\")) {\n        const vhValue = Number.parseInt(maxHeight, 10)\n        maxHeightPx = (vhValue / 100) * window.innerHeight\n      } else {\n        // Default fallback\n        maxHeightPx = Number.parseInt(maxHeight, 10) || 300\n      }\n\n      // Check if content height exceeds maxHeight\n      setContentOverflows(element.scrollHeight > maxHeightPx)\n    }\n\n    // Initial check\n    checkOverflow()\n\n    // Check again when window is resized\n    window.addEventListener(\"resize\", checkOverflow)\n\n    // Check again after a short delay to ensure content is fully rendered\n    const timeoutId = setTimeout(checkOverflow, 100)\n\n    return () => {\n      window.removeEventListener(\"resize\", checkOverflow)\n      clearTimeout(timeoutId)\n    }\n  }, [highlightedCode, maxHeight, mounted])\n\n  // Handle copy to clipboard\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(code)\n    setCopied(true)\n    setTimeout(() => setCopied(false), 2000)\n  }\n\n  // Handle client-side rendering\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  // Render a skeleton while loading\n  const renderSkeleton = () => (\n    <div className=\"animate-pulse\">\n      <div className=\"h-6 bg-muted/30 rounded mb-2 w-3/4\"></div>\n      <div className=\"h-6 bg-muted/30 rounded mb-2\"></div>\n      <div className=\"h-6 bg-muted/30 rounded mb-2 w-5/6\"></div>\n      <div className=\"h-6 bg-muted/30 rounded mb-2 w-2/3\"></div>\n      <div className=\"h-6 bg-muted/30 rounded w-4/5\"></div>\n    </div>\n  )\n\n  // Determine what to render based on the current state\n  const renderContent = () => {\n    // If we have highlighted code and we're not loading, show the code\n    if (!isLoading && highlightedCode && mounted) {\n      return <div dangerouslySetInnerHTML={{ __html: highlightedCode }} className=\"shiki-container\" />\n    }\n\n    // Otherwise, always show the skeleton (both during SSR and client loading)\n    return renderSkeleton()\n  }\n\n  return (\n    <div className={cn(\n      \"relative w-full bg-card text-card-foreground shadow-sm\",\n      border && \"border border-border rounded-lg\",\n      className\n    )}>\n      {caption && <div className=\"text-sm text-muted-foreground mb-2\">{caption}</div>}\n      <div className=\"relative w-full code-block-container\">\n        {/* Only show copy button when mounted and not loading */}\n        {showCopyButton && mounted && !isLoading && (\n          <div className=\"absolute right-4 top-2 z-10\">\n            <button\n              onClick={copyToClipboard}\n              className={cn(\n                \"p-1.5 rounded-lg\",\n                \"bg-background/80 backdrop-blur-sm\",\n                \"text-muted-foreground hover:text-foreground hover:bg-background\",\n                \"transition-all duration-200\",\n                \"shadow-sm hover:shadow-md\",\n                \"border border-border/50\",\n                copied && \"border-none\",\n              )}\n              aria-label=\"Copy code to clipboard\"\n            >\n              {copied ? <Check size={18} weight=\"bold\" /> : <ClipboardText size={18} />}\n            </button>\n          </div>\n        )}\n        <div\n          ref={contentRef}\n          className={cn(\n            \"py-4 my-2 px-3 w-full code-content\",\n            !expanded && \"max-h-[var(--code-block-max-height)] overflow-y-auto\",\n            showLineNumbers && \"relative\",\n          )}\n          style={{ \"--code-block-max-height\": maxHeight } as React.CSSProperties}\n        >\n          {renderContent()}\n        </div>\n        {showExpandButton && contentOverflows && mounted && (\n          <button\n            onClick={() => setExpanded(!expanded)}\n            className={cn(\n              \"absolute right-4 p-2 rounded-lg\",\n              \"bg-background/80 backdrop-blur-sm\",\n              \"text-muted-foreground hover:text-foreground hover:bg-background\",\n              \"transition-all duration-200\",\n              \"shadow-sm hover:shadow-md\",\n              \"border border-border/50\",\n              expanded ? \"bottom-5\" : \"bottom-2\",\n            )}\n            aria-label={expanded ? \"Collapse code\" : \"Expand code\"}\n          >\n            {expanded ? <CaretUp size={18} weight=\"bold\" /> : <CaretDown size={18} weight=\"bold\" />}\n          </button>\n        )}\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "delta/components/code-block.tsx"
    },
    {
      "path": "delta/examples/code-block-basic-demo.tsx",
      "content": "\"use client\"\n\nimport CodeBlock from \"@/delta/components/code-block\"\n\nexport default function CodeBlockBasicDemo() {\n  const code = `def calculate_factorial(n):\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers\")\n    if n == 0 or n == 1:\n        return 1\n    return n * calculate_factorial(n - 1)\n\ndef main():\n    try:\n        number = int(input(\"Enter a number: \"))\n        result = calculate_factorial(number)\n        print(f\"The factorial of {number} is {result}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    main()`;\n\n  return (\n    <div className=\"w-full\">\n      <CodeBlock\n        code={code}\n        language=\"python\"\n        showLineNumbers\n        showCopyButton\n        showExpandButton\n      />\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "delta/examples/code-block-basic-demo.tsx"
    },
    {
      "path": "content/docs/code-block.mdx",
      "content": "\nexport const metadata = {\n  title: 'CodeBlock | Delta Components',\n  description: 'A versatile code block component with syntax highlighting, line numbers, copy functionality, and expandable content. Built with shadcn/ui and featuring Shikiji for syntax highlighting, multiple themes, and accessibility features.',\n\n  // Keywords help with SEO\n  keywords: ['shadcn/ui', 'react', 'code block component', 'syntax highlighting', 'shikiji', 'code editor', 'react components', 'delta components', 'nextjs components', 'tailwind components'],\n\n  // Canonical URL to prevent duplicate content issues\n  alternates: {\n    canonical: 'https://deltacomponents.dev/docs/code-block',\n  },\n\n  // Category helps with structured data\n  category: 'component',\n\n  openGraph: {\n    title: 'CodeBlock Component | Delta Components',\n    description: 'A versatile code block component with syntax highlighting, line numbers, copy functionality, and expandable content. Built with shadcn/ui and featuring Shikiji for syntax highlighting, multiple themes, and accessibility features.',\n    type: 'article',\n    url: 'https://deltacomponents.dev/docs/code-block',\n    images: [\n      {\n        url: 'https://deltacomponents.dev/og/code-block.png',\n        width: 1200,\n        height: 630,\n        alt: 'CodeBlock Component Preview showing syntax highlighting, line numbers, and copy functionality with multiple themes'\n      }\n    ],\n    // Article specific OpenGraph metadata\n    article: {\n      authors: ['Patrick Prunty'],\n      tags: ['UI Components', 'React', 'Shadcn', 'Code Block', 'Syntax Highlighting', 'Shikiji'],\n      section: 'Components'\n    },\n    siteName: 'Delta Components'\n  },\n\n  twitter: {\n    card: 'summary_large_image',\n    title: 'CodeBlock Component | Delta Components',\n    description: 'A versatile code block component with syntax highlighting, line numbers, copy functionality, and expandable content. Built with shadcn/ui and featuring Shikiji for syntax highlighting, multiple themes, and accessibility features.',\n    images: ['https://deltacomponents.dev/og/code-block.png'],\n    creator: '@pprunty_',\n    site: '@deltacomponents'\n  },\n\n  // Additional metadata for better SEO\n  robots: {\n    index: true,\n    follow: true,\n    nocache: false,\n    googleBot: {\n      index: true,\n      follow: true,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n      'max-video-preview': -1\n    }\n  }\n}\n\n# CodeBlock\n\nA versatile code block component with syntax highlighting, line numbers, copy functionality, and expandable content.\n\n## Basic Usage\n\n<ComponentTabs name=\"code-block-basic\" />\n\n## Installation\n\n```bash\nnpx shadcn@latest add \"code-block\"\n```\n\n## Props\n\n<div className=\"my-6 w-full overflow-y-auto\">\n  <table className=\"w-full\">\n    <thead>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <th className=\"border px-4 py-2 text-left font-bold\">Prop</th>\n        <th className=\"border px-4 py-2 text-left font-bold\">Type</th>\n        <th className=\"border px-4 py-2 text-left font-bold\">Default</th>\n        <th className=\"border px-4 py-2 text-left font-bold\">Description</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`code`</td>\n        <td className=\"border px-4 py-2 text-left\">`string`</td>\n        <td className=\"border px-4 py-2 text-left\">Required</td>\n        <td className=\"border px-4 py-2 text-left\">The code content to display</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`language`</td>\n        <td className=\"border px-4 py-2 text-left\">`string`</td>\n        <td className=\"border px-4 py-2 text-left\">`\"typescript\"`</td>\n        <td className=\"border px-4 py-2 text-left\">The programming language for syntax highlighting</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`showLineNumbers`</td>\n        <td className=\"border px-4 py-2 text-left\">`boolean`</td>\n        <td className=\"border px-4 py-2 text-left\">`false`</td>\n        <td className=\"border px-4 py-2 text-left\">Whether to display line numbers</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`showCopyButton`</td>\n        <td className=\"border px-4 py-2 text-left\">`boolean`</td>\n        <td className=\"border px-4 py-2 text-left\">`true`</td>\n        <td className=\"border px-4 py-2 text-left\">Whether to show the copy button</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`showExpandButton`</td>\n        <td className=\"border px-4 py-2 text-left\">`boolean`</td>\n        <td className=\"border px-4 py-2 text-left\">`true`</td>\n        <td className=\"border px-4 py-2 text-left\">Whether to show the expand/collapse button</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`maxHeight`</td>\n        <td className=\"border px-4 py-2 text-left\">`string`</td>\n        <td className=\"border px-4 py-2 text-left\">`\"300px\"`</td>\n        <td className=\"border px-4 py-2 text-left\">Maximum height before showing expand button</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`highlightLines`</td>\n        <td className=\"border px-4 py-2 text-left\">`number[]`</td>\n        <td className=\"border px-4 py-2 text-left\">-</td>\n        <td className=\"border px-4 py-2 text-left\">Array of line numbers to highlight</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`caption`</td>\n        <td className=\"border px-4 py-2 text-left\">`string`</td>\n        <td className=\"border px-4 py-2 text-left\">-</td>\n        <td className=\"border px-4 py-2 text-left\">Caption text to display above the code block</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`className`</td>\n        <td className=\"border px-4 py-2 text-left\">`string`</td>\n        <td className=\"border px-4 py-2 text-left\">-</td>\n        <td className=\"border px-4 py-2 text-left\">Additional CSS classes to apply to the code block</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n## Features\n\n### Syntax Highlighting\n\nThe code block supports syntax highlighting for various programming languages using Shikiji.\n\n<ComponentTabs name=\"code-block-themes\" />\n\n### Line Numbers\n\nEnable line numbers to make code references easier.\n\n```tsx\n<CodeBlock\n  code=\"const message = 'Hello, World!';\"\n  language=\"typescript\"\n  showLineNumbers\n/>\n```\n\n### Copy Button\n\nA copy button is included by default to easily copy code to the clipboard.\n\n```tsx\n<CodeBlock\n  code=\"const message = 'Hello, World!';\"\n  language=\"typescript\"\n  showCopyButton\n/>\n```\n\n### Expandable Content\n\nFor long code snippets, the code block can be expanded to show the full content.\n\n```tsx\n<CodeBlock\n  code=\"const message = 'Hello, World!';\"\n  language=\"typescript\"\n  maxHeight=\"200px\"\n  showExpandButton\n/>\n```\n\n### Highlighted Lines\n\nHighlight specific lines to draw attention to important parts of the code.\n\n```tsx\n<CodeBlock\n  code=\"const message = 'Hello, World!';\"\n  language=\"typescript\"\n  highlightLines={[1]}\n/>\n```\n\n### Captions\n\nAdd a caption to provide context for the code block.\n\n```tsx\n<CodeBlock\n  code=\"const message = 'Hello, World!';\"\n  language=\"typescript\"\n  caption=\"Example TypeScript code\"\n/>\n```\n\n## Usage\n\n```tsx\nimport CodeBlock from \"@/delta/components/code-block\"\n\nexport default function CodeBlockDemo() {\n  return (\n    <CodeBlock\n      code=\"const message = 'Hello, World!';\"\n      language=\"typescript\"\n      showLineNumbers\n      showCopyButton\n      showExpandButton\n      maxHeight=\"200px\"\n      caption=\"Example TypeScript code\"\n    />\n  )\n}\n```\n\n## Customization\n\nYou can customize the code block's appearance using Tailwind CSS classes:\n\n```tsx\n<CodeBlock\n  code=\"const message = 'Hello, World!';\"\n  language=\"typescript\"\n  className=\"bg-gray-100 dark:bg-gray-800\"\n/>\n```\n\n## Accessibility\n\nThe code block component follows WAI-ARIA guidelines and includes proper ARIA attributes for accessibility. The copy button includes an aria-label for screen readers.\n",
      "type": "registry:component",
      "target": "content/docs/code-block.mdx"
    },
    {
      "path": "delta/examples/code-block-themes-demo.tsx",
      "content": "\"use client\"\n\nimport CodeBlock from \"@/delta/components/code-block\"\n\nexport default function CodeBlockThemesDemo() {\n  const pythonCode = `def hello_world():\n    print(\"Hello, World!\")\n\nhello_world()`;\n\n  const javascriptCode = `function helloWorld() {\n  console.log(\"Hello, World!\");\n}\n\nhelloWorld();`;\n\n  const typescriptCode = `function helloWorld(): void {\n  console.log(\"Hello, World!\");\n}\n\nhelloWorld();`;\n\n  const javaCode = `public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println(\"Hello, World!\");\n  }\n}`;\n\n  const goCode = `package main\n\nimport \"fmt\"\n\nfunc main() {\n  fmt.Println(\"Hello, World!\")\n}`;\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Python - GitHub Theme</h3>\n        <CodeBlock\n          code={pythonCode}\n          language=\"python\"\n          showLineNumbers\n          showCopyButton\n          showExpandButton\n          maxHeight=\"200px\"\n          theme=\"github\"\n        />\n      </div>\n\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">JavaScript - Vitesse Theme</h3>\n        <CodeBlock\n          code={javascriptCode}\n          language=\"javascript\"\n          showLineNumbers\n          showCopyButton\n          showExpandButton\n          maxHeight=\"200px\"\n          theme=\"vitesse\"\n        />\n      </div>\n\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">TypeScript - Gruvbox Theme</h3>\n        <CodeBlock\n          code={typescriptCode}\n          language=\"typescript\"\n          showLineNumbers\n          showCopyButton\n          showExpandButton\n          maxHeight=\"200px\"\n          theme=\"gruvbox\"\n        />\n      </div>\n\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Java - Plastic Theme</h3>\n        <CodeBlock\n          code={javaCode}\n          language=\"java\"\n          showLineNumbers\n          showCopyButton\n          showExpandButton\n          maxHeight=\"200px\"\n          theme=\"plastic\"\n        />\n      </div>\n\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Go - Default Theme</h3>\n        <CodeBlock\n          code={goCode}\n          language=\"go\"\n          showLineNumbers\n          showCopyButton\n          showExpandButton\n          maxHeight=\"200px\"\n          theme=\"default\"\n        />\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "delta/examples/code-block-themes-demo.tsx"
    }
  ]
}