{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "checkbox-input",
  "type": "registry:component",
  "dependencies": [
    "zod"
  ],
  "files": [
    {
      "path": "registry/inputs/checkbox-input.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport type { z } from \"zod\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\n\nexport interface CheckboxInputProps {\n  /** The label for the checkbox */\n  label: string\n  /** The name of the checkbox field (used for form submission) */\n  name: string\n  /** Optional description text to display below the checkbox */\n  description?: string\n  /** Optional hint text to display below the checkbox */\n  hint?: string\n  /** Error message to display (typically from Zod validation) */\n  error?: string\n  /** Whether the field is required */\n  required?: boolean\n  /** Whether the field is in a loading/pending state */\n  pending?: boolean\n  /** Default checked state */\n  defaultChecked?: boolean\n  /** Controlled checked state */\n  checked?: boolean\n  /** Container className for the entire component */\n  containerClassName?: string\n  /** Checkbox className */\n  checkboxClassName?: string\n  /** Label className */\n  labelClassName?: string\n  /** Label variant - 'default' or 'muted' */\n  labelVariant?: \"default\" | \"muted\"\n  /** Zod schema for validation (optional - can be handled at the form level) */\n  schema?: z.ZodType<boolean>\n  /** Callback when validation occurs */\n  onValidate?: (isValid: boolean, value: boolean, error?: string) => void\n  /** Callback when checkbox state changes */\n  onCheckedChange?: (checked: boolean) => void\n  /** ID for the checkbox */\n  id?: string\n  /** Whether the checkbox is disabled */\n  disabled?: boolean\n}\n\n/**\n * CheckboxInput component that integrates with Zod validation\n */\nexport function CheckboxInput({\n  label,\n  name,\n  description,\n  hint,\n  error,\n  required = false,\n  pending = false,\n  defaultChecked = false,\n  checked,\n  containerClassName,\n  checkboxClassName,\n  labelClassName,\n  labelVariant = \"default\",\n  schema,\n  onValidate,\n  onCheckedChange,\n  id = name,\n  disabled = false,\n}: CheckboxInputProps) {\n  const [localError, setLocalError] = React.useState<string | undefined>(error)\n  const [isChecked, setIsChecked] = React.useState<boolean>(\n    checked !== undefined ? checked : defaultChecked\n  )\n  const hasError = !!localError || !!error\n  const errorId = `error-${id}`\n  const hintId = `hint-${id}`\n\n  // Update local error when prop changes\n  React.useEffect(() => {\n    setLocalError(error)\n  }, [error])\n\n  // Update checked state when controlled prop changes\n  React.useEffect(() => {\n    if (checked !== undefined) {\n      setIsChecked(checked)\n    }\n  }, [checked])\n\n  // Handle validation with the provided schema\n  const validateCheckbox = React.useCallback(\n    (value: boolean) => {\n      if (!schema) return\n\n      const result = schema.safeParse(value)\n      if (!result.success) {\n        const errorMessage =\n          result.error.errors[0]?.message || \"Invalid selection\"\n        setLocalError(errorMessage)\n        onValidate?.(false, value, errorMessage)\n      } else {\n        setLocalError(undefined)\n        onValidate?.(true, value)\n      }\n    },\n    [schema, onValidate]\n  )\n\n  // Handle checkbox change\n  const handleCheckedChange = (checked: boolean) => {\n    setIsChecked(checked)\n\n    // If we have a schema, validate on change\n    if (schema) {\n      validateCheckbox(checked)\n    }\n\n    // Call the original onCheckedChange if provided\n    onCheckedChange?.(checked)\n  }\n\n  return (\n    <div\n      className={cn(\"group/field space-y-2\", containerClassName)}\n      data-invalid={hasError}\n    >\n      <div className=\"flex items-start space-x-2\">\n        <Checkbox\n          id={id}\n          name={name}\n          defaultChecked={checked === undefined ? defaultChecked : undefined}\n          checked={checked !== undefined ? checked : undefined}\n          disabled={pending || disabled}\n          onCheckedChange={handleCheckedChange}\n          aria-invalid={hasError}\n          aria-errormessage={hasError ? errorId : undefined}\n          aria-describedby={hint ? hintId : undefined}\n          aria-required={required}\n          className={cn(\n            \"group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive\",\n            checkboxClassName\n          )}\n          required={required}\n        />\n        <div className=\"grid gap-1.5 leading-none\">\n          <label\n            htmlFor={id}\n            className={cn(\n              \"text-sm font-normal leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-data-[invalid=true]/field:text-destructive\",\n              labelVariant === \"muted\" && \"text-muted-foreground\",\n              labelClassName\n            )}\n          >\n            {label}\n            {required && <span aria-hidden=\"true\"> *</span>}\n          </label>\n          {description && (\n            <p className=\"text-xs text-muted-foreground\">{description}</p>\n          )}\n        </div>\n      </div>\n\n      {hint && !hasError && (\n        <p id={hintId} className=\"text-xs text-muted-foreground pl-6 mt-1\">\n          {hint}\n        </p>\n      )}\n\n      {hasError && (\n        <p id={errorId} className=\"text-destructive text-xs pl-6\">\n          {localError || error}\n        </p>\n      )}\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ]
}