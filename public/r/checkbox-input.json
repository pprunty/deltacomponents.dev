{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "checkbox-input",
  "type": "registry:component",
  "title": "Checkbox Input",
  "description": "A checkbox input component with validation, error handling, and label support",
  "dependencies": [
    "zod"
  ],
  "registryDependencies": [
    "checkbox"
  ],
  "files": [
    {
      "path": "delta/inputs/checkbox-input.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { cn } from '@/lib/utils';\nimport type { z } from 'zod';\n\nexport interface CheckboxInputProps {\n  /** The label for the checkbox */\n  label: string;\n  /** The name of the checkbox field (used for form submission) */\n  name: string;\n  /** Optional description text to display below the checkbox */\n  description?: string;\n  /** Optional hint text to display below the checkbox */\n  hint?: string;\n  /** Error message to display (typically from Zod validation) */\n  error?: string;\n  /** Whether the field is required */\n  required?: boolean;\n  /** Whether the field is in a loading/pending state */\n  pending?: boolean;\n  /** Default checked state */\n  defaultChecked?: boolean;\n  /** Controlled checked state */\n  checked?: boolean;\n  /** Container className for the entire component */\n  containerClassName?: string;\n  /** Checkbox className */\n  checkboxClassName?: string;\n  /** Label className */\n  labelClassName?: string;\n  /** Label variant - 'default' or 'muted' */\n  labelVariant?: 'default' | 'muted';\n  /** Zod schema for validation (optional - can be handled at the form level) */\n  schema?: z.ZodType<boolean>;\n  /** Callback when validation occurs */\n  onValidate?: (isValid: boolean, value: boolean, error?: string) => void;\n  /** Callback when checkbox state changes */\n  onCheckedChange?: (checked: boolean) => void;\n  /** ID for the checkbox */\n  id?: string;\n  /** Whether the checkbox is disabled */\n  disabled?: boolean;\n}\n\n/**\n * CheckboxInput component that integrates with Zod validation\n */\nexport function CheckboxInput({\n  label,\n  name,\n  description,\n  hint,\n  error,\n  required = false,\n  pending = false,\n  defaultChecked = false,\n  checked,\n  containerClassName,\n  checkboxClassName,\n  labelClassName,\n  labelVariant = 'default',\n  schema,\n  onValidate,\n  onCheckedChange,\n  id = name,\n  disabled = false,\n}: CheckboxInputProps) {\n  const [localError, setLocalError] = React.useState<string | undefined>(error);\n  const [isChecked, setIsChecked] = React.useState<boolean>(\n    checked !== undefined ? checked : defaultChecked,\n  );\n  const hasError = !!localError || !!error;\n  const errorId = `error-${id}`;\n  const hintId = `hint-${id}`;\n\n  // Update local error when prop changes\n  React.useEffect(() => {\n    setLocalError(error);\n  }, [error]);\n\n  // Update checked state when controlled prop changes\n  React.useEffect(() => {\n    if (checked !== undefined) {\n      setIsChecked(checked);\n    }\n  }, [checked]);\n\n  // Handle validation with the provided schema\n  const validateCheckbox = React.useCallback(\n    (value: boolean) => {\n      if (!schema) return;\n\n      const result = schema.safeParse(value);\n      if (!result.success) {\n        const errorMessage =\n          result.error.errors[0]?.message || 'Invalid selection';\n        setLocalError(errorMessage);\n        onValidate?.(false, value, errorMessage);\n      } else {\n        setLocalError(undefined);\n        onValidate?.(true, value);\n      }\n    },\n    [schema, onValidate],\n  );\n\n  // Handle checkbox change\n  const handleCheckedChange = (checked: boolean) => {\n    setIsChecked(checked);\n\n    // If we have a schema, validate on change\n    if (schema) {\n      validateCheckbox(checked);\n    }\n\n    // Call the original onCheckedChange if provided\n    onCheckedChange?.(checked);\n  };\n\n  return (\n    <div\n      className={cn('group/field space-y-2', containerClassName)}\n      data-invalid={hasError}\n    >\n      <div className=\"flex items-start space-x-2\">\n        <Checkbox\n          id={id}\n          name={name}\n          defaultChecked={checked === undefined ? defaultChecked : undefined}\n          checked={checked !== undefined ? checked : undefined}\n          disabled={pending || disabled}\n          onCheckedChange={handleCheckedChange}\n          aria-invalid={hasError}\n          aria-errormessage={hasError ? errorId : undefined}\n          aria-describedby={hint ? hintId : undefined}\n          aria-required={required}\n          className={cn(\n            'group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive',\n            checkboxClassName,\n          )}\n          required={required}\n        />\n        <div className=\"grid gap-1.5 leading-none\">\n          <label\n            htmlFor={id}\n            className={cn(\n              'text-sm font-normal leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-data-[invalid=true]/field:text-destructive',\n              labelVariant === 'muted' && 'text-muted-foreground',\n              labelClassName,\n            )}\n          >\n            {label}\n            {required && <span aria-hidden=\"true\"> *</span>}\n          </label>\n          {description && (\n            <p className=\"text-xs text-muted-foreground\">{description}</p>\n          )}\n        </div>\n      </div>\n\n      {hint && !hasError && (\n        <p id={hintId} className=\"text-xs text-muted-foreground pl-6 mt-1\">\n          {hint}\n        </p>\n      )}\n\n      {hasError && (\n        <p id={errorId} className=\"text-destructive text-xs pl-6\">\n          {localError || error}\n        </p>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/inputs/checkbox-input.tsx"
    },
    {
      "path": "delta/inputs/checkbox-input-demo.tsx",
      "content": "'use client';\n\nimport { CheckboxInput } from './checkbox-input';\nimport { z } from 'zod';\n\nexport default function CheckboxInputDemo() {\n  return (\n    <div className=\"container mx-auto max-w-7xl px-4 py-8 space-y-8\">\n      <DefaultCheckboxInputDemo />\n      <ValidationCheckboxInputDemo />\n      <MutedLabelCheckboxInputDemo />\n      <RequiredCheckboxInputDemo />\n      <DisabledCheckboxInputDemo />\n      <HintCheckboxInputDemo />\n      <DescriptionCheckboxInputDemo />\n    </div>\n  );\n}\n\nexport function DefaultCheckboxInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Default Checkbox Input</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <CheckboxInput label=\"Accept terms and conditions\" name=\"terms\" />\n        <CheckboxInput\n          label=\"Subscribe to newsletter\"\n          name=\"newsletter\"\n          defaultChecked\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function ValidationCheckboxInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">With Validation</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <CheckboxInput\n          label=\"I agree to the terms and conditions\"\n          name=\"terms-validation\"\n          error=\"You must agree to the terms and conditions\"\n          schema={z.literal(true, {\n            errorMap: () => ({\n              message: 'You must agree to the terms and conditions',\n            }),\n          })}\n        />\n        <CheckboxInput\n          label=\"I confirm I am over 18 years old\"\n          name=\"age-validation\"\n          error=\"You must confirm you are over 18\"\n          schema={z.literal(true, {\n            errorMap: () => ({ message: 'You must confirm you are over 18' }),\n          })}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function MutedLabelCheckboxInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Muted Label Variant</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <CheckboxInput\n          label=\"Remember me\"\n          name=\"remember\"\n          labelVariant=\"muted\"\n        />\n        <CheckboxInput\n          label=\"Save payment information\"\n          name=\"save-payment\"\n          labelVariant=\"muted\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function RequiredCheckboxInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Required Fields</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <CheckboxInput\n          label=\"I agree to the privacy policy\"\n          name=\"privacy\"\n          required\n        />\n        <CheckboxInput\n          label=\"I consent to data processing\"\n          name=\"data-consent\"\n          required\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function DisabledCheckboxInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Disabled State</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <CheckboxInput\n          label=\"Premium features (upgrade required)\"\n          name=\"premium\"\n          disabled\n        />\n        <CheckboxInput\n          label=\"Admin access (not available)\"\n          name=\"admin\"\n          disabled\n          defaultChecked\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function HintCheckboxInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">With Hint Text</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <CheckboxInput\n          label=\"Receive promotional emails\"\n          name=\"promo-emails\"\n          hint=\"We'll send occasional offers and updates\"\n        />\n        <CheckboxInput\n          label=\"Enable two-factor authentication\"\n          name=\"2fa\"\n          hint=\"Adds an extra layer of security to your account\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function DescriptionCheckboxInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">With Description</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <CheckboxInput\n          label=\"Share usage data\"\n          name=\"usage-data\"\n          description=\"Help us improve our product by sharing anonymous usage statistics\"\n        />\n        <CheckboxInput\n          label=\"Enable notifications\"\n          name=\"notifications\"\n          description=\"Receive alerts about account activity and updates\"\n          defaultChecked\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/inputs/checkbox-input-demo.tsx"
    }
  ]
}