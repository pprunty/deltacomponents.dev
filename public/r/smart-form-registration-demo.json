{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "smart-form-registration-demo",
  "type": "registry:block",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "registryDependencies": [
    "https://deltacomponents.dev/r/smart-form.json"
  ],
  "files": [
    {
      "path": "registry/examples/smart-form-registration-demo.tsx",
      "content": "\"use client\"\n\nimport { z } from \"zod\"\n\nimport { FieldDefinition, SmartForm } from \"@/delta/smart-form\"\n\nconst registrationSchema = z\n  .object({\n    firstName: z.string().min(2, \"First name must be at least 2 characters\"),\n    lastName: z.string().min(2, \"Last name must be at least 2 characters\"),\n    email: z.string().email(\"Please enter a valid email address\"),\n    password: z.string().min(8, \"Password must be at least 8 characters\"),\n    confirmPassword: z.string(),\n    country: z.string().min(1, \"Please select your country\"),\n    skills: z.array(z.string()).min(1, \"Please add at least one skill\"),\n    marketingEmails: z.boolean().optional(),\n    agreeToTerms: z\n      .boolean()\n      .refine((val) => val === true, \"You must agree to the terms\"),\n    newsletter: z.boolean().optional(),\n    bio: z.string().optional(),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords don't match\",\n    path: [\"confirmPassword\"],\n  })\n\nconst fields: FieldDefinition[] = [\n  {\n    name: \"firstName\",\n    label: \"First Name\",\n    type: \"text\",\n    required: true,\n    placeholder: \"Enter your first name\",\n    group: \"name\",\n  },\n  {\n    name: \"lastName\",\n    label: \"Last Name\",\n    type: \"text\",\n    required: true,\n    placeholder: \"Enter your last name\",\n    group: \"name\",\n  },\n  {\n    name: \"email\",\n    label: \"Email Address\",\n    type: \"email\",\n    required: true,\n    placeholder: \"Enter your email address\",\n    description: \"We'll never share your email with anyone else.\",\n  },\n  {\n    name: \"password\",\n    label: \"Password\",\n    type: \"password\",\n    required: true,\n    placeholder: \"Create a secure password\",\n    hint: \"Must be at least 8 characters long\",\n  },\n  {\n    name: \"confirmPassword\",\n    label: \"Confirm Password\",\n    type: \"password\",\n    required: true,\n    placeholder: \"Confirm your password\",\n  },\n  {\n    name: \"country\",\n    label: \"Country\",\n    type: \"select\",\n    required: true,\n    placeholder: \"Select your country\",\n    options: [\n      { value: \"us\", label: \"United States\" },\n      { value: \"ca\", label: \"Canada\" },\n      { value: \"uk\", label: \"United Kingdom\" },\n      { value: \"au\", label: \"Australia\" },\n      { value: \"de\", label: \"Germany\" },\n      { value: \"fr\", label: \"France\" },\n      { value: \"jp\", label: \"Japan\" },\n      { value: \"other\", label: \"Other\" },\n    ],\n  },\n  {\n    name: \"skills\",\n    label: \"Skills\",\n    type: \"tags\",\n    required: true,\n    hint: \"Press Enter or comma to add a skill\",\n    description:\n      \"Add technologies, programming languages, or other relevant skills\",\n  },\n  {\n    name: \"bio\",\n    label: \"Bio\",\n    type: \"textarea\",\n    placeholder: \"Tell us a bit about yourself (optional)\",\n    rows: 3,\n    hint: \"This information will be displayed on your profile\",\n  },\n  {\n    name: \"marketingEmails\",\n    label: \"Receive marketing emails and product updates\",\n    type: \"switch\",\n    description:\n      \"Get notified about new features, promotions, and company updates\",\n  },\n  {\n    name: \"agreeToTerms\",\n    label: \"I agree to the Terms of Service and Privacy Policy\",\n    type: \"checkbox\",\n    required: true,\n  },\n  {\n    name: \"newsletter\",\n    label: \"Subscribe to our newsletter for updates and tips\",\n    type: \"checkbox\",\n  },\n]\n\nexport default function SmartFormRegistrationDemo() {\n  const handleSubmit = async (data: z.infer<typeof registrationSchema>) => {\n    // Simulate API call delay\n    await new Promise((resolve) => setTimeout(resolve, 2000))\n\n    alert(`Form submitted with data:\\\\n${JSON.stringify(data, null, 2)}`)\n\n    // In a real app, you would send this data to your backend\n    // console.log(\"Registration data:\", data)\n  }\n\n  return (\n    <div className=\"w-full max-w-2xl mx-auto\">\n      <SmartForm\n        fields={fields}\n        schema={registrationSchema}\n        onSubmit={handleSubmit}\n        submitText=\"Create Account\"\n        layout=\"vertical\"\n        successMessage=\"Account created successfully! Welcome to our platform.\"\n        errorMessage=\"Please fix the errors below and try again.\"\n        resetOnSuccess={true}\n      />\n    </div>\n  )\n}\n",
      "type": "registry:block",
      "target": "/delta/smart-form-registration-demo.tsx"
    }
  ]
}