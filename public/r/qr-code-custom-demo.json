{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "qr-code-custom-demo",
  "type": "registry:block",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "registryDependencies": [
    "https://deltacomponents.dev/r/qr-code.json"
  ],
  "files": [
    {
      "path": "registry/examples/qr-code-custom-demo.tsx",
      "content": "\"use client\"\n\nimport React, { useState } from \"react\"\nimport QRCode from \"@/delta/qr-code\"\n\nexport default function QRCodeCustomDemo() {\n  const [size, setSize] = useState(200)\n  const [level, setLevel] = useState<\"L\" | \"M\" | \"Q\" | \"H\">(\"M\")\n  const [dotStyle, setDotStyle] = useState<\n    | \"rounded\"\n    | \"dots\"\n    | \"classy\"\n    | \"classy-rounded\"\n    | \"square\"\n    | \"extra-rounded\"\n  >(\"square\")\n  const [cornerSquareStyle, setCornerSquareStyle] = useState<\n    | \"dot\"\n    | \"square\"\n    | \"extra-rounded\"\n    | \"rounded\"\n    | \"dots\"\n    | \"classy\"\n    | \"classy-rounded\"\n  >(\"square\")\n  const [cornerDotStyle, setCornerDotStyle] = useState<\n    | \"dot\"\n    | \"square\"\n    | \"rounded\"\n    | \"dots\"\n    | \"classy\"\n    | \"classy-rounded\"\n    | \"extra-rounded\"\n  >(\"square\")\n  const [useCustomColor, setUseCustomColor] = useState(false)\n  const [marginSize, setMarginSize] = useState(0)\n\n  const dotStyleOptions = [\n    \"square\",\n    \"rounded\",\n    \"dots\",\n    \"classy\",\n    \"classy-rounded\",\n    \"extra-rounded\",\n  ] as const\n\n  const cornerOptions = [\n    \"square\",\n    \"rounded\",\n    \"extra-rounded\",\n    \"dot\",\n    \"dots\",\n    \"classy\",\n    \"classy-rounded\",\n  ] as const\n\n  const levelOptions = [\n    { value: \"L\", label: \"L (Low)\" },\n    { value: \"M\", label: \"M (Medium)\" },\n    { value: \"Q\", label: \"Q (Quartile)\" },\n    { value: \"H\", label: \"H (High)\" },\n  ] as const\n\n  return (\n    <div className=\"w-full py-4\">\n      <div className=\"space-y-6\">\n        {/* Controls Section */}\n        <div className=\"space-y-4 p-4 border rounded-lg bg-muted/30\">\n          <h3 className=\"text-sm font-medium\">Styling Options</h3>\n\n          {/* Size and Level Controls */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-xs font-medium text-muted-foreground\">\n                Size: {size}px\n              </label>\n              <input\n                type=\"range\"\n                min=\"150\"\n                max=\"300\"\n                step=\"10\"\n                value={size}\n                onChange={(e) => setSize(Number(e.target.value))}\n                className=\"w-full h-2 bg-muted rounded-lg appearance-none cursor-pointer\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-xs font-medium text-muted-foreground\">\n                Margin: {marginSize}\n              </label>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"20\"\n                step=\"2\"\n                value={marginSize}\n                onChange={(e) => setMarginSize(Number(e.target.value))}\n                className=\"w-full h-2 bg-muted rounded-lg appearance-none cursor-pointer\"\n              />\n            </div>\n          </div>\n\n          {/* Error Correction Level */}\n          <div className=\"space-y-2\">\n            <label className=\"text-xs font-medium text-muted-foreground\">\n              Error Correction Level\n            </label>\n            <div className=\"flex gap-2\">\n              {levelOptions.map((option) => (\n                <label\n                  key={option.value}\n                  className=\"flex items-center gap-1 text-sm\"\n                >\n                  <input\n                    type=\"radio\"\n                    name=\"level\"\n                    value={option.value}\n                    checked={level === option.value}\n                    onChange={(e) => setLevel(e.target.value as typeof level)}\n                    className=\"w-3 h-3\"\n                  />\n                  {option.label}\n                </label>\n              ))}\n            </div>\n          </div>\n\n          {/* Style Selectors */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-xs font-medium text-muted-foreground\">\n                Dot Style\n              </label>\n              <select\n                value={dotStyle}\n                onChange={(e) => setDotStyle(e.target.value as typeof dotStyle)}\n                className=\"w-full p-2 text-sm border rounded-md bg-background\"\n              >\n                {dotStyleOptions.map((style) => (\n                  <option key={style} value={style}>\n                    {style.charAt(0).toUpperCase() +\n                      style.slice(1).replace(\"-\", \" \")}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-xs font-medium text-muted-foreground\">\n                Corner Square Style\n              </label>\n              <select\n                value={cornerSquareStyle}\n                onChange={(e) =>\n                  setCornerSquareStyle(\n                    e.target.value as typeof cornerSquareStyle\n                  )\n                }\n                className=\"w-full p-2 text-sm border rounded-md bg-background\"\n              >\n                {cornerOptions.map((style) => (\n                  <option key={style} value={style}>\n                    {style.charAt(0).toUpperCase() +\n                      style.slice(1).replace(\"-\", \" \")}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-xs font-medium text-muted-foreground\">\n                Corner Dot Style\n              </label>\n              <select\n                value={cornerDotStyle}\n                onChange={(e) =>\n                  setCornerDotStyle(e.target.value as typeof cornerDotStyle)\n                }\n                className=\"w-full p-2 text-sm border rounded-md bg-background\"\n              >\n                {cornerOptions.map((style) => (\n                  <option key={style} value={style}>\n                    {style.charAt(0).toUpperCase() +\n                      style.slice(1).replace(\"-\", \" \")}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          {/* Color Options */}\n          <div className=\"space-y-2\">\n            <label className=\"flex items-center gap-2 text-sm\">\n              <input\n                type=\"checkbox\"\n                checked={useCustomColor}\n                onChange={(e) => setUseCustomColor(e.target.checked)}\n                className=\"w-4 h-4\"\n              />\n              Use Primary Color\n            </label>\n            <p className=\"text-xs text-muted-foreground\">\n              {useCustomColor\n                ? \"QR code will use your theme's primary color\"\n                : \"QR code will use default foreground color\"}\n            </p>\n          </div>\n        </div>\n\n        {/* QR Code Display */}\n        <div className=\"flex items-center justify-center p-8 border rounded-lg bg-background\">\n          <QRCode\n            value=\"https://deltacomponents.dev\"\n            size={size}\n            level={level}\n            dotStyle={dotStyle}\n            cornerSquareStyle={cornerSquareStyle}\n            cornerDotStyle={cornerDotStyle}\n            marginSize={marginSize}\n            fgColor={useCustomColor ? \"--color-primary\" : \"--color-foreground\"}\n          />\n        </div>\n\n        {/* Info Section */}\n        <div className=\"text-xs text-muted-foreground space-y-1 p-3 bg-muted/20 rounded-md\">\n          <p>\n            <strong>Current Settings:</strong>\n          </p>\n          <p>\n            Size: {size}px | Level: {level} | Margin: {marginSize}px\n          </p>\n          <p>\n            Dot: {dotStyle} | Corner Square: {cornerSquareStyle} | Corner Dot:{\" \"}\n            {cornerDotStyle}\n          </p>\n          <p>\n            Color:{\" \"}\n            {useCustomColor ? \"Primary theme color\" : \"Default foreground\"}\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:block",
      "target": "/components/delta/qr-code-custom-demo.tsx"
    }
  ]
}