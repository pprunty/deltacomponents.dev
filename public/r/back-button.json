{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "back-button",
  "type": "registry:component",
  "title": "Back Button",
  "description": "A component for back-button",
  "dependencies": [
    "next",
    "@phosphor-icons/react"
  ],
  "registryDependencies": [
    "button",
    "utils"
  ],
  "files": [
    {
      "path": "delta/components/back-button.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { ArrowLeft } from \"@phosphor-icons/react\"\nimport { Button, type ButtonProps, type ButtonVariant } from \"./button\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface BackButtonProps extends Omit<ButtonProps, \"icon\" | \"onClick\"> {\n  fallbackRoute?: string\n  iconProps?: React.ComponentProps<typeof ArrowLeft>\n  pulse?: boolean\n  text?: string\n  variant?: ButtonVariant\n}\n\nconst BackButton = React.forwardRef<HTMLButtonElement, BackButtonProps>(\n  ({ className, fallbackRoute = \"/\", iconProps, pulse = false, text, variant = \"secondary\", ...props }, ref) => {\n    const router = useRouter()\n    const [isPulsing, setIsPulsing] = React.useState(false)\n\n    const handleBack = () => {\n      if (pulse) {\n        setIsPulsing(true)\n        setTimeout(() => setIsPulsing(false), 200) // Match animation duration\n      }\n\n      if (typeof window !== \"undefined\" && window.history.length > 2) {\n        router.back()\n      } else {\n        router.push(fallbackRoute)\n      }\n    }\n\n    return (\n      <Button\n        className={cn(\"gap-0\", className)}\n        onClick={handleBack}\n        icon={<ArrowLeft weight=\"bold\" size={20} {...iconProps} />}\n        title={text || undefined}\n        variant={variant}\n        {...props}\n      />\n    )\n  },\n)\n\nBackButton.displayName = \"BackButton\"\n\nexport { BackButton }\n",
      "type": "registry:component",
      "target": "delta/components/back-button.tsx"
    },
    {
      "path": "delta/examples/back-button-basic-demo.tsx",
      "content": "\"use client\"\n\nimport { BackButton } from \"@/delta/components/back-button\"\n\nexport default function BackButtonBasicDemo() {\n  return (\n    <div className=\"flex items-center justify-center p-4\">\n      <BackButton size=\"md\" />\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "delta/examples/back-button-basic-demo.tsx"
    },
    {
      "path": "content/docs/back-button.mdx",
      "content": "export const metadata = {\n  title: 'BackButton | Delta Components',\n  description: 'A smart back button component that handles navigation history with a fallback to root. Built with shadcn/ui and featuring intelligent routing.',\n\n  keywords: ['shadcn/ui', 'react', 'back button', 'navigation', 'ui components', 'react components', 'delta components', 'nextjs components', 'tailwind components'],\n\n  alternates: {\n    canonical: 'https://deltacomponents.dev/docs/back-button',\n  },\n\n  category: 'component',\n\n  openGraph: {\n    title: 'BackButton Component | Delta Components',\n    description: 'A smart back button component that handles navigation history with a fallback to root. Built with shadcn/ui and featuring intelligent routing.',\n    type: 'article',\n    url: 'https://deltacomponents.dev/docs/back-button',\n    images: [\n      {\n        url: 'https://deltacomponents.dev/og/back-button.png',\n        width: 1200,\n        height: 630,\n        alt: 'BackButton Component Preview showing smart navigation handling'\n      }\n    ],\n    article: {\n      authors: ['Patrick Prunty'],\n      tags: ['UI Components', 'React', 'Shadcn', 'Navigation', 'Back Button'],\n      section: 'Components'\n    },\n    siteName: 'Delta Components'\n  },\n\n  twitter: {\n    card: 'summary_large_image',\n    title: 'BackButton Component | Delta Components',\n    description: 'A smart back button component that handles navigation history with a fallback to root. Built with shadcn/ui and featuring intelligent routing.',\n    images: ['https://deltacomponents.dev/og/back-button.png'],\n    creator: '@pprunty_',\n    site: '@deltacomponents'\n  },\n\n  robots: {\n    index: true,\n    follow: true,\n    nocache: false,\n    googleBot: {\n      index: true,\n      follow: true,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n      'max-video-preview': -1\n    }\n  }\n}\n\n# BackButton\n\nA smart back button component that intelligently handles navigation history with a fallback to root.\n\n## Features\n\n- **Smart Navigation**: Automatically detects browser history and navigates back when possible\n- **Fallback Handling**: Falls back to a specified route (defaults to '/') when no history is available\n- **Customizable**: Supports text, variants, and icon customization\n- **Accessible**: Built with proper ARIA attributes and keyboard navigation\n\n## Basic Usage\n\n<ComponentTabs name=\"back-button-basic\" />\n\n<InstallationInstructions componentName=\"back-button\" />\n\n## Props\n\n<Table>\n  <TableHeader>\n    <TableRow>\n      <TableHead>Prop</TableHead>\n      <TableHead>Type</TableHead>\n      <TableHead>Default</TableHead>\n      <TableHead>Description</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell>`fallbackRoute`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>`'/'`</TableCell>\n      <TableCell>Route to navigate to when history is empty</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`variant`</TableCell>\n      <TableCell>`'default' \\| 'secondary' \\| 'outline' \\| 'ghost' \\| 'destructive'`</TableCell>\n      <TableCell>`'outline'`</TableCell>\n      <TableCell>The visual style variant of the button</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`size`</TableCell>\n      <TableCell>`'sm' \\| 'md' \\| 'lg' \\| 'icon'`</TableCell>\n      <TableCell>`'icon'`</TableCell>\n      <TableCell>The size of the button</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`className`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Additional CSS classes</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n\n## Smart Navigation Handling\n\nThe BackButton component intelligently handles navigation:\n\n1. When clicked, it first checks if there's browser history available (`window.history.length > 2`).\n2. If history exists, it uses `router.back()` to navigate to the previous page.\n3. If no history is available (e.g., user landed directly on the page), it navigates to the `fallbackRoute`.\n4. The default fallback route is the root path (`'/'`), but this can be customized via the `fallbackRoute` prop.\n\n```tsx\nimport { BackButton } from \"@/delta/components/back-button\"\n\nexport default function BackButtonExample() {\n  return (\n    // Will go back in history if available, otherwise to /dashboard\n    <BackButton \n      text=\"Back to Dashboard\"\n      fallbackRoute=\"/dashboard\"\n      variant=\"ghost\"\n      size=\"md\"\n    />\n  )\n}\n```\n\n## Accessibility\n\nThe BackButton component follows WAI-ARIA guidelines:\n- Includes appropriate aria-label (uses text prop if provided)\n- Maintains keyboard focus management\n- Provides visual feedback for all interactive states\n- Uses semantic HTML elements for better screen reader support\n",
      "type": "registry:component",
      "target": "content/docs/back-button.mdx"
    }
  ]
}