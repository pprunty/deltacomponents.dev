{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropdown-menu",
  "type": "registry:component",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "dependencies": ["framer-motion"],
  "files": [
    {
      "path": "registry/components/dropdown-menu.tsx",
      "content": "\"use client\"\n\nimport React, { useRef, useState } from \"react\"\nimport { AnimatePresence, motion } from \"framer-motion\"\n\nimport { useClickAway } from \"@/hooks/use-click-away\"\nimport { useKeyPress } from \"@/hooks/use-key-press\"\n\n// Types for the dropdown components\ninterface DropdownProps {\n  children: React.ReactNode\n  className?: string\n}\n\ninterface DropdownTriggerProps {\n  children: React.ReactNode\n  className?: string\n}\n\ninterface DropdownContentProps {\n  children: React.ReactNode\n  className?: string\n  align?: \"start\" | \"center\" | \"end\"\n  side?: \"left\" | \"right\"\n  placement?: \"top\" | \"bottom\" | \"auto\"\n  sideOffset?: number\n}\n\ninterface DropdownItemProps {\n  children: React.ReactNode\n  className?: string\n  onClick?: () => void\n  disabled?: boolean\n  destructive?: boolean\n}\n\ninterface DropdownSeparatorProps {\n  className?: string\n}\n\n// Context to manage the dropdown state\ntype DropdownContextType = {\n  open: boolean\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>\n  triggerRef: React.RefObject<HTMLDivElement | null>\n  contentRef: React.RefObject<HTMLDivElement | null>\n}\n\nconst DropdownContext = React.createContext<DropdownContextType | undefined>(\n  undefined\n)\n\n// Hook to use the dropdown context\nconst useDropdownContext = () => {\n  const context = React.useContext(DropdownContext)\n  if (!context) {\n    throw new Error(\n      \"Dropdown components must be used within a Dropdown component\"\n    )\n  }\n  return context\n}\n\n// Main Dropdown component\nexport function Dropdown({ children, className = \"\" }: DropdownProps) {\n  const [open, setOpen] = useState(false)\n  const triggerRef = useRef<HTMLDivElement>(null)\n  const contentRef = useRef<HTMLDivElement>(null)\n\n  return (\n    <DropdownContext.Provider value={{ open, setOpen, triggerRef, contentRef }}>\n      <div className={`relative inline-block text-left ${className}`}>\n        {children}\n      </div>\n    </DropdownContext.Provider>\n  )\n}\n\n// Trigger component for the dropdown\nexport function DropdownTrigger({\n  children,\n  className = \"\",\n}: DropdownTriggerProps) {\n  const { open, setOpen, triggerRef } = useDropdownContext()\n\n  return (\n    <div\n      ref={triggerRef}\n      onClick={() => setOpen(!open)}\n      className={`inline-flex ${className}`}\n      aria-expanded={open}\n      aria-haspopup=\"true\"\n    >\n      {children}\n    </div>\n  )\n}\n\n// Content component for the dropdown\nexport function DropdownContent({\n  children,\n  className = \"\",\n  align = \"start\",\n  side = \"left\",\n  placement = \"auto\",\n  sideOffset = 0,\n}: DropdownContentProps) {\n  const { open, setOpen, triggerRef, contentRef } = useDropdownContext()\n\n  // Close dropdown when clicking outside\n  useClickAway([triggerRef, contentRef], () => {\n    if (open) setOpen(false)\n  })\n\n  // Close dropdown when pressing Escape\n  useKeyPress(\"Escape\", () => {\n    if (open) setOpen(false)\n  })\n\n  // Add state to track the actual placement\n  const [actualPlacement, setActualPlacement] = useState(placement)\n\n  // Effect to determine optimal placement when dropdown opens\n  React.useEffect(() => {\n    if (\n      !open ||\n      placement !== \"auto\" ||\n      !triggerRef.current ||\n      !contentRef.current\n    )\n      return\n\n    // Get the position of the trigger element\n    const triggerRect = triggerRef.current.getBoundingClientRect()\n    const contentRect = contentRef.current.getBoundingClientRect()\n\n    // Calculate available space above and below\n    const spaceAbove = triggerRect.top\n    const spaceBelow = window.innerHeight - triggerRect.bottom\n\n    // Determine if content should appear above or below based on available space\n    const contentHeight = contentRect.height\n\n    if (spaceBelow < contentHeight && spaceAbove > spaceBelow) {\n      setActualPlacement(\"top\")\n    } else {\n      setActualPlacement(\"bottom\")\n    }\n  }, [open, placement, triggerRef, contentRef])\n\n  // Calculate alignment classes\n  const alignmentClasses = {\n    start: side === \"left\" ? \"left-0\" : \"right-0\",\n    center: \"left-1/2 -translate-x-1/2\",\n    end: side === \"left\" ? \"right-0\" : \"left-0\",\n  }[align]\n\n  // Calculate position classes\n  const positionClasses =\n    actualPlacement === \"top\"\n      ? `bottom-full mb-${sideOffset}`\n      : `top-full mt-${sideOffset}`\n\n  // Get transform origin based on placement, side, and align\n  const getTransformOrigin = () => {\n    if (actualPlacement === \"top\") {\n      if (align === \"center\") {\n        return \"bottom center\"\n      }\n      // For top placement, adjust based on side and align\n      if (\n        (side === \"left\" && align === \"start\") ||\n        (side === \"right\" && align === \"end\")\n      ) {\n        return \"bottom left\"\n      }\n      return \"bottom right\"\n    } else {\n      if (align === \"center\") {\n        return \"top center\"\n      }\n      // For bottom placement, adjust based on side and align\n      if (\n        (side === \"left\" && align === \"start\") ||\n        (side === \"right\" && align === \"end\")\n      ) {\n        return \"top left\"\n      }\n      return \"top right\"\n    }\n  }\n\n  // Create animation variants based on placement, side, and align\n  const dropdownVariants = React.useMemo(() => {\n    // Determine the y direction based on placement\n    const yOffset = actualPlacement === \"top\" ? 5 : -5\n\n    // Determine the x direction based on side AND align combination\n    let xOffset = 0\n\n    if (align === \"center\") {\n      xOffset = 0 // No horizontal offset for center alignment\n    } else if (align === \"start\") {\n      xOffset = side === \"left\" ? -5 : 5\n    } else if (align === \"end\") {\n      xOffset = side === \"left\" ? 5 : -5 // Reversed for \"end\" alignment\n    }\n\n    return {\n      hidden: {\n        opacity: 0,\n        y: yOffset,\n        x: xOffset,\n        scale: 0.95,\n        transition: {\n          y: { type: \"spring\", stiffness: 700, damping: 35 },\n          x: { type: \"spring\", stiffness: 700, damping: 35 },\n          opacity: { duration: 0.1, ease: \"easeInOut\" },\n          scale: { duration: 0.1, ease: \"easeInOut\" },\n        },\n      },\n      visible: {\n        opacity: 1,\n        y: 0,\n        x: 0,\n        scale: 1,\n        transition: {\n          y: { type: \"spring\", stiffness: 700, damping: 35 },\n          x: { type: \"spring\", stiffness: 700, damping: 35 },\n          opacity: { duration: 0.15, ease: \"easeInOut\" },\n          scale: { duration: 0.1, ease: \"easeInOut\" },\n        },\n      },\n      exit: {\n        opacity: 0,\n        y: yOffset,\n        x: xOffset,\n        scale: 0.95,\n        transition: {\n          y: { type: \"spring\", stiffness: 500, damping: 25 },\n          x: { type: \"spring\", stiffness: 500, damping: 25 },\n          opacity: { duration: 0.1, ease: \"easeInOut\" },\n          scale: { duration: 0.1, ease: \"easeInOut\" },\n        },\n      },\n    }\n  }, [actualPlacement, side, align])\n\n  return (\n    <AnimatePresence>\n      {open && (\n        <motion.div\n          ref={contentRef}\n          variants={dropdownVariants as any}\n          initial=\"hidden\"\n          animate=\"visible\"\n          exit=\"exit\"\n          style={{ transformOrigin: getTransformOrigin() }}\n          className={`absolute z-[9999] min-w-[8rem] overflow-hidden rounded-md border border-border bg-card text-card-foreground p-1 shadow-md shadow-[0_2px_8px_rgba(0,0,0,0.05)] dark:shadow-[0_2px_10px_rgba(0,0,0,0.3)] ${positionClasses} ${alignmentClasses} ${className}`}\n          role=\"menu\"\n          aria-orientation=\"vertical\"\n          tabIndex={-1}\n        >\n          {children}\n        </motion.div>\n      )}\n    </AnimatePresence>\n  )\n}\n\n// Item component for the dropdown\nexport function DropdownItem({\n  children,\n  className = \"\",\n  onClick,\n  disabled = false,\n  destructive = false,\n}: DropdownItemProps) {\n  const { setOpen } = useDropdownContext()\n\n  const handleClick = () => {\n    if (disabled) return\n    if (onClick) onClick()\n    setOpen(false)\n  }\n\n  return (\n    <button\n      className={`relative flex w-full cursor-pointer select-none items-center rounded-sm px-2 py-2 text-sm outline-none transition-colors ${\n        disabled\n          ? \"pointer-events-none opacity-50\"\n          : destructive\n            ? \"text-destructive hover:bg-destructive/10 focus:bg-destructive/10\"\n            : \"hover:bg-accent focus:bg-accent\"\n      } ${className}`}\n      onClick={handleClick}\n      role=\"menuitem\"\n      disabled={disabled}\n    >\n      {children}\n    </button>\n  )\n}\n\n// Separator component for the dropdown\nexport function DropdownSeparator({ className = \"\" }: DropdownSeparatorProps) {\n  return (\n    <div className={`mx-1 my-1 h-px bg-border ${className}`} role=\"separator\" />\n  )\n}\n",
      "type": "registry:component",
      "target": "/components/delta/components/dropdown-menu.tsx"
    }
  ]
}
