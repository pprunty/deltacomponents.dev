{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "avatar",
  "type": "registry:component",
  "title": "Avatar",
  "description": "A component for avatar",
  "dependencies": ["next"],
  "registryDependencies": ["utils"],
  "files": [
    {
      "path": "delta/components/avatar.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport Image from 'next/image';\nimport { cn } from '@/lib/utils';\n\n// Static cache that persists across component instances\nconst imageCache = new Map<string, string>();\n\nexport interface AvatarProps extends React.HTMLAttributes<HTMLDivElement> {\n  src?: string | null;\n  name?: string | null;\n  size?: number;\n  alt?: string;\n  onError?: () => void;\n  cacheKey?: string;\n  priority?: boolean;\n  onClick?: () => void;\n}\n\n/**\n * Avatar component that displays an image or falls back to a gradient based on name\n */\nexport function Avatar({\n  src,\n  name = '',\n  size = 34,\n  alt = 'Avatar',\n  className,\n  onError,\n  cacheKey,\n  priority = false,\n  onClick,\n  ...props\n}: AvatarProps) {\n  // Check if we have a cached image first\n  const cachedImage = cacheKey ? imageCache.get(cacheKey) : undefined;\n\n  // Use cached image if available\n  const [imageSrc, setImageSrc] = React.useState(cachedImage || src);\n  const [showFallback, setShowFallback] = React.useState(!imageSrc);\n\n  // Store gradient in a ref to avoid recalculating\n  const cachedGradient = React.useRef<string | null>(null);\n\n  // Handle image load error\n  const handleError = React.useCallback(() => {\n    setShowFallback(true);\n    setImageSrc(undefined);\n    onError?.();\n  }, [onError]);\n\n  // Handle successful image load\n  const handleImageLoad = React.useCallback(() => {\n    // Only cache the image if we have a cacheKey and it's not already cached\n    if (src && cacheKey && !imageCache.has(cacheKey)) {\n      // Create an in-memory copy of the image\n      const img = new window.Image();\n      img.crossOrigin = 'anonymous';\n      img.src = src;\n\n      img.onload = () => {\n        try {\n          // Create a canvas to convert the image to a data URL\n          const canvas = document.createElement('canvas');\n          canvas.width = img.width;\n          canvas.height = img.height;\n          const ctx = canvas.getContext('2d');\n          if (ctx) {\n            ctx.drawImage(img, 0, 0);\n            // Store the data URL in our cache\n            const dataUrl = canvas.toDataURL('image/jpeg');\n            imageCache.set(cacheKey, dataUrl);\n            setImageSrc(dataUrl);\n          }\n        } catch (e) {\n          console.error('Error caching image:', e);\n          // If toDataURL fails, just cache the original URL\n          imageCache.set(cacheKey, src);\n        }\n      };\n    }\n  }, [src, cacheKey]);\n\n  // Get initials from name (up to 2 characters)\n  const getInitials = (name: string) => {\n    if (!name) return '';\n\n    const parts = name.trim().split(/\\s+/);\n    if (parts.length === 1) {\n      return parts[0].charAt(0).toUpperCase();\n    }\n\n    return (\n      parts[0].charAt(0) + parts[parts.length - 1].charAt(0)\n    ).toUpperCase();\n  };\n\n  // Generate gradient based on name\n  const getGradient = React.useCallback((name: string) => {\n    // Use cached gradient if available\n    if (cachedGradient.current) return cachedGradient.current;\n\n    const hash = djb2(name || 'Anonymous');\n    const baseHue = ((hash % 360) + 360) % 360;\n    const hue2 = (baseHue + 30) % 360;\n    const hue3 = (baseHue + 60) % 360;\n\n    const gradient = `linear-gradient(135deg, hsl(${baseHue}, 70%, 50%), hsl(${hue2}, 70%, 50%), hsl(${hue3}, 70%, 50%))`;\n    cachedGradient.current = gradient;\n    return gradient;\n  }, []);\n\n  // djb2 hash function for better distribution\n  function djb2(str: string): number {\n    let hash = 5381;\n    for (let i = 0; i < str.length; i++) {\n      hash = hash * 33 + str.charCodeAt(i);\n    }\n    return hash;\n  }\n\n  // Clean up the cache if it gets too large (limit to 100 entries)\n  React.useEffect(() => {\n    if (imageCache.size > 100) {\n      const keys = Array.from(imageCache.keys());\n      const keysToRemove = keys.slice(0, keys.length - 50);\n      keysToRemove.forEach((key) => imageCache.delete(key));\n    }\n  }, []);\n\n  // Calculate gradient for fallback\n  const gradient = getGradient(name || 'Anonymous');\n\n  return (\n    <div\n      className={cn(\n        'relative inline-flex items-center justify-center overflow-hidden rounded-full bg-muted',\n        onClick && 'cursor-pointer hover:opacity-80 transition-opacity',\n        className,\n      )}\n      style={{\n        width: size,\n        height: size,\n        minWidth: size,\n        minHeight: size,\n      }}\n      onClick={onClick}\n      role={onClick ? 'button' : undefined}\n      tabIndex={onClick ? 0 : undefined}\n      onKeyDown={onClick ? (e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          onClick();\n        }\n      } : undefined}\n      {...props}\n    >\n      {/* Fallback layer (gradient with initials) - only shown when image is not available */}\n      {showFallback && (\n        <div\n          className=\"absolute inset-0 flex items-center justify-center text-white font-medium\"\n          style={{ background: gradient }}\n        >\n          {name ? (\n            <span style={{ fontSize: `${Math.max(size / 2.5, 10)}px` }}>\n              {getInitials(name)}\n            </span>\n          ) : null}\n        </div>\n      )}\n\n      {/* Image layer - displayed immediately if cached */}\n      {imageSrc && (\n        <Image\n          src={imageSrc}\n          alt={alt}\n          className=\"object-cover w-full h-full\"\n          width={size}\n          height={size}\n          priority={priority}\n          onLoad={handleImageLoad}\n          onError={handleError}\n          unoptimized={!!cachedImage} // Don't optimize cached data URLs\n        />\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/components/avatar.tsx"
    },
    {
      "path": "delta/examples/avatar-basic-demo.tsx",
      "content": "\"use client\"\n\nimport { Avatar } from \"@/delta/components/avatar\"\n\nexport default function AvatarBasicDemo() {\n  return (\n    <div className=\"flex items-center justify-center p-4\">\n      <Avatar \n        src=\"/icon.webp\"\n        name=\"Delta Components\"\n        size={40}\n      />\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "delta/examples/avatar-basic-demo.tsx"
    },
    {
      "path": "content/docs/avatar.mdx",
      "content": "export const metadata = {\n  title: 'Avatar | Delta Components',\n  description: 'A versatile avatar component that supports images and initials fallback. Features automatic gradient generation based on names and image caching for better performance.',\n\n  // Keywords help with SEO\n  keywords: ['shadcn/ui', 'react', 'avatar component', 'ui components', 'profile picture', 'delta components', 'nextjs components', 'tailwind components'],\n\n  // Canonical URL to prevent duplicate content issues\n  alternates: {\n    canonical: 'https://deltacomponents.dev/docs/avatar',\n  },\n\n  // Category helps with structured data\n  category: 'component',\n\n  openGraph: {\n    title: 'Avatar Component | Delta Components',\n    description: 'A versatile avatar component that supports images and initials fallback. Features automatic gradient generation based on names and image caching for better performance.',\n    type: 'article',\n    url: 'https://deltacomponents.dev/docs/avatar',\n    images: [\n      {\n        url: 'https://deltacomponents.dev/og/avatar.png',\n        width: 1200,\n        height: 630,\n        alt: 'Avatar Component Preview showing different variants and sizes'\n      }\n    ],\n    // Article specific OpenGraph metadata\n    article: {\n      authors: ['Patrick Prunty'],\n      tags: ['UI Components', 'React', 'Avatar', 'Profile Picture'],\n      section: 'Components'\n    },\n    siteName: 'Delta Components'\n  },\n\n  twitter: {\n    card: 'summary_large_image',\n    title: 'Avatar Component | Delta Components',\n    description: 'A versatile avatar component that supports images and initials fallback. Features automatic gradient generation based on names and image caching for better performance.',\n    images: ['https://deltacomponents.dev/og/avatar.png'],\n    creator: '@pprunty_',\n    site: '@deltacomponents'\n  },\n\n  // Additional metadata for better SEO\n  robots: {\n    index: true,\n    follow: true,\n    nocache: false,\n    googleBot: {\n      index: true,\n      follow: true,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n      'max-video-preview': -1\n    }\n  }\n}\n\n# Avatar\n\nA versatile avatar component that supports images and initials fallback. Features automatic gradient generation based on names and image caching for better performance.\n\n## Basic Usage\n\n<ComponentTabs name=\"avatar-basic\" />\n\n## Variants\n\n<ComponentTabs name=\"avatar-fallback\" />\n\n<InstallationInstructions componentName=\"avatar\" />\n\n## Features\n\n- **Image Support**: Display profile pictures with automatic fallback\n- **Initials Display**: Show user initials when no image is available\n- **Gradient Generation**: Automatic gradient generation based on user names\n- **Image Caching**: Built-in image caching for better performance\n- **Size Customization**: Flexible sizing options\n- **Interactive**: Optional click handler with hover effects\n- **Accessibility**: Proper ARIA attributes and keyboard navigation\n\n## Props\n\n<Table>\n  <TableHeader>\n    <TableRow>\n      <TableHead>Prop</TableHead>\n      <TableHead>Type</TableHead>\n      <TableHead>Default</TableHead>\n      <TableHead>Description</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell>`name`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Name used for generating initials and gradient</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`size`</TableCell>\n      <TableCell>`number`</TableCell>\n      <TableCell>`34`</TableCell>\n      <TableCell>Size of the avatar in pixels</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`alt`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>`\"Avatar\"`</TableCell>\n      <TableCell>Alt text for the avatar image</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`className`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Additional CSS classes</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`onError`</TableCell>\n      <TableCell>`() => void`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Callback when image fails to load</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`cacheKey`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Key for caching the image</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`priority`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether to preload the image</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`onClick`</TableCell>\n      <TableCell>`() => void`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Click handler for the avatar. When provided, adds hover effects and cursor pointer</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n\n## Usage Examples\n\n### Basic Avatar\n\n```tsx\nimport { Avatar } from \"@/components/ui/avatar\"\n\nexport default function AvatarDemo() {\n  return (\n    <Avatar \n      src=\"https://github.com/username.png\"\n      name=\"John Doe\"\n      size={40}\n    />\n  )\n}\n```\n\n### Size Variants\n\n```tsx\nimport { Avatar } from \"@/components/ui/avatar\"\n\nexport default function AvatarDemo() {\n  return (\n    <div className=\"flex items-center gap-4\">\n      <Avatar name=\"Small\" size={24} />\n      <Avatar name=\"Medium\" size={40} />\n      <Avatar name=\"Large\" size={64} />\n    </div>\n  )\n}\n```\n\n### Fallback Variants\n\n```tsx\nimport { Avatar } from \"@/components/ui/avatar\"\n\nexport default function AvatarDemo() {\n  return (\n    <div className=\"flex items-center gap-4\">\n      <Avatar name=\"John Doe\" size={40} />\n      <Avatar name=\"Jane\" size={40} />\n      <Avatar size={40} />\n    </div>\n  )\n}\n```\n\n### Interactive Variants\n\n```tsx\nimport { Avatar } from \"@/components/ui/avatar\"\n\nexport default function AvatarDemo() {\n  return (\n    <div className=\"flex items-center gap-4\">\n      <Avatar \n        name=\"Click Me\"\n        size={40}\n        onClick={() => console.log('Avatar clicked!')}\n      />\n      <Avatar \n        name=\"No Image\"\n        size={40}\n        onClick={() => console.log('Fallback avatar clicked!')}\n      />\n    </div>\n  )\n}\n```\n\n## Accessibility\n\nThe Avatar component follows accessibility best practices:\n\n- Includes proper `alt` text for images\n- Uses semantic HTML elements\n- Provides fallback content for screen readers\n- Maintains proper contrast ratios\n- Supports keyboard navigation\n- Adds proper ARIA roles and keyboard support when interactive\n",
      "type": "registry:component",
      "target": "content/docs/avatar.mdx"
    },
    {
      "path": "delta/examples/avatar-fallback-demo.tsx",
      "content": "\"use client\"\n\nimport { Avatar } from \"@/delta/components/avatar\"\n\nexport default function AvatarFallbackDemo() {\n  return (\n    <div className=\"flex flex-col items-center gap-6 p-4\">\n      {/* Size variants */}\n      <div className=\"flex flex-col items-center gap-2\">\n        <span className=\"text-sm text-muted-foreground\">Size Variants</span>\n        <div className=\"flex items-center gap-4\">\n          <Avatar \n            name=\"Small\"\n            size={24}\n          />\n          <Avatar \n            name=\"Medium\"\n            size={40}\n          />\n          <Avatar \n            name=\"Large\"\n            size={64}\n          />\n        </div>\n      </div>\n\n      {/* Fallback variants */}\n      <div className=\"flex flex-col items-center gap-2\">\n        <span className=\"text-sm text-muted-foreground\">Fallback Variants</span>\n        <div className=\"flex items-center gap-4\">\n          <Avatar \n            name=\"John Doe\"\n            size={40}\n          />\n          <Avatar \n            name=\"Jane\"\n            size={40}\n          />\n          <Avatar \n            size={40}\n          />\n        </div>\n      </div>\n\n      {/* Interactive variants */}\n      <div className=\"flex flex-col items-center gap-2\">\n        <span className=\"text-sm text-muted-foreground\">Interactive Variants</span>\n        <div className=\"flex items-center gap-4\">\n          <Avatar \n            name=\"Click Me\"\n            size={40}\n            src=\"/icon.webp\"\n            onClick={() => alert('Avatar clicked!')}\n          />\n          <Avatar \n            name=\"No Image\"\n            size={40}\n            onClick={() => alert('Fallback avatar clicked!')}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "delta/examples/avatar-fallback-demo.tsx"
    }
  ]
}
