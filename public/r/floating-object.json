{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "floating-object",
  "type": "registry:component",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "dependencies": ["motion"],
  "files": [
    {
      "path": "registry/animations/floating-object.tsx",
      "content": "\"use client\"\n\nimport type { ReactNode } from \"react\"\nimport { useEffect, useState } from \"react\"\nimport { motion } from \"motion/react\"\n\ninterface FloatingObjectProps {\n  children: ReactNode\n  pattern?: \"float\" | \"circular\" | \"random-directions\"\n  intensity?: \"subtle\" | \"medium\" | \"strong\"\n  speed?: \"slow\" | \"medium\" | \"fast\"\n  direction?: \"clockwise\" | \"counterclockwise\"\n  className?: string\n}\n\nexport function FloatingObject({\n  children,\n  pattern = \"float\",\n  intensity = \"medium\",\n  speed = \"medium\",\n  direction = \"clockwise\",\n  className,\n}: FloatingObjectProps) {\n  const [randomPath, setRandomPath] = useState<Array<{ x: number; y: number }>>(\n    []\n  )\n\n  // Define intensity levels for movement radius\n  const intensityMap = {\n    subtle: { radius: 15, float: { x: 3, y: 2, rotate: 1 } },\n    medium: { radius: 25, float: { x: 6, y: 4, rotate: 2 } },\n    strong: { radius: 40, float: { x: 10, y: 8, rotate: 3 } },\n  }\n\n  // Define speed levels for animation duration\n  const speedMap = {\n    slow: 8,\n    medium: 5,\n    fast: 3,\n  }\n\n  const movement = intensityMap[intensity]\n  const duration = speedMap[speed]\n\n  // Generate random directional path\n  useEffect(() => {\n    if (pattern === \"random-directions\") {\n      const generateRandomPath = () => {\n        const directions = [\n          { x: 0, y: -movement.radius }, // North\n          { x: movement.radius * 0.7, y: -movement.radius * 0.7 }, // Northeast\n          { x: movement.radius, y: 0 }, // East\n          { x: movement.radius * 0.7, y: movement.radius * 0.7 }, // Southeast\n          { x: 0, y: movement.radius }, // South\n          { x: -movement.radius * 0.7, y: movement.radius * 0.7 }, // Southwest\n          { x: -movement.radius, y: 0 }, // West\n          { x: -movement.radius * 0.7, y: -movement.radius * 0.7 }, // Northwest\n        ]\n\n        // Create a path with 6-8 random waypoints\n        const pathLength = 6 + Math.floor(Math.random() * 3)\n        const path = [{ x: 0, y: 0 }] // Start at center\n\n        for (let i = 0; i < pathLength; i++) {\n          const randomDirection =\n            directions[Math.floor(Math.random() * directions.length)]\n          // Add some randomness to the exact position\n          const randomX =\n            randomDirection.x + (Math.random() - 0.5) * movement.radius * 0.3\n          const randomY =\n            randomDirection.y + (Math.random() - 0.5) * movement.radius * 0.3\n          path.push({ x: randomX, y: randomY })\n        }\n\n        path.push({ x: 0, y: 0 }) // Return to center\n        return path\n      }\n\n      setRandomPath(generateRandomPath())\n    }\n  }, [pattern, movement.radius])\n\n  // Circular motion animation\n  if (pattern === \"circular\") {\n    const multiplier = direction === \"clockwise\" ? 1 : -1\n\n    return (\n      <motion.div\n        className={className}\n        animate={{\n          x: [0, movement.radius, 0, -movement.radius, 0],\n          y: [\n            0,\n            movement.radius * multiplier,\n            0,\n            -movement.radius * multiplier,\n            0,\n          ],\n        }}\n        transition={{\n          duration: duration,\n          ease: \"linear\",\n          repeat: Number.POSITIVE_INFINITY,\n          repeatType: \"loop\",\n        }}\n        style={{\n          willChange: \"transform\",\n        }}\n      >\n        {children}\n      </motion.div>\n    )\n  }\n\n  // Random directional movement\n  if (pattern === \"random-directions\" && randomPath.length > 0) {\n    const xPath = randomPath.map((point) => point.x)\n    const yPath = randomPath.map((point) => point.y)\n\n    return (\n      <motion.div\n        className={className}\n        animate={{\n          x: xPath,\n          y: yPath,\n          rotate: [0, 5, -5, 3, -3, 0],\n        }}\n        transition={{\n          duration: duration * 2, // Slower for more deliberate movement\n          ease: \"easeInOut\",\n          repeat: Number.POSITIVE_INFINITY,\n          repeatType: \"loop\",\n        }}\n        style={{\n          willChange: \"transform\",\n        }}\n        onAnimationComplete={() => {\n          // Generate new random path when animation completes\n          setTimeout(() => {\n            const directions = [\n              { x: 0, y: -movement.radius }, // North\n              { x: movement.radius * 0.7, y: -movement.radius * 0.7 }, // Northeast\n              { x: movement.radius, y: 0 }, // East\n              { x: movement.radius * 0.7, y: movement.radius * 0.7 }, // Southeast\n              { x: 0, y: movement.radius }, // South\n              { x: -movement.radius * 0.7, y: movement.radius * 0.7 }, // Southwest\n              { x: -movement.radius, y: 0 }, // West\n              { x: -movement.radius * 0.7, y: -movement.radius * 0.7 }, // Northwest\n            ]\n\n            const pathLength = 6 + Math.floor(Math.random() * 3)\n            const path = [{ x: 0, y: 0 }]\n\n            for (let i = 0; i < pathLength; i++) {\n              const randomDirection =\n                directions[Math.floor(Math.random() * directions.length)]\n              const randomX =\n                randomDirection.x +\n                (Math.random() - 0.5) * movement.radius * 0.3\n              const randomY =\n                randomDirection.y +\n                (Math.random() - 0.5) * movement.radius * 0.3\n              path.push({ x: randomX, y: randomY })\n            }\n\n            path.push({ x: 0, y: 0 })\n            setRandomPath(path)\n          }, Math.random() * 2000) // Random delay before generating new path\n        }}\n      >\n        {children}\n      </motion.div>\n    )\n  }\n\n  // Default floating pattern (original)\n  return (\n    <motion.div\n      className={className}\n      animate={{\n        x: [0, movement.float.x, -movement.float.x, movement.float.x, 0],\n        y: [0, -movement.float.y, movement.float.y, -movement.float.y, 0],\n        rotate: [\n          0,\n          movement.float.rotate,\n          -movement.float.rotate,\n          movement.float.rotate,\n          0,\n        ],\n      }}\n      transition={{\n        duration: duration,\n        ease: \"easeInOut\",\n        repeat: Number.POSITIVE_INFINITY,\n        repeatType: \"loop\",\n      }}\n      style={{\n        willChange: \"transform\",\n      }}\n    >\n      {children}\n    </motion.div>\n  )\n}\n",
      "type": "registry:component",
      "target": "/delta/floating-object.tsx"
    }
  ]
}
