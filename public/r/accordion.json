{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion",
  "type": "registry:component",
  "title": "Accordion",
  "description": "A component for accordion",
  "dependencies": [
    "@radix-ui/react-accordion",
    "@phosphor-icons/react",
    "class-variance-authority"
  ],
  "registryDependencies": ["utils"],
  "files": [
    {
      "path": "delta/components/accordion.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { CaretDown, Plus, Minus } from \"@phosphor-icons/react\"\nimport { cva } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst accordionVariants = cva(\"w-full\", {\n  variants: {\n    variant: {\n      default: \"space-y-2\",\n      bordered: \"space-y-2 border border-border rounded-lg p-2\",\n      ghost: \"space-y-2\",\n      neobrutalist: \"border-4 border-black dark:border-white\",\n    },\n    size: {\n      sm: \"text-sm\",\n      md: \"text-base\",\n      lg: \"text-lg\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    size: \"md\",\n  },\n})\n\ntype AccordionVariant = \"default\" | \"bordered\" | \"ghost\" | \"neobrutalist\"\ntype AccordionSize = \"sm\" | \"md\" | \"lg\"\n\n// Define the common properties\ninterface AccordionBaseProps {\n  variant?: AccordionVariant\n  size?: AccordionSize\n  defaultOpen?: boolean\n  className?: string\n}\n\n// Specific props for single type\ninterface AccordionSingleProps extends AccordionBaseProps, Omit<AccordionPrimitive.AccordionSingleProps, \"type\"> {\n  type?: \"single\"\n}\n\n// Specific props for multiple type\ninterface AccordionMultipleProps extends AccordionBaseProps, Omit<AccordionPrimitive.AccordionMultipleProps, \"type\"> {\n  type: \"multiple\"\n}\n\n// Union type\ntype AccordionProps = AccordionSingleProps | AccordionMultipleProps\n\nconst AccordionContext = React.createContext<{ variant?: AccordionVariant }>({})\n\nconst Accordion = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Root>,\n  AccordionProps\n>((props, ref) => {\n  const { className, variant, size, defaultOpen, type, ...rest } = props\n  \n  if (type === \"multiple\") {\n    const { defaultValue, ...otherProps } = rest as Omit<AccordionMultipleProps, \"type\">\n    return (\n      <AccordionContext.Provider value={{ variant }}>\n        <AccordionPrimitive.Root\n          ref={ref}\n          type=\"multiple\"\n          className={cn(accordionVariants({ variant, size }), className)}\n          defaultValue={defaultValue}\n          {...otherProps}\n        />\n      </AccordionContext.Provider>\n    )\n  } else {\n    const { defaultValue, ...otherProps } = rest as Omit<AccordionSingleProps, \"type\">\n    // If defaultOpen is true and no defaultValue is provided, use \"item-1\" as default\n    const computedDefaultValue = defaultOpen && !defaultValue ? \"item-1\" : defaultValue\n\n    return (\n      <AccordionContext.Provider value={{ variant }}>\n        <AccordionPrimitive.Root\n          ref={ref}\n          type=\"single\"\n          className={cn(accordionVariants({ variant, size }), className)}\n          defaultValue={computedDefaultValue}\n          collapsible={true}\n          {...otherProps}\n        />\n      </AccordionContext.Provider>\n    )\n  }\n})\nAccordion.displayName = \"Accordion\"\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  const { variant } = React.useContext(AccordionContext)\n  return (\n    <AccordionPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"last:border-0\",\n        variant === \"neobrutalist\" ? \"border-b-4 border-black dark:border-white\" : \"border-b border-border\",\n        className,\n      )}\n      {...props}\n    />\n  )\n})\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger> & {\n    chevronPosition?: \"left\" | \"right\"\n    chevronVariant?: \"down\" | \"right\"\n    iconVariant?: \"chevron\" | \"plus-minus\"\n  }\n>(\n  (\n    { className, children, chevronPosition = \"right\", chevronVariant = \"down\", iconVariant = \"chevron\", ...props },\n    ref,\n  ) => {\n    const { variant } = React.useContext(AccordionContext)\n    return (\n      <AccordionPrimitive.Header className=\"flex\">\n        <AccordionPrimitive.Trigger\n          ref={ref}\n          className={cn(\n            \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline group\",\n            chevronPosition === \"left\" && \"flex-row-reverse\",\n            variant === \"neobrutalist\" && \"px-4\",\n            className,\n          )}\n          {...props}\n        >\n          {chevronPosition === \"left\" &&\n            (iconVariant === \"chevron\" ? (\n              <CaretDown\n                className={cn(\n                  \"h-4 w-4 shrink-0 transition-transform duration-200\",\n                  chevronVariant === \"right\" && \"rotate-90\",\n                )}\n                weight=\"bold\"\n              />\n            ) : (\n              <div className=\"relative h-4 w-4\">\n                <Plus\n                  className=\"absolute h-4 w-4 shrink-0 transition-transform duration-200 group-data-[state=open]:hidden\"\n                  weight=\"bold\"\n                />\n                <Minus\n                  className=\"absolute h-4 w-4 shrink-0 transition-transform duration-200 hidden group-data-[state=open]:block\"\n                  weight=\"bold\"\n                />\n              </div>\n            ))}\n          {children}\n          {chevronPosition === \"right\" &&\n            (iconVariant === \"chevron\" ? (\n              <CaretDown\n                className={cn(\n                  \"h-4 w-4 shrink-0 transition-transform duration-200\",\n                  chevronVariant === \"right\" && \"rotate-90\",\n                )}\n                weight=\"bold\"\n              />\n            ) : (\n              <div className=\"relative h-4 w-4\">\n                <Plus\n                  className=\"absolute h-4 w-4 shrink-0 transition-transform duration-200 group-data-[state=open]:hidden\"\n                  weight=\"bold\"\n                />\n                <Minus\n                  className=\"absolute h-4 w-4 shrink-0 transition-transform duration-200 hidden group-data-[state=open]:block\"\n                  weight=\"bold\"\n                />\n              </div>\n            ))}\n        </AccordionPrimitive.Trigger>\n      </AccordionPrimitive.Header>\n    )\n  },\n)\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => {\n  const { variant } = React.useContext(AccordionContext)\n  return (\n    <AccordionPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\",\n        variant === \"neobrutalist\" && \"px-4\",\n        className,\n      )}\n      {...props}\n    >\n      <div className=\"pb-4 pt-0\">{children}</div>\n    </AccordionPrimitive.Content>\n  )\n})\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
      "type": "registry:component",
      "target": "delta/components/accordion.tsx"
    },
    {
      "path": "delta/examples/accordion-basic-demo.tsx",
      "content": "\"use client\"\n\nimport { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from \"@/delta/components/accordion\"\n\nexport default function AccordionBasicDemo() {\n  return (\n    <div className=\"w-full max-w-2xl mx-auto p-4\">\n      <Accordion type=\"single\" collapsible defaultOpen>\n        <AccordionItem value=\"item-1\">\n          <AccordionTrigger>What is Delta Components?</AccordionTrigger>\n          <AccordionContent>\n            Delta Components is a collection of reusable React components built on top of shadcn/ui.\n            It provides additional features and customization options while maintaining the same\n            design system and developer experience.\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-2\">\n          <AccordionTrigger>How do I install it?</AccordionTrigger>\n          <AccordionContent>\n            You can install Delta Components using the CLI command:\n            <code className=\"ml-2 px-2 py-1 bg-muted rounded text-sm\">\n              npx shadcn@latest add \"component-name\"\n            </code>\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-3\">\n          <AccordionTrigger>Is it accessible?</AccordionTrigger>\n          <AccordionContent>\n            Yes! All Delta Components are built with accessibility in mind, following WAI-ARIA\n            guidelines and best practices. They support keyboard navigation, screen readers,\n            and proper ARIA attributes.\n          </AccordionContent>\n        </AccordionItem>\n      </Accordion>\n    </div>\n  )\n} ",
      "type": "registry:component",
      "target": "delta/examples/accordion-basic-demo.tsx"
    },
    {
      "path": "content/docs/accordion.mdx",
      "content": "export const metadata = {\n  title: 'Accordion | Delta Components',\n  description: 'A versatile accordion component that extends shadcn/ui with additional features like chevron positioning, variants, and sizes. Perfect for organizing and displaying collapsible content sections.',\n\n  // Keywords help with SEO\n  keywords: ['shadcn/ui', 'react', 'accordion', 'collapsible', 'ui components', 'react components', 'delta components', 'nextjs components', 'tailwind components'],\n\n  // Canonical URL to prevent duplicate content issues\n  alternates: {\n    canonical: 'https://deltacomponents.dev/docs/accordion',\n  },\n\n  // Category helps with structured data\n  category: 'component',\n\n  openGraph: {\n    title: 'Accordion Component | Delta Components',\n    description: 'A versatile accordion component that extends shadcn/ui with additional features like chevron positioning, variants, and sizes.',\n    type: 'article',\n    url: 'https://deltacomponents.dev/docs/accordion',\n    images: [\n      {\n        url: 'https://deltacomponents.dev/og/accordion.png',\n        width: 1200,\n        height: 630,\n        alt: 'Accordion Component Preview showing different variants and features'\n      }\n    ],\n    // Article specific OpenGraph metadata\n    article: {\n      authors: ['Patrick Prunty'],\n      tags: ['UI Components', 'React', 'Shadcn', 'Accordion', 'Collapsible'],\n      section: 'Components'\n    },\n    siteName: 'Delta Components'\n  },\n\n  twitter: {\n    card: 'summary_large_image',\n    title: 'Accordion Component | Delta Components',\n    description: 'A versatile accordion component that extends shadcn/ui with additional features like chevron positioning, variants, and sizes.',\n    images: ['https://deltacomponents.dev/og/accordion.png'],\n    creator: '@pprunty_',\n    site: '@deltacomponents'\n  }\n}\n\n# Accordion\n\nA versatile accordion component that extends shadcn/ui with additional features like chevron positioning, variants, and sizes. Perfect for organizing and displaying collapsible content sections.\n\n## Basic Usage\n\n<ComponentTabs name=\"accordion-basic\" />\n\n<InstallationInstructions componentName=\"accordion\" />\n\n## Features\n\n- **Multiple Variants**: Choose from default, bordered, and ghost styles\n- **Customizable Sizes**: Small, medium, and large text sizes\n- **Flexible Chevron**: Position chevrons on the left or right\n- **Chevron Variants**: Choose between down and right chevron styles\n- **Accessibility**: Fully accessible with proper ARIA attributes\n- **Animations**: Smooth open/close animations\n- **Type Support**: Single or multiple item expansion\n\n## Props\n\n<Table>\n  <TableHeader>\n    <TableRow>\n      <TableHead>Prop</TableHead>\n      <TableHead>Type</TableHead>\n      <TableHead>Default</TableHead>\n      <TableHead>Description</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell>`size`</TableCell>\n      <TableCell>`\"sm\" | \"md\" | \"lg\"`</TableCell>\n      <TableCell>`\"md\"`</TableCell>\n      <TableCell>Text size of the accordion</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`type`</TableCell>\n      <TableCell>`\"single\" | \"multiple\"`</TableCell>\n      <TableCell>`\"single\"`</TableCell>\n      <TableCell>Whether to allow single or multiple items to be expanded</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`defaultOpen`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether the first item should be open by default</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`defaultValue`</TableCell>\n      <TableCell>`string | string[]`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>The value of the item(s) to open by default</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`collapsible`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`true`</TableCell>\n      <TableCell>Whether an opened item can be closed</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`chevronPosition`</TableCell>\n      <TableCell>`\"left\" | \"right\"`</TableCell>\n      <TableCell>`\"right\"`</TableCell>\n      <TableCell>Position of the chevron icon</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`chevronVariant`</TableCell>\n      <TableCell>`\"down\" | \"right\"`</TableCell>\n      <TableCell>`\"down\"`</TableCell>\n      <TableCell>Style of the chevron icon</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`iconVariant`</TableCell>\n      <TableCell>`\"chevron\" | \"plus-minus\"`</TableCell>\n      <TableCell>`\"chevron\"`</TableCell>\n      <TableCell>Type of icon to use for the trigger</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`className`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Additional CSS classes</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n\n## Usage Examples\n\n### Basic Accordion\n\n```tsx\nimport { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from \"@/delta/components/accordion\"\n\nexport default function AccordionDemo() {\n  return (\n    <Accordion type=\"single\" collapsible>\n      <AccordionItem value=\"item-1\">\n        <AccordionTrigger>Is it accessible?</AccordionTrigger>\n        <AccordionContent>\n          Yes. It adheres to the WAI-ARIA design pattern.\n        </AccordionContent>\n      </AccordionItem>\n      <AccordionItem value=\"item-2\">\n        <AccordionTrigger>Is it styled?</AccordionTrigger>\n        <AccordionContent>\n          Yes. It comes with default styles that match the other components.\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n  )\n}\n```\n\n### Bordered Variant with Left Chevron\n\n```tsx\nimport { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from \"@/delta/components/accordion\"\n\nexport default function AccordionDemo() {\n  return (\n    <Accordion variant=\"bordered\" size=\"lg\">\n      <AccordionItem value=\"item-1\">\n        <AccordionTrigger chevronPosition=\"left\">\n          What is Delta Components?\n        </AccordionTrigger>\n        <AccordionContent>\n          Delta Components is a collection of reusable React components built on top of shadcn/ui.\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n  )\n}\n```\n\n### Multiple Items with Right Chevron\n\n```tsx\nimport { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from \"@/delta/components/accordion\"\n\nexport default function AccordionDemo() {\n  return (\n    <Accordion type=\"multiple\">\n      <AccordionItem value=\"item-1\">\n        <AccordionTrigger chevronVariant=\"right\">\n          How do I install?\n        </AccordionTrigger>\n        <AccordionContent>\n          You can install using the CLI command: npx shadcn@latest add \"accordion\"\n        </AccordionContent>\n      </AccordionItem>\n      <AccordionItem value=\"item-2\">\n        <AccordionTrigger chevronVariant=\"right\">\n          Can I customize it?\n        </AccordionTrigger>\n        <AccordionContent>\n          Yes, you can customize the component using the provided props and Tailwind CSS.\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n  )\n}\n```\n\n<ComponentTabs name=\"accordion-neobrutalism\" />\n\n\n## Accessibility\n\nThe Accordion component follows WAI-ARIA guidelines and includes:\n\n- Proper ARIA attributes for expanded/collapsed states\n- Keyboard navigation support\n- Focus management\n- Screen reader compatibility\n- Semantic HTML structure\n\n## Animations\n\nThe component includes smooth animations for opening and closing accordion items. These animations are implemented using CSS transitions and can be customized using Tailwind CSS classes. ",
      "type": "registry:component",
      "target": "content/docs/accordion.mdx"
    },
    {
      "path": "delta/examples/accordion-neobrutalism-demo.tsx",
      "content": "\"use client\"\n\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/delta/components/accordion\"\n\nexport default function AccordionNeobrutalismDemo() {\n  return (\n    <div className=\"w-full max-w-2xl mx-auto p-4\">\n      <Accordion type=\"single\" collapsible defaultOpen variant=\"neobrutalist\">\n        <AccordionItem value=\"item-1\">\n          <AccordionTrigger iconVariant=\"plus-minus\">What is Delta Components?</AccordionTrigger>\n          <AccordionContent>\n            Delta Components is a collection of reusable React components built on top of shadcn/ui.\n            It provides additional features and customization options while maintaining the same\n            design system and developer experience.\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-2\">\n          <AccordionTrigger iconVariant=\"plus-minus\">How do I install it?</AccordionTrigger>\n          <AccordionContent>\n            You can install Delta Components using the CLI command:\n            <code className=\"ml-2 px-2 py-1 bg-muted rounded text-sm\">\n              npx shadcn@latest add \"component-name\"\n            </code>\n          </AccordionContent>\n        </AccordionItem>\n        <AccordionItem value=\"item-3\">\n          <AccordionTrigger iconVariant=\"plus-minus\">Is it accessible?</AccordionTrigger>\n          <AccordionContent>\n            Yes! All Delta Components are built with accessibility in mind, following WAI-ARIA\n            guidelines and best practices. They support keyboard navigation, screen readers,\n            and proper ARIA attributes.\n          </AccordionContent>\n        </AccordionItem>\n      </Accordion>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "delta/examples/accordion-neobrutalism-demo.tsx"
    }
  ]
}
