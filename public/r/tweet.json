{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tweet",
  "type": "registry:component",
  "title": "Tweet",
  "description": "A component for displaying tweet-like content",
  "dependencies": [],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "delta/components/tweet.tsx",
      "content": "import { Suspense } from 'react';\nimport { type Tweet, getTweet } from 'react-tweet/api';\nimport {\n  EmbeddedTweet,\n  TweetNotFound,\n  TweetSkeleton,\n  type TweetProps,\n} from 'react-tweet';\nimport './tweet.css';\n\ninterface TweetArgs {\n  id: string;\n  small?: boolean;\n  className?: string;\n}\n\nasync function fetchTweetWithRetry(\n  id: string,\n  maxRetries = 3,\n  currentAttempt = 1,\n): Promise<Tweet | undefined> {\n  try {\n    const tweet = await getTweet(id);\n    return tweet;\n  } catch (error) {\n    console.error(\n      `Tweet fetch error (attempt ${currentAttempt}/${maxRetries}):`,\n      error,\n    );\n\n    // If we've reached the maximum number of retries, return undefined\n    if (currentAttempt >= maxRetries) {\n      console.warn(`Failed to fetch tweet after ${maxRetries} attempts`);\n      return undefined;\n    }\n\n    // Calculate delay with exponential backoff (300ms, 900ms, 2700ms, etc.)\n    const delay = 300 * Math.pow(3, currentAttempt - 1);\n\n    // Wait for the delay\n    await new Promise((resolve) => setTimeout(resolve, delay));\n\n    // Retry the request\n    return fetchTweetWithRetry(id, maxRetries, currentAttempt + 1);\n  }\n}\n\nconst TweetContent = async ({ id, components }: TweetProps) => {\n  const tweet = id ? await fetchTweetWithRetry(id) : undefined;\n\n  if (!tweet) {\n    return <TweetNotFound />;\n  }\n\n  return <EmbeddedTweet tweet={tweet} components={components} />;\n};\n\nexport const ReactTweet = (props: TweetProps) => (\n  <Suspense fallback={<TweetSkeleton />}>\n    <TweetContent {...props} />\n  </Suspense>\n);\n\nexport async function Tweet({ id, small = false, className = '' }: TweetArgs) {\n  // Apply max-w-xs class only if small prop is true\n  const sizeClass = small ? 'max-w-xs' : '';\n\n  return (\n    <div className={`tweet my-6 ${sizeClass} ${className}`}>\n      <div className=\"flex justify-center\">\n        <ReactTweet id={id} />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/components/tweet.tsx"
    },
    {
      "path": "delta/examples/tweet-basic-demo.tsx",
      "content": "import { Tweet } from \"@/delta/components/tweet\"\n\nexport default function TweetBasicDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <Tweet id=\"896523232098078720\" />\n      <Tweet id=\"896523232098078720\" small />\n    </div>\n  )\n} ",
      "type": "registry:component",
      "target": "delta/examples/tweet-basic-demo.tsx"
    },
    {
      "path": "delta/examples/tweet-styles-demo.tsx",
      "content": "import { Tweet } from \"@/delta/components/tweet\"\n\nexport default function TweetStylesDemo() {\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"text-lg font-medium mb-4\">Default Size</h3>\n        <Tweet id=\"1726130933966856722\" />\n      </div>\n      \n      <div>\n        <h3 className=\"text-lg font-medium mb-4\">Small Size</h3>\n        <Tweet id=\"1726130933966856722\" small />\n      </div>\n      \n      <div>\n        <h3 className=\"text-lg font-medium mb-4\">With Custom Class</h3>\n        <Tweet \n          id=\"1726130933966856722\" \n          className=\"rounded-lg border border-gray-200 dark:border-gray-800 p-4\" \n        />\n      </div>\n    </div>\n  )\n} ",
      "type": "registry:component",
      "target": "delta/examples/tweet-styles-demo.tsx"
    },
    {
      "path": "content/docs/tweet.mdx",
      "content": "export const metadata = {\n  title: 'Tweet | Delta Components',\n  description: 'A component for embedding and displaying tweets with server-side rendering, dark mode support, and responsive design. Built with shadcn/ui and featuring automatic retry mechanisms and accessibility features.',\n\n  // Keywords help with SEO\n  keywords: ['shadcn/ui', 'react', 'tweet component', 'twitter embed', 'social media', 'react components', 'delta components', 'nextjs components', 'tailwind components', 'server-side rendering'],\n\n  // Canonical URL to prevent duplicate content issues\n  alternates: {\n    canonical: 'https://deltacomponents.dev/docs/tweet',\n  },\n\n  // Category helps with structured data\n  category: 'component',\n\n  openGraph: {\n    title: 'Tweet Component | Delta Components',\n    description: 'A component for embedding and displaying tweets with server-side rendering, dark mode support, and responsive design. Built with shadcn/ui and featuring automatic retry mechanisms and accessibility features.',\n    type: 'article',\n    url: 'https://deltacomponents.dev/docs/tweet',\n    images: [\n      {\n        url: 'https://deltacomponents.dev/og/tweet.png',\n        width: 1200,\n        height: 630,\n        alt: 'Tweet Component Preview showing embedded tweets with dark mode support'\n      }\n    ],\n    // Article specific OpenGraph metadata\n    article: {\n      authors: ['Patrick Prunty'],\n      tags: ['UI Components', 'React', 'Shadcn', 'Social Media', 'Twitter', 'Embed'],\n      section: 'Components'\n    },\n    siteName: 'Delta Components'\n  },\n\n  twitter: {\n    card: 'summary_large_image',\n    title: 'Tweet Component | Delta Components',\n    description: 'A component for embedding and displaying tweets with server-side rendering, dark mode support, and responsive design. Built with shadcn/ui and featuring automatic retry mechanisms and accessibility features.',\n    images: ['https://deltacomponents.dev/og/tweet.png'],\n    creator: '@pprunty_',\n    site: '@deltacomponents'\n  },\n\n  // Additional metadata for better SEO\n  robots: {\n    index: true,\n    follow: true,\n    nocache: false,\n    googleBot: {\n      index: true,\n      follow: true,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n      'max-video-preview': -1\n    }\n  }\n}\n\n# Tweet\n\nA component for embedding and displaying tweets with server-side rendering, dark mode support, and responsive design.\n\n## Basic Usage\n\n<ComponentTabs name=\"tweet-basic\" />\n\n<InstallationInstructions componentName=\"tweet\" />\n\n## Styles and Customization\n\nThe Tweet component supports various styling options and sizes.\n\n<ComponentTabs name=\"tweet-styles\" />\n\n## Usage\n\n```tsx\nimport { Tweet } from \"@/components/ui/tweet\"\n\nexport default function TweetDemo() {\n  return (\n    <Tweet id=\"1726130933966856722\" />\n  )\n}\n```\n\n## Props\n\n| Prop | Type | Default | Description |\n|------|------|---------|-------------|\n| `id` | `string` | - | The ID of the tweet to display |\n| `small` | `boolean` | `false` | Whether to display the tweet in a smaller size |\n| `className` | `string` | - | Additional CSS classes to apply to the tweet container |\n\n## Features\n\n- Server-side rendering for better performance\n- Dark mode support\n- Responsive design\n- Automatic retry mechanism for failed requests\n- Loading states and error handling\n- Custom styling support\n\n## Accessibility\n\nThe Tweet component preserves Twitter's built-in accessibility features and maintains proper contrast in both light and dark modes. ",
      "type": "registry:component",
      "target": "content/docs/tweet.mdx"
    }
  ]
}