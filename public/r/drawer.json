{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "drawer",
  "type": "registry:component",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "dependencies": [
    "vaul",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "registry/components/drawer.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { Drawer as VaulDrawer } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Add this style tag for the hide-vaul-after class:\nif (typeof window !== \"undefined\") {\n  if (!document.getElementById(\"hide-vaul-after-style\")) {\n    const style = document.createElement(\"style\")\n    style.id = \"hide-vaul-after-style\"\n    style.innerHTML = `.hide-vaul-after::after { display: none !important; }`\n    document.head.appendChild(style)\n  }\n}\n\nconst contentVariants = cva(\"flex flex-col outline-none\", {\n  variants: {\n    position: {\n      top: \"data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n      bottom:\n        \"data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n      left: \"data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left\",\n      right:\n        \"data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right\",\n    },\n    size: {\n      default: \"\",\n      sm: \"\",\n      lg: \"\",\n      xl: \"\",\n      full: \"\",\n    },\n  },\n  defaultVariants: {\n    position: \"bottom\",\n    size: \"default\",\n  },\n})\n\ninterface DrawerOptions {\n  shouldScaleBackground?: boolean\n  container?: HTMLElement | null\n  direction?: \"top\" | \"bottom\" | \"left\" | \"right\"\n  scrollable?: boolean\n  size?: \"sm\" | \"default\" | \"lg\" | \"xl\" | \"full\"\n  closeOnClickOutside?: boolean\n  hasOverlay?: boolean\n  overlayClassName?: string\n  initialHeight?: number\n  initialTransform?: string\n  nested?: boolean\n}\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  container,\n  direction = \"bottom\",\n  scrollable = false,\n  size = \"default\",\n  closeOnClickOutside = true,\n  hasOverlay = true,\n  overlayClassName,\n  initialHeight,\n  initialTransform,\n  nested = false,\n  ...props\n}: React.ComponentProps<typeof VaulDrawer.Root> & DrawerOptions) => {\n  const DrawerRoot = nested ? VaulDrawer.NestedRoot : VaulDrawer.Root\n\n  return (\n    <DrawerRoot\n      shouldScaleBackground={shouldScaleBackground}\n      container={container}\n      direction={direction}\n      dismissible={closeOnClickOutside}\n      {...props}\n    />\n  )\n}\nDrawer.displayName = \"Drawer\"\n\nexport interface DrawerTriggerProps\n  extends React.ComponentPropsWithoutRef<typeof VaulDrawer.Trigger> {}\n\nconst DrawerTrigger = React.forwardRef<\n  React.ElementRef<typeof VaulDrawer.Trigger>,\n  DrawerTriggerProps\n>(({ className, ...props }, ref) => (\n  <VaulDrawer.Trigger ref={ref} className={cn(\"\", className)} {...props} />\n))\nDrawerTrigger.displayName = \"DrawerTrigger\"\n\nexport interface DrawerPortalProps\n  extends React.ComponentPropsWithoutRef<typeof VaulDrawer.Portal> {}\n\nconst DrawerPortal = ({ ...props }: DrawerPortalProps) => (\n  <VaulDrawer.Portal {...props} />\n)\nDrawerPortal.displayName = \"DrawerPortal\"\n\nexport interface DrawerOverlayProps\n  extends React.ComponentPropsWithoutRef<typeof VaulDrawer.Overlay> {}\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof VaulDrawer.Overlay>,\n  DrawerOverlayProps\n>(({ className, ...props }, ref) => (\n  <VaulDrawer.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/40\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = \"DrawerOverlay\"\n\nexport interface DrawerContentProps\n  extends React.ComponentPropsWithoutRef<typeof VaulDrawer.Content>,\n    VariantProps<typeof contentVariants> {\n  scrollable?: boolean\n  initialTransform?: string\n}\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof VaulDrawer.Content>,\n  DrawerContentProps\n>(\n  (\n    {\n      className,\n      position,\n      size,\n      scrollable = false,\n      style,\n      initialTransform,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const combinedStyle = initialTransform\n      ? ({\n          ...style,\n          \"--initial-transform\": initialTransform,\n        } as React.CSSProperties)\n      : style\n\n    return (\n      <VaulDrawer.Content\n        ref={ref}\n        style={combinedStyle}\n        className={cn(contentVariants({ position, size }), className)}\n        {...props}\n      >\n        <VaulDrawer.Title className=\"sr-only\">Drawer Content</VaulDrawer.Title>\n        {children}\n      </VaulDrawer.Content>\n    )\n  }\n)\nDrawerContent.displayName = \"DrawerContent\"\n\nexport interface DrawerBodyProps extends React.HTMLAttributes<HTMLDivElement> {\n  scrollable?: boolean\n}\n\nconst DrawerBody = React.forwardRef<HTMLDivElement, DrawerBodyProps>(\n  ({ className, scrollable = true, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\"flex-1\", scrollable && \"overflow-y-auto\", className)}\n      {...props}\n    />\n  )\n)\nDrawerBody.displayName = \"DrawerBody\"\n\nexport interface DrawerHeaderProps\n  extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst DrawerHeader = ({ className, ...props }: DrawerHeaderProps) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nexport interface DrawerFooterProps\n  extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst DrawerFooter = ({ className, ...props }: DrawerFooterProps) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nexport interface DrawerTitleProps\n  extends React.ComponentPropsWithoutRef<typeof VaulDrawer.Title> {}\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof VaulDrawer.Title>,\n  DrawerTitleProps\n>(({ className, ...props }, ref) => (\n  <VaulDrawer.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = \"DrawerTitle\"\n\nexport interface DrawerDescriptionProps\n  extends React.ComponentPropsWithoutRef<typeof VaulDrawer.Description> {}\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof VaulDrawer.Description>,\n  DrawerDescriptionProps\n>(({ className, ...props }, ref) => (\n  <VaulDrawer.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = \"DrawerDescription\"\n\nexport interface DrawerCloseProps\n  extends React.ComponentPropsWithoutRef<typeof VaulDrawer.Close> {}\n\nconst DrawerClose = React.forwardRef<\n  React.ElementRef<typeof VaulDrawer.Close>,\n  DrawerCloseProps\n>(({ className, ...props }, ref) => (\n  <VaulDrawer.Close ref={ref} className={cn(\"\", className)} {...props} />\n))\nDrawerClose.displayName = \"DrawerClose\"\n\nexport interface DrawerHandleProps\n  extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst DrawerHandle = React.forwardRef<HTMLDivElement, DrawerHandleProps>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\"mx-auto mt-2 h-1.5 w-12 rounded-full bg-muted\", className)}\n      {...props}\n    />\n  )\n)\nDrawerHandle.displayName = \"DrawerHandle\"\n\nexport {\n  Drawer,\n  DrawerTrigger,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerBody,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerClose,\n  DrawerHandle,\n}\n",
      "type": "registry:component",
      "target": "components/delta/drawer.tsx"
    }
  ]
}