{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "otp-input-validation-demo",
  "type": "registry:block",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "registryDependencies": ["https://deltacomponents.dev/r/otp-input.json"],
  "files": [
    {
      "path": "registry/examples/otp-input-validation-demo.tsx",
      "content": "\"use client\"\n\nimport React, { useState } from \"react\"\nimport { OtpInput } from \"@/delta/otp-input\"\nimport { z } from \"zod\"\n\nimport { Button } from \"@/components/ui/button\"\n\n// Different validation schemas for different input types\nconst numericSchema = z\n  .string()\n  .length(6, \"Must be 6 digits\")\n  .regex(/^\\d+$/, \"Only numbers allowed\")\nconst alphabeticSchema = z\n  .string()\n  .length(4, \"Must be 4 letters\")\n  .regex(/^[a-zA-Z]+$/, \"Only letters allowed\")\nconst alphanumericSchema = z\n  .string()\n  .length(6, \"Must be 6 characters\")\n  .regex(/^[a-zA-Z0-9]+$/, \"Letters and numbers only\")\n\nexport default function OtpInputValidationDemo() {\n  const [numericValue, setNumericValue] = useState(\"\")\n  const [alphabeticValue, setAlphabeticValue] = useState(\"\")\n  const [alphanumericValue, setAlphanumericValue] = useState(\"\")\n  const [numericSuccess, setNumericSuccess] = useState(false)\n  const [alphabeticSuccess, setAlphabeticSuccess] = useState(false)\n  const [alphanumericSuccess, setAlphanumericSuccess] = useState(false)\n\n  const handleNumericComplete = (value: string) => {\n    const result = numericSchema.safeParse(value)\n    if (result.success) {\n      setNumericSuccess(true)\n      setTimeout(() => setNumericSuccess(false), 2000)\n    }\n  }\n\n  const handleAlphabeticComplete = (value: string) => {\n    const result = alphabeticSchema.safeParse(value)\n    if (result.success) {\n      setAlphabeticSuccess(true)\n      setTimeout(() => setAlphabeticSuccess(false), 2000)\n    }\n  }\n\n  const handleAlphanumericComplete = (value: string) => {\n    const result = alphanumericSchema.safeParse(value)\n    if (result.success) {\n      setAlphanumericSuccess(true)\n      setTimeout(() => setAlphanumericSuccess(false), 2000)\n    }\n  }\n\n  const resetAll = () => {\n    setNumericValue(\"\")\n    setAlphabeticValue(\"\")\n    setAlphanumericValue(\"\")\n    setNumericSuccess(false)\n    setAlphabeticSuccess(false)\n    setAlphanumericSuccess(false)\n  }\n\n  return (\n    <div className=\"w-full max-w-2xl mx-auto space-y-8 p-0\">\n      <div className=\"text-center space-y-2\">\n        <h2 className=\"text-2xl font-bold\">OTP Input Validation</h2>\n        <p className=\"text-muted-foreground\">\n          Try entering wrong character types to see error animations. Complete\n          valid codes to see success animations.\n        </p>\n      </div>\n\n      <div className=\"space-y-6\">\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-semibold\">Numeric Only (6 digits)</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Try entering letters to see error animation\n          </p>\n          <OtpInput\n            label=\"Numeric OTP\"\n            name=\"numericOtp\"\n            length={6}\n            inputType=\"numeric\"\n            value={numericValue}\n            success={numericSuccess}\n            schema={numericSchema}\n            onChange={setNumericValue}\n            onComplete={handleNumericComplete}\n            hint=\"Enter only numbers (0-9)\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-semibold\">Alphabetic Only (4 letters)</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Try entering numbers to see error animation\n          </p>\n          <OtpInput\n            label=\"Alphabetic Code\"\n            name=\"alphabeticCode\"\n            length={4}\n            inputType=\"alphabetic\"\n            value={alphabeticValue}\n            success={alphabeticSuccess}\n            schema={alphabeticSchema}\n            onChange={setAlphabeticValue}\n            onComplete={handleAlphabeticComplete}\n            hint=\"Enter only letters (A-Z)\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-semibold\">Alphanumeric (6 characters)</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Try entering special characters to see error animation\n          </p>\n          <OtpInput\n            label=\"Alphanumeric Code\"\n            name=\"alphanumericCode\"\n            length={6}\n            inputType=\"alphanumeric\"\n            value={alphanumericValue}\n            success={alphanumericSuccess}\n            schema={alphanumericSchema}\n            onChange={setAlphanumericValue}\n            onComplete={handleAlphanumericComplete}\n            hint=\"Enter letters and numbers only\"\n          />\n        </div>\n      </div>\n\n      <div className=\"flex justify-center\">\n        <Button onClick={resetAll} variant=\"outline\">\n          Reset All\n        </Button>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:block",
      "target": "/delta/otp-input-validation-demo.tsx"
    }
  ]
}
