{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-input",
  "type": "registry:component",
  "dependencies": ["zod", "date-fns"],
  "files": [
    {
      "path": "registry/inputs/date-input.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { format, addYears } from 'date-fns';\nimport { CalendarIcon } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Calendar } from '@/components/ui/calendar';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport type { z } from 'zod';\n\nexport interface DateInputProps {\n  /** The label for the date field */\n  label: string;\n  /** The name of the date field (used for form submission) */\n  name: string;\n  /** Optional description text to display below the label */\n  description?: string;\n  /** Optional hint text to display below the date picker */\n  hint?: string;\n  /** Error message to display (typically from Zod validation) */\n  error?: string;\n  /** Whether the field is required */\n  required?: boolean;\n  /** Whether the field is in a loading/pending state */\n  pending?: boolean;\n  /** Default selected date */\n  defaultValue?: Date;\n  /** Controlled selected date */\n  value?: Date;\n  /** Placeholder text when no date is selected */\n  placeholder?: string;\n  /** Format to display the selected date (default: PP) */\n  dateFormat?: string;\n  /** Container className for the entire component */\n  containerClassName?: string;\n  /** Trigger button className */\n  triggerClassName?: string;\n  /** Label className */\n  labelClassName?: string;\n  /** Label variant - 'default' or 'muted' */\n  labelVariant?: 'default' | 'muted';\n  /** Date picker variant - 'default' or 'pill' */\n  variant?: 'default' | 'pill';\n  /** Whether to show a colored border (only applies to pill variant) */\n  coloredBorder?: boolean;\n  /** Zod schema for validation (optional - can be handled at the form level) */\n  schema?: z.ZodType<Date>;\n  /** Callback when validation occurs */\n  onValidate?: (isValid: boolean, value: Date, error?: string) => void;\n  /** Callback when date changes */\n  onValueChange?: (value: Date | undefined) => void;\n  /** ID for the date picker */\n  id?: string;\n  /** Whether the date picker is disabled */\n  disabled?: boolean;\n  /** Min date that can be selected */\n  minDate?: Date;\n  /** Max date that can be selected */\n  maxDate?: Date;\n}\n\n/**\n * DateInput component that integrates with Zod validation\n */\nexport function DateInput({\n  label,\n  name,\n  description,\n  hint,\n  error,\n  required = false,\n  pending = false,\n  defaultValue,\n  value,\n  placeholder = 'Select a date',\n  dateFormat = 'PPP',\n  containerClassName,\n  triggerClassName,\n  labelClassName,\n  labelVariant = 'default',\n  variant = 'default',\n  coloredBorder = false,\n  schema,\n  onValidate,\n  onValueChange,\n  id = name,\n  disabled = false,\n  minDate,\n  maxDate,\n}: DateInputProps) {\n  const [localError, setLocalError] = React.useState<string | undefined>(error);\n  const hasError = !!localError || !!error;\n  const errorId = `error-${id}`;\n  const hintId = `hint-${id}`;\n\n  // Determine if component is controlled or uncontrolled\n  const isControlled = value !== undefined;\n  const [date, setDate] = React.useState<Date | undefined>(\n    isControlled ? value : defaultValue,\n  );\n\n  // Calculate a far future date (100 years from now) to use as default maxDate\n  const farFutureDate = React.useMemo(() => addYears(new Date(), 100), []);\n\n  // Update local error when prop changes\n  React.useEffect(() => {\n    setLocalError(error);\n  }, [error]);\n\n  // Update date when controlled value changes\n  React.useEffect(() => {\n    if (isControlled) {\n      setDate(value);\n    }\n  }, [isControlled, value]);\n\n  // Handle validation with the provided schema\n  const validateDate = React.useCallback(\n    (value: Date | undefined) => {\n      if (!schema || !value) return;\n\n      const result = schema.safeParse(value);\n      if (!result.success) {\n        const errorMessage = result.error.errors[0]?.message || 'Invalid date';\n        setLocalError(errorMessage);\n        onValidate?.(false, value, errorMessage);\n      } else {\n        setLocalError(undefined);\n        onValidate?.(true, value);\n      }\n    },\n    [schema, onValidate],\n  );\n\n  // Handle date change\n  const handleDateChange = (newDate: Date | undefined) => {\n    setDate(newDate);\n\n    // If we have a schema and a date, validate on change\n    if (schema && newDate) {\n      validateDate(newDate);\n    }\n\n    // Call the original onValueChange if provided\n    onValueChange?.(newDate);\n  };\n\n  // Determine the date constraint function based on provided min/max dates\n  const getDateConstraints = React.useCallback(\n    (date: Date) => {\n      if (minDate && !maxDate) {\n        // Only minDate provided, use far future date as maxDate\n        return date < minDate || date > farFutureDate;\n      } else if (minDate && maxDate) {\n        // Both minDate and maxDate provided\n        return date < minDate || date > maxDate;\n      } else if (!minDate && maxDate) {\n        // Only maxDate provided\n        return date > maxDate;\n      }\n      // No constraints\n      return false;\n    },\n    [minDate, maxDate, farFutureDate],\n  );\n\n  return (\n    <div\n      className={cn('group/field grid gap-2', containerClassName)}\n      data-invalid={hasError}\n    >\n      <label\n        htmlFor={id}\n        className={cn(\n          'text-sm font-normal leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-data-[invalid=true]/field:text-destructive',\n          labelVariant === 'muted' && 'text-muted-foreground',\n          labelClassName,\n        )}\n      >\n        {label}\n        {required && <span aria-hidden=\"true\"> *</span>}\n      </label>\n\n      {description && (\n        <p className=\"text-xs text-muted-foreground\">{description}</p>\n      )}\n\n      <Popover>\n        <PopoverTrigger asChild>\n          <Button\n            id={id}\n            variant=\"outline\"\n            disabled={pending || disabled}\n            className={cn(\n              'h-[46px] md:text-md text-md bg-background',\n              'w-full justify-start text-left font-normal',\n              !date && 'text-muted-foreground',\n              // Default variant styling\n              variant === 'default' &&\n                'shadow-[0px_2px_2px_rgba(0,0,0,0.03),_0px_4px_7px_rgba(0,0,0,0.02)]',\n\n              // Pill variant styling - less rounded\n              variant === 'pill' && 'bg-muted border-0 rounded-lg h-12 px-4',\n              variant === 'pill' && coloredBorder && 'border-2 border-primary',\n\n              // Error styling for both variants\n              'group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive',\n              triggerClassName,\n            )}\n            aria-invalid={hasError}\n            aria-errormessage={hasError ? errorId : undefined}\n            aria-describedby={hint ? hintId : undefined}\n            aria-required={required}\n          >\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            {date ? format(date, dateFormat) : <span>{placeholder}</span>}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\" align=\"start\">\n          <Calendar\n            mode=\"single\"\n            selected={date}\n            onSelect={handleDateChange}\n            disabled={\n              disabled ||\n              pending ||\n              (minDate || maxDate ? getDateConstraints : undefined)\n            }\n            initialFocus\n          />\n        </PopoverContent>\n      </Popover>\n\n      {/* Hidden input for form submission */}\n      <input type=\"hidden\" name={name} value={date ? date.toISOString() : ''} />\n\n      {hint && !hasError && (\n        <p id={hintId} className=\"text-xs text-muted-foreground mt-1\">\n          {hint}\n        </p>\n      )}\n\n      {hasError && (\n        <p id={errorId} className=\"text-destructive text-xs\">\n          {localError || error}\n        </p>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}
