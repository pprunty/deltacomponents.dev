{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "otp-input",
  "type": "registry:component",
  "title": "Otp Input",
  "description": "A component for otp-input",
  "dependencies": ["zod"],
  "registryDependencies": ["utils"],
  "files": [
    {
      "path": "delta/components/otp-input.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/lib/utils';\nimport type { z } from 'zod';\n\nexport interface OTPInputProps {\n  /** The label for the OTP input field */\n  label: string;\n  /** The name of the OTP input field (used for form submission) */\n  name: string;\n  /** Optional description text to display below the label */\n  description?: string;\n  /** Optional hint text to display below the OTP input */\n  hint?: string;\n  /** Error message to display (typically from Zod validation) */\n  error?: string;\n  /** Whether the field is required */\n  required?: boolean;\n  /** Whether the field is in a loading/pending state */\n  pending?: boolean;\n  /** Default value for the OTP input */\n  defaultValue?: string;\n  /** Controlled value */\n  value?: string;\n  /** Container className for the entire component */\n  containerClassName?: string;\n  /** Label className for customizing the label */\n  labelClassName?: string;\n  /** Label variant - 'default' or 'muted' */\n  labelVariant?: 'default' | 'muted';\n  /** Input variant - 'default' or 'pill' */\n  variant?: 'default' | 'pill';\n  /** Whether to show a colored border (only applies to pill variant) */\n  coloredBorder?: boolean;\n  /** Zod schema for validation (optional - can be handled at the form level) */\n  schema?: z.ZodType<string>;\n  /** Callback when validation occurs */\n  onValidate?: (isValid: boolean, value: string, error?: string) => void;\n  /** Callback when OTP value changes */\n  onChange?: (value: string) => void;\n  /** Callback when OTP is completed */\n  onComplete?: (value: string) => void;\n  /** ID for the OTP input */\n  id?: string;\n  /** Whether the OTP input is disabled */\n  disabled?: boolean;\n  /** Length of the OTP code */\n  length?: number;\n  /** Character to display when input is masked */\n  maskChar?: string;\n  /** Whether to mask the input (like a password) */\n  mask?: boolean;\n  /** Whether to auto-focus the first input on mount */\n  autoFocus?: boolean;\n  /** Whether to render with a separator between groups */\n  separator?: boolean;\n  /** Size of each group of digits */\n  groupSize?: number;\n  /** Whether to automatically submit the form when OTP is completed */\n  autoSubmit?: boolean;\n}\n\n/**\n * OTPInput component that integrates with Zod validation\n */\nexport function OTPInput({\n  label,\n  name,\n  description,\n  hint,\n  error,\n  required = false,\n  pending = false,\n  defaultValue = '',\n  value,\n  containerClassName,\n  labelClassName,\n  labelVariant = 'default',\n  variant = 'default',\n  coloredBorder = false,\n  schema,\n  onValidate,\n  onChange,\n  onComplete,\n  id = name,\n  disabled = false,\n  length = 6,\n  maskChar = 'â€¢',\n  mask = false,\n  autoFocus = false,\n  separator = false,\n  groupSize = 3,\n  autoSubmit = false,\n}: OTPInputProps) {\n  const [localError, setLocalError] = React.useState<string | undefined>(error);\n  const [otpValue, setOtpValue] = React.useState<string[]>(\n    (value || defaultValue || '')\n      .split('')\n      .slice(0, length)\n      .concat(Array(length).fill(''))\n      .slice(0, length),\n  );\n  const inputRefs = React.useRef<(HTMLInputElement | null)[]>([]);\n  const hasError = !!localError || !!error;\n  const errorId = `error-${id}`;\n  const hintId = `hint-${id}`;\n  const formRef = React.useRef<HTMLFormElement | null>(null);\n\n  // Determine if component is controlled or uncontrolled\n  const isControlled = value !== undefined;\n\n  // Update local error when prop changes\n  React.useEffect(() => {\n    setLocalError(error);\n  }, [error]);\n\n  // Update OTP value when controlled value changes\n  React.useEffect(() => {\n    if (isControlled && value !== undefined) {\n      setOtpValue(\n        value\n          .split('')\n          .slice(0, length)\n          .concat(Array(length).fill(''))\n          .slice(0, length),\n      );\n    }\n  }, [isControlled, value, length]);\n\n  // Find the closest form element\n  React.useEffect(() => {\n    if (autoSubmit) {\n      const input = inputRefs.current[0];\n      if (input) {\n        let element: HTMLElement | null = input;\n        while (element && element.tagName !== 'FORM') {\n          element = element.parentElement;\n        }\n        formRef.current = element as HTMLFormElement;\n      }\n    }\n  }, [autoSubmit]);\n\n  // Handle validation with the provided schema\n  const validateOTP = React.useCallback(\n    (value: string) => {\n      if (!schema) return;\n\n      // Only validate if all digits are entered or if the form has been submitted\n      if (value.length === length) {\n        const result = schema.safeParse(value);\n        if (!result.success) {\n          const errorMessage =\n            result.error.errors[0]?.message || 'Invalid code';\n          setLocalError(errorMessage);\n          onValidate?.(false, value, errorMessage);\n        } else {\n          setLocalError(undefined);\n          onValidate?.(true, value);\n        }\n      } else {\n        // Clear error while user is still typing\n        setLocalError(undefined);\n      }\n    },\n    [schema, onValidate, length],\n  );\n\n  // Handle input change\n  const handleChange = (\n    index: number,\n    e: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const value = e.target.value;\n\n    // Handle paste event (detected by multiple characters)\n    if (value.length > 1) {\n      handlePaste(index, value);\n      return;\n    }\n\n    // Update the OTP value\n    const newOtpValue = [...otpValue];\n    newOtpValue[index] = value;\n    setOtpValue(newOtpValue);\n\n    // Move focus to the next input if a value was entered\n    if (value && index < length - 1) {\n      inputRefs.current[index + 1]?.focus();\n    }\n\n    // Call onChange with the new value - ensure it's a clean string\n    const newValue = newOtpValue.join('');\n    onChange?.(newValue);\n\n    // Check if OTP is complete\n    if (newOtpValue.filter(Boolean).length === length) {\n      onComplete?.(newValue);\n\n      // Auto-submit the form if enabled\n      if (autoSubmit && formRef.current) {\n        setTimeout(() => {\n          formRef.current?.requestSubmit();\n        }, 100);\n      }\n    }\n  };\n\n  // Handle paste event\n  const handlePaste = (startIndex: number, pastedValue: string) => {\n    // Clean the pasted value to only include digits and letters\n    const cleanedValue = pastedValue.replace(/\\s/g, '');\n\n    // Create a new OTP value array\n    const newOtpValue = [...otpValue];\n\n    // Fill in the OTP value with the pasted characters\n    for (\n      let i = 0;\n      i < Math.min(cleanedValue.length, length - startIndex);\n      i++\n    ) {\n      newOtpValue[startIndex + i] = cleanedValue[i];\n    }\n\n    setOtpValue(newOtpValue);\n\n    // Focus the next empty input or the last input\n    const nextEmptyIndex = newOtpValue.findIndex(\n      (v, i) => i >= startIndex && !v,\n    );\n    if (nextEmptyIndex !== -1 && nextEmptyIndex < length) {\n      inputRefs.current[nextEmptyIndex]?.focus();\n    } else {\n      inputRefs.current[length - 1]?.focus();\n    }\n\n    // Call onChange with the new value\n    const newValue = newOtpValue.join('');\n    onChange?.(newValue);\n\n    // Validate if we have a schema\n    if (schema) {\n      validateOTP(newValue);\n    }\n\n    // Check if OTP is complete and trigger onComplete only once\n    if (newOtpValue.every((v) => v) && newOtpValue.length === length) {\n      onComplete?.(newValue);\n    }\n  };\n\n  // Handle key down event\n  const handleKeyDown = (\n    index: number,\n    e: React.KeyboardEvent<HTMLInputElement>,\n  ) => {\n    // Move focus to the previous input on backspace if the current input is empty\n    if (e.key === 'Backspace') {\n      if (!otpValue[index] && index > 0) {\n        inputRefs.current[index - 1]?.focus();\n\n        // Clear the previous input\n        const newOtpValue = [...otpValue];\n        newOtpValue[index - 1] = '';\n        setOtpValue(newOtpValue);\n\n        // Call onChange with the new value\n        onChange?.(newOtpValue.join(''));\n      }\n\n      // Don't prevent default for backspace when there's content to delete\n      if (!otpValue[index]) {\n        e.preventDefault();\n      }\n    }\n\n    // Prevent arrow key navigation\n    else if (\n      e.key === 'ArrowRight' ||\n      e.key === 'ArrowLeft' ||\n      e.key === 'ArrowUp' ||\n      e.key === 'ArrowDown'\n    ) {\n      e.preventDefault();\n    }\n  };\n\n  // Handle focus event\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    // Select the input content on focus\n    e.target.select();\n  };\n\n  // Create input groups based on groupSize\n  const inputGroups = [];\n  for (let i = 0; i < length; i += groupSize) {\n    const group = [];\n    for (let j = 0; j < groupSize && i + j < length; j++) {\n      group.push(i + j);\n    }\n    inputGroups.push(group);\n  }\n\n  return (\n    <div\n      className={cn('group/field grid gap-2', containerClassName)}\n      data-invalid={hasError}\n    >\n      <label\n        htmlFor={`${id}-0`}\n        className={cn(\n          'text-sm font-normal leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-data-[invalid=true]/field:text-destructive',\n          labelVariant === 'muted' && 'text-muted-foreground',\n          labelClassName,\n        )}\n      >\n        {label}\n        {required && <span aria-hidden=\"true\"> *</span>}\n      </label>\n\n      {description && (\n        <p className=\"text-sm text-muted-foreground\">{description}</p>\n      )}\n\n      <div className=\"flex items-center justify-center space-x-1.5 sm:space-x-2\">\n        {inputGroups.map((group, groupIndex) => (\n          <React.Fragment key={`group-${groupIndex}`}>\n            <div className=\"flex items-center space-x-1.5 sm:space-x-2\">\n              {group.map((index) => (\n                <div key={`input-${index}`} className=\"relative\">\n                  <input\n                    ref={(el: HTMLInputElement | null) => {\n                      if (inputRefs.current) {\n                        inputRefs.current[index] = el;\n                      }\n                    }}\n                    id={index === 0 ? `${id}-0` : `${id}-${index}`}\n                    name={index === 0 ? name : `${name}-${index}`}\n                    type=\"text\"\n                    inputMode=\"numeric\"\n                    pattern=\"[0-9]*\"\n                    maxLength={1}\n                    autoComplete=\"off\" // Add this line to prevent browser from saving input\n                    value={mask && otpValue[index] ? maskChar : otpValue[index]}\n                    onChange={(e) => handleChange(index, e)}\n                    onKeyDown={(e) => handleKeyDown(index, e)}\n                    onFocus={handleFocus}\n                    disabled={pending || disabled}\n                    aria-invalid={hasError}\n                    aria-errormessage={hasError ? errorId : undefined}\n                    aria-describedby={hint ? hintId : undefined}\n                    aria-required={required}\n                    autoFocus={autoFocus && index === 0}\n                    className={cn(\n                      'w-9 h-10 sm:w-10 sm:h-12 bg-background text-center text-base sm:text-lg font-medium',\n                      'focus:outline-none focus:ring-2 focus:ring-[#4E90F9] dark:ring-offset-black ring-offset-white',\n                      // Default variant styling\n                      variant === 'default' &&\n                        'border border-input rounded-md shadow-[0px_2px_2px_rgba(0,0,0,0.03),_0px_4px_7px_rgba(0,0,0,0.02)]',\n                      // Pill variant styling\n                      variant === 'pill' &&\n                        'bg-muted border-0 rounded-lg focus:ring-offset-2',\n                      variant === 'pill' &&\n                        coloredBorder &&\n                        'border-2 border-primary',\n                      // Error styling for both variants\n                      'group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive',\n                    )}\n                  />\n                  {/* Animated caret for empty inputs */}\n                </div>\n              ))}\n            </div>\n            {separator && groupIndex < inputGroups.length - 1 && (\n              <div className=\"text-muted-foreground text-base sm:text-lg font-medium\">\n                -\n              </div>\n            )}\n          </React.Fragment>\n        ))}\n      </div>\n\n      {/* Hidden input for form submission with the complete value */}\n      <input\n        type=\"hidden\"\n        name={name}\n        value={otpValue.join('')}\n        data-testid={`${id}-hidden`}\n      />\n\n      {hint && !hasError && (\n        <p id={hintId} className=\"text-xs text-muted-foreground mt-1\">\n          {hint}\n        </p>\n      )}\n\n      {hasError && (\n        <p id={errorId} className=\"text-destructive text-sm\">\n          {localError || error}\n        </p>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/components/otp-input.tsx"
    },
    {
      "path": "delta/examples/otp-input-basic-demo.tsx",
      "content": "\"use client\"\n\nimport { OTPInput } from \"@/delta/components/otp-input\"\n\nexport default function OtpInputBasicDemo() {\n  return (\n    <div className=\"flex flex-col items-center justify-center p-6 rounded-lg space-y-4\">\n      <OTPInput\n        label=\"Verification Code\"\n        name=\"verificationCode\"\n        length={6}\n        required\n        separator\n        groupSize={3}\n        hint=\"Enter the 6-digit verification code\"\n      />\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "delta/examples/otp-input-basic-demo.tsx"
    },
    {
      "path": "content/docs/otp-input.mdx",
      "content": "export const metadata = {\n  title: 'OTP Input | Delta Components',\n  description: 'A secure and customizable OTP (One-Time Password) input component with validation, masking, and accessibility features. Built with shadcn/ui and featuring multiple variants and customization options.',\n\n  // Keywords help with SEO\n  keywords: ['shadcn/ui', 'react', 'otp input', 'one-time password', 'verification code', 'ui components', 'react components', 'delta components', 'nextjs components', 'tailwind components'],\n\n  // Canonical URL to prevent duplicate content issues\n  alternates: {\n    canonical: 'https://deltacomponents.dev/docs/otp-input',\n  },\n\n  // Category helps with structured data\n  category: 'component',\n\n  openGraph: {\n    title: 'OTP Input Component | Delta Components',\n    description: 'A secure and customizable OTP (One-Time Password) input component with validation, masking, and accessibility features. Built with shadcn/ui and featuring multiple variants and customization options.',\n    type: 'article',\n    url: 'https://deltacomponents.dev/docs/otp-input',\n    images: [\n      {\n        url: 'https://deltacomponents.dev/og/otp-input.png',\n        width: 1200,\n        height: 630,\n        alt: 'OTP Input Component Preview showing default and pill variants with validation states'\n      }\n    ],\n    // Article specific OpenGraph metadata\n    article: {\n      authors: ['Patrick Prunty'],\n      tags: ['UI Components', 'React', 'Shadcn', 'OTP', 'Verification'],\n      section: 'Components'\n    },\n    siteName: 'Delta Components'\n  },\n\n  twitter: {\n    card: 'summary_large_image',\n    title: 'OTP Input Component | Delta Components',\n    description: 'A secure and customizable OTP (One-Time Password) input component with validation, masking, and accessibility features.',\n    images: ['https://deltacomponents.dev/og/otp-input.png'],\n    creator: '@pprunty_',\n    site: '@deltacomponents'\n  },\n\n  // Additional metadata for better SEO\n  robots: {\n    index: true,\n    follow: true,\n    nocache: false,\n    googleBot: {\n      index: true,\n      follow: true,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n      'max-video-preview': -1\n    }\n  }\n}\n\n# OTP Input\n\nA secure and customizable OTP (One-Time Password) input component with validation, masking, and accessibility features.\n\n## Basic Usage\n\n<ComponentTabs name=\"otp-input-basic\" />\n\n<InstallationInstructions componentName=\"otp-input\" />\n\n## Props\n\n<Table>\n  <TableHeader>\n    <TableRow>\n      <TableHead>Prop</TableHead>\n      <TableHead>Type</TableHead>\n      <TableHead>Default</TableHead>\n      <TableHead>Description</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell>`name`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>Required</TableCell>\n      <TableCell>The name of the OTP input field (used for form submission)</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`description`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Optional description text to display below the label</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`hint`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Optional hint text to display below the OTP input</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`error`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Error message to display (typically from Zod validation)</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`required`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether the field is required</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`pending`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether the field is in a loading/pending state</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`variant`</TableCell>\n      <TableCell>`'default' \\| 'pill'`</TableCell>\n      <TableCell>`'default'`</TableCell>\n      <TableCell>Input variant</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`coloredBorder`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether to show a colored border (only applies to pill variant)</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`length`</TableCell>\n      <TableCell>`number`</TableCell>\n      <TableCell>`6`</TableCell>\n      <TableCell>Length of the OTP code</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`mask`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether to mask the input (like a password)</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`maskChar`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>`'â€¢'`</TableCell>\n      <TableCell>Character to display when input is masked</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`separator`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether to render with a separator between groups</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`groupSize`</TableCell>\n      <TableCell>`number`</TableCell>\n      <TableCell>`3`</TableCell>\n      <TableCell>Size of each group of digits</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`autoSubmit`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether to automatically submit the form when OTP is completed</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n\n## Usage\n\n```tsx\nimport { OTPInput } from \"@/components/ui/otp-input\"\n\nexport default function OTPInputDemo() {\n  return (\n    <OTPInput \n      label=\"Verification Code\"\n      name=\"otp\"\n      length={6}\n      required\n    />\n  )\n}\n```\n\n## Validation\n\nThe component integrates with Zod for validation:\n\n```tsx\nimport { OTPInput } from \"@/components/ui/otp-input\"\nimport { z } from \"zod\"\n\nconst otpSchema = z.string().length(6).regex(/^\\d+$/)\n\nexport default function OTPInputDemo() {\n  return (\n    <OTPInput \n      label=\"Verification Code\"\n      name=\"otp\"\n      schema={otpSchema}\n      onValidate={(isValid, value) => {\n        console.log('Validation result:', isValid, value)\n      }}\n    />\n  )\n}\n```\n\n## Accessibility\n\nThe OTP Input component follows WAI-ARIA guidelines and includes proper ARIA attributes for accessibility. It supports keyboard navigation, screen readers, and provides clear error messaging.\n",
      "type": "registry:component",
      "target": "content/docs/otp-input.mdx"
    },
    {
      "path": "delta/examples/otp-input-variants-demo.tsx",
      "content": "\"use client\"\n\nimport { OTPInput } from \"@/delta/components/otp-input\"\n\nexport default function OtpInputVariantsDemo() {\n  return (\n    <div className=\"flex flex-col space-y-6 p-6 border rounded-lg\">\n      <OTPInput\n        label=\"Basic OTP\"\n        name=\"basicOtp\"\n        length={4}\n        hint=\"4-digit code\"\n      />\n\n      <OTPInput\n        label=\"Grouped OTP\"\n        name=\"groupedOtp\"\n        length={6}\n        separator\n        groupSize={3}\n        hint=\"6-digit code with groups of 3\"\n      />\n\n      <OTPInput\n        label=\"Masked OTP\"\n        name=\"maskedOtp\"\n        length={4}\n        mask\n        maskChar=\"â€¢\"\n        hint=\"4-digit code with masked input\"\n      />\n\n      <OTPInput\n        label=\"Auto-Submit OTP\"\n        name=\"autoSubmitOtp\"\n        length={6}\n        autoSubmit\n        onComplete={(value) => {\n          console.log(\"OTP completed:\", value)\n        }}\n        hint=\"6-digit code that auto-submits on completion\"\n      />\n\n      <OTPInput\n        label=\"Pending OTP\"\n        name=\"pendingOtp\"\n        length={6}\n        pending\n        hint=\"6-digit code with pending state\"\n      />\n\n      <OTPInput\n        label=\"Error OTP\"\n        name=\"errorOtp\"\n        length={6}\n        error=\"Invalid verification code\"\n        hint=\"6-digit code with error state\"\n      />\n    </div>\n  )\n} ",
      "type": "registry:component",
      "target": "delta/examples/otp-input-variants-demo.tsx"
    }
  ]
}
