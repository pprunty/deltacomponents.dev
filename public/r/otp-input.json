{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "otp-input",
  "type": "registry:component",
  "title": "OTP Input",
  "description": "A component for otp-input",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "delta/inputs/otp-input.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport type { z } from \"zod\"\n\nexport interface OTPInputProps {\n  /** The label for the OTP input field */\n  label: string\n  /** The name of the OTP input field (used for form submission) */\n  name: string\n  /** Optional description text to display below the label */\n  description?: string\n  /** Optional hint text to display below the OTP input */\n  hint?: string\n  /** Error message to display (typically from Zod validation) */\n  error?: string\n  /** Whether the field is required */\n  required?: boolean\n  /** Whether the field is in a loading/pending state */\n  pending?: boolean\n  /** Default value for the OTP input */\n  defaultValue?: string\n  /** Controlled value */\n  value?: string\n  /** Container className for the entire component */\n  containerClassName?: string\n  /** Label className for customizing the label */\n  labelClassName?: string\n  /** Label variant - 'default' or 'muted' */\n  labelVariant?: \"default\" | \"muted\"\n  /** Input variant - 'default' or 'pill' */\n  variant?: \"default\" | \"pill\"\n  /** Whether to show a colored border (only applies to pill variant) */\n  coloredBorder?: boolean\n  /** Zod schema for validation (optional - can be handled at the form level) */\n  schema?: z.ZodType<string>\n  /** Callback when validation occurs */\n  onValidate?: (isValid: boolean, value: string, error?: string) => void\n  /** Callback when OTP value changes */\n  onChange?: (value: string) => void\n  /** Callback when OTP is completed */\n  onComplete?: (value: string) => void\n  /** ID for the OTP input */\n  id?: string\n  /** Whether the OTP input is disabled */\n  disabled?: boolean\n  /** Length of the OTP code */\n  length?: number\n  /** Character to display when input is masked */\n  maskChar?: string\n  /** Whether to mask the input (like a password) */\n  mask?: boolean\n  /** Whether to auto-focus the first input on mount */\n  autoFocus?: boolean\n  /** Whether to render with a separator between groups */\n  separator?: boolean\n  /** Size of each group of digits */\n  groupSize?: number\n  /** Whether to automatically submit the form when OTP is completed */\n  autoSubmit?: boolean\n}\n\n/**\n * OTPInput component that integrates with Zod validation\n */\nexport function OTPInput({\n  label,\n  name,\n  description,\n  hint,\n  error,\n  required = false,\n  pending = false,\n  defaultValue = \"\",\n  value,\n  containerClassName,\n  labelClassName,\n  labelVariant = \"default\",\n  variant = \"default\",\n  coloredBorder = false,\n  schema,\n  onValidate,\n  onChange,\n  onComplete,\n  id = name,\n  disabled = false,\n  length = 6,\n  maskChar = \"â€¢\",\n  mask = false,\n  autoFocus = false,\n  separator = false,\n  groupSize = 3,\n  autoSubmit = false,\n}: OTPInputProps) {\n  const [localError, setLocalError] = React.useState<string | undefined>(error)\n  const [otpValue, setOtpValue] = React.useState<string[]>(\n    (value || defaultValue || \"\").split(\"\").slice(0, length).concat(Array(length).fill(\"\")).slice(0, length),\n  )\n  const inputRefs = React.useRef<(HTMLInputElement | null)[]>([])\n  const hasError = !!localError || !!error\n  const errorId = `error-${id}`\n  const hintId = `hint-${id}`\n  const formRef = React.useRef<HTMLFormElement | null>(null)\n\n  // Determine if component is controlled or uncontrolled\n  const isControlled = value !== undefined\n\n  // Update local error when prop changes\n  React.useEffect(() => {\n    setLocalError(error)\n  }, [error])\n\n  // Update OTP value when controlled value changes\n  React.useEffect(() => {\n    if (isControlled && value !== undefined) {\n      setOtpValue(value.split(\"\").slice(0, length).concat(Array(length).fill(\"\")).slice(0, length))\n    }\n  }, [isControlled, value, length])\n\n  // Find the closest form element\n  React.useEffect(() => {\n    if (autoSubmit) {\n      const input = inputRefs.current[0]\n      if (input) {\n        let element: HTMLElement | null = input\n        while (element && element.tagName !== \"FORM\") {\n          element = element.parentElement\n        }\n        formRef.current = element as HTMLFormElement\n      }\n    }\n  }, [autoSubmit])\n\n  // Handle validation with the provided schema\n  const validateOTP = React.useCallback(\n    (value: string) => {\n      if (!schema) return\n\n      // Only validate if all digits are entered or if the form has been submitted\n      if (value.length === length) {\n        const result = schema.safeParse(value)\n        if (!result.success) {\n          const errorMessage = result.error.errors[0]?.message || \"Invalid code\"\n          setLocalError(errorMessage)\n          onValidate?.(false, value, errorMessage)\n        } else {\n          setLocalError(undefined)\n          onValidate?.(true, value)\n        }\n      } else {\n        // Clear error while user is still typing\n        setLocalError(undefined)\n      }\n    },\n    [schema, onValidate, length],\n  )\n\n  // Handle input change\n  const handleChange = (index: number, e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value\n\n    // Handle paste event (detected by multiple characters)\n    if (value.length > 1) {\n      handlePaste(index, value)\n      return\n    }\n\n    // Update the OTP value\n    const newOtpValue = [...otpValue]\n    newOtpValue[index] = value\n    setOtpValue(newOtpValue)\n\n    // Move focus to the next input if a value was entered\n    if (value && index < length - 1) {\n      inputRefs.current[index + 1]?.focus()\n    }\n\n    // Call onChange with the new value - ensure it's a clean string\n    const newValue = newOtpValue.join(\"\")\n    onChange?.(newValue)\n\n    // Check if OTP is complete\n    if (newOtpValue.filter(Boolean).length === length) {\n      onComplete?.(newValue)\n\n      // Auto-submit the form if enabled\n      if (autoSubmit && formRef.current) {\n        setTimeout(() => {\n          formRef.current?.requestSubmit()\n        }, 100)\n      }\n    }\n  }\n\n  // Handle paste event\n  const handlePaste = (startIndex: number, pastedValue: string) => {\n    // Clean the pasted value to only include digits and letters\n    const cleanedValue = pastedValue.replace(/\\s/g, \"\")\n\n    // Create a new OTP value array\n    const newOtpValue = [...otpValue]\n\n    // Fill in the OTP value with the pasted characters\n    for (let i = 0; i < Math.min(cleanedValue.length, length - startIndex); i++) {\n      newOtpValue[startIndex + i] = cleanedValue[i]\n    }\n\n    setOtpValue(newOtpValue)\n\n    // Focus the next empty input or the last input\n    const nextEmptyIndex = newOtpValue.findIndex((v, i) => i >= startIndex && !v)\n    if (nextEmptyIndex !== -1 && nextEmptyIndex < length) {\n      inputRefs.current[nextEmptyIndex]?.focus()\n    } else {\n      inputRefs.current[length - 1]?.focus()\n    }\n\n    // Call onChange with the new value\n    const newValue = newOtpValue.join(\"\")\n    onChange?.(newValue)\n\n    // Validate if we have a schema\n    if (schema) {\n      validateOTP(newValue)\n    }\n\n    // Check if OTP is complete and trigger onComplete only once\n    if (newOtpValue.every((v) => v) && newOtpValue.length === length) {\n      onComplete?.(newValue)\n    }\n  }\n\n  // Handle key down event\n  const handleKeyDown = (index: number, e: React.KeyboardEvent<HTMLInputElement>) => {\n    // Move focus to the previous input on backspace if the current input is empty\n    if (e.key === \"Backspace\") {\n      if (!otpValue[index] && index > 0) {\n        inputRefs.current[index - 1]?.focus()\n\n        // Clear the previous input\n        const newOtpValue = [...otpValue]\n        newOtpValue[index - 1] = \"\"\n        setOtpValue(newOtpValue)\n\n        // Call onChange with the new value\n        onChange?.(newOtpValue.join(\"\"))\n      }\n\n      // Don't prevent default for backspace when there's content to delete\n      if (!otpValue[index]) {\n        e.preventDefault()\n      }\n    }\n\n    // Prevent arrow key navigation\n    else if (e.key === \"ArrowRight\" || e.key === \"ArrowLeft\" || e.key === \"ArrowUp\" || e.key === \"ArrowDown\") {\n      e.preventDefault()\n    }\n  }\n\n  // Handle focus event\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    // Select the input content on focus\n    e.target.select()\n  }\n\n  // Create input groups based on groupSize\n  const inputGroups = []\n  for (let i = 0; i < length; i += groupSize) {\n    const group = []\n    for (let j = 0; j < groupSize && i + j < length; j++) {\n      group.push(i + j)\n    }\n    inputGroups.push(group)\n  }\n\n  return (\n    <div className={cn(\"group/field grid gap-2\", containerClassName)} data-invalid={hasError}>\n      <label\n        htmlFor={`${id}-0`}\n        className={cn(\n          \"text-sm font-normal leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-data-[invalid=true]/field:text-destructive\",\n          labelVariant === \"muted\" && \"text-muted-foreground\",\n          labelClassName,\n        )}\n      >\n        {label}\n        {required && <span aria-hidden=\"true\"> *</span>}\n      </label>\n\n      {description && <p className=\"text-sm text-muted-foreground\">{description}</p>}\n\n      <div className=\"flex items-center justify-center space-x-1.5 sm:space-x-2\">\n        {inputGroups.map((group, groupIndex) => (\n          <React.Fragment key={`group-${groupIndex}`}>\n            <div className=\"flex items-center space-x-1.5 sm:space-x-2\">\n              {group.map((index) => (\n                <div key={`input-${index}`} className=\"relative\">\n                 <input\n                   ref={(el: HTMLInputElement | null) => {\n                     if (inputRefs.current) {\n                       inputRefs.current[index] = el\n                     }\n                   }}\n                   id={index === 0 ? `${id}-0` : `${id}-${index}`}\n                   name={index === 0 ? name : `${name}-${index}`}\n                   type=\"text\"\n                   inputMode=\"numeric\"\n                   pattern=\"[0-9]*\"\n                   maxLength={1}\n                   autoComplete=\"off\"  // Add this line to prevent browser from saving input\n                   value={mask && otpValue[index] ? maskChar : otpValue[index]}\n                   onChange={(e) => handleChange(index, e)}\n                   onKeyDown={(e) => handleKeyDown(index, e)}\n                   onFocus={handleFocus}\n                   disabled={pending || disabled}\n                   aria-invalid={hasError}\n                   aria-errormessage={hasError ? errorId : undefined}\n                   aria-describedby={hint ? hintId : undefined}\n                   aria-required={required}\n                   autoFocus={autoFocus && index === 0}\n                   className={cn(\n                     \"w-9 h-10 sm:w-10 sm:h-12 text-center text-base sm:text-lg font-medium\",\n                     \"focus:outline-none focus:ring-2 focus:ring-[#4E90F9] dark:ring-offset-black ring-offset-white\",\n                     // Default variant styling\n                     variant === \"default\" &&\n                       \"border border-input rounded-md shadow-[0px_1px_1px_rgba(0,0,0,0.03),_0px_3px_6px_rgba(0,0,0,0.02)]\",\n                     // Pill variant styling\n                     variant === \"pill\" && \"bg-muted border-0 rounded-lg focus:ring-offset-2\",\n                     variant === \"pill\" && coloredBorder && \"border-2 border-primary\",\n                     // Error styling for both variants\n                     \"group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive\",\n                   )}\n                 />\n                  {/* Animated caret for empty inputs */}\n                </div>\n              ))}\n            </div>\n            {separator && groupIndex < inputGroups.length - 1 && (\n              <div className=\"text-muted-foreground text-base sm:text-lg font-medium\">-</div>\n            )}\n          </React.Fragment>\n        ))}\n      </div>\n\n      {/* Hidden input for form submission with the complete value */}\n      <input type=\"hidden\" name={name} value={otpValue.join(\"\")} data-testid={`${id}-hidden`} />\n\n      {hint && !hasError && (\n        <p id={hintId} className=\"text-xs text-muted-foreground mt-1\">\n          {hint}\n        </p>\n      )}\n\n      {hasError && (\n        <p id={errorId} className=\"text-destructive text-sm\">\n          {localError || error}\n        </p>\n      )}\n    </div>\n  )\n}\n\n",
      "type": "registry:component",
      "target": "delta/inputs/otp-input.tsx"
    },
    {
      "path": "delta/inputs/otp-input-demo.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { z } from \"zod\"\nimport { Card, CardTitle, CardHeader, CardDescription, CardContent, CardFooter } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { OTPInput } from \"@/delta/inputs/otp-input\"\n\nexport default function OTPInputDemo() {\n  return (\n    <div className=\"container mx-auto max-w-7xl px-4 py-8 space-y-16\">\n      <div className=\"space-y-4\">\n        <h2 className=\"text-2xl font-bold\">Verification Example</h2>\n        <p className=\"text-muted-foreground\">A complete verification form with OTP input.</p>\n        <VerificationExample />\n      </div>\n\n      <div className=\"space-y-4\">\n        <h2 className=\"text-2xl font-bold\">OTP Input Variants</h2>\n        <p className=\"text-muted-foreground\">Different styles and configurations for OTP inputs.</p>\n        <OTPVariantsExample />\n      </div>\n\n      <div className=\"space-y-4\">\n        <h2 className=\"text-2xl font-bold\">Auto-Submit Example</h2>\n        <p className=\"text-muted-foreground\">OTP input that automatically submits the form when completed.</p>\n        <AutoSubmitExample />\n      </div>\n    </div>\n  )\n}\n\nfunction VerificationExample() {\n  const [pending, setPending] = React.useState(false)\n  const [formData, setFormData] = React.useState({\n    verificationCode: \"\",\n  })\n  const [errors, setErrors] = React.useState<Record<string, string>>({})\n  const [success, setSuccess] = React.useState(false)\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    setPending(true)\n    setSuccess(false)\n\n    const result = z\n      .object({\n        verificationCode: z.string().length(6, \"Verification code must be 6 digits\"),\n      })\n      .safeParse(formData)\n\n    if (!result.success) {\n      const formattedErrors = result.error.format()\n      setErrors({\n        verificationCode: formattedErrors.verificationCode?._errors[0] || \"\",\n      })\n      setPending(false)\n      return\n    }\n\n    // Simulate API call\n    setTimeout(() => {\n      setPending(false)\n      setErrors({})\n      setSuccess(true)\n      // Reset form data\n      setFormData({\n        verificationCode: \"\",\n      })\n    }, 1500)\n  }\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle>Verify Your Account</CardTitle>\n        <CardDescription>\n          We've sent a 6-digit verification code to your email. Enter the code below to confirm your account.\n        </CardDescription>\n      </CardHeader>\n      <form onSubmit={handleSubmit}>\n        <CardContent className=\"flex flex-col gap-6\">\n          {success && (\n            <div className=\"p-4 bg-green-50 border border-green-200 text-green-700 rounded-md dark:bg-green-900/20 dark:border-green-800 dark:text-green-400\">\n              Verification successful! Your account has been verified.\n            </div>\n          )}\n\n          <OTPInput\n            label=\"Verification Code\"\n            name=\"verificationCode\"\n            length={6}\n            required\n            separator\n            autoFocus\n            groupSize={3}\n            autoSubmit\n            pending={pending}\n            error={errors.verificationCode}\n            value={formData.verificationCode}\n            onChange={(value) => setFormData({ ...formData, verificationCode: value })}\n            hint=\"Enter the 6-digit code sent to your email. This otp is autofocused\"\n            schema={z.string().length(6, \"Verification code must be 6 digits\")}\n          />\n        </CardContent>\n        <CardFooter className=\"flex flex-col space-y-4\">\n          <Button type=\"submit\" className=\"w-full\" disabled={pending}>\n            {pending ? \"Verifying...\" : \"Verify Account\"}\n          </Button>\n          <Button type=\"button\" variant=\"link\" className=\"w-full\" disabled={pending}>\n            Didn't receive a code? Resend\n          </Button>\n        </CardFooter>\n      </form>\n    </Card>\n  )\n}\n\nfunction AutoSubmitExample() {\n  const [pending, setPending] = React.useState(false)\n  const [success, setSuccess] = React.useState(false)\n  const [code, setCode] = React.useState(\"\")\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    setPending(true)\n    setSuccess(false)\n\n    // Simulate API call\n    setTimeout(() => {\n      setPending(false)\n      setSuccess(true)\n      setCode(\"\")\n    }, 1500)\n  }\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle>Auto-Submit OTP</CardTitle>\n        <CardDescription>Enter the complete code to automatically submit the form.</CardDescription>\n      </CardHeader>\n      <form onSubmit={handleSubmit}>\n        <CardContent className=\"flex flex-col gap-6\">\n          {success && (\n            <div className=\"p-4 bg-green-50 border border-green-200 text-green-700 rounded-md dark:bg-green-900/20 dark:border-green-800 dark:text-green-400\">\n              Code verified successfully!\n            </div>\n          )}\n\n          <OTPInput\n            label=\"Auto-Submit Code\"\n            name=\"autoSubmitCode\"\n            length={4}\n            required\n            autoSubmit\n            variant=\"pill\"\n            coloredBorder\n            pending={pending}\n            value={code}\n            onChange={setCode}\n            hint=\"Form will submit automatically when all 4 digits are entered\"\n          />\n        </CardContent>\n      </form>\n    </Card>\n  )\n}\n\n\nexport function OTPVariantsExample() {\n  return (\n    <Card className=\"w-full mx-auto max-w-md\">\n      <CardHeader>\n        <CardTitle>OTP Input Variants</CardTitle>\n        <CardDescription>Different styles and configurations for OTP inputs</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex flex-col gap-8\">\n        <div className=\"space-y-2\">\n          <h3 className=\"text-sm font-medium\">Default Style</h3>\n          <OTPInput\n            label=\"Default OTP\"\n            name=\"default-otp\"\n            length={6}\n            variant=\"default\"\n            hint=\"Standard 6-digit OTP input\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <h3 className=\"text-sm font-medium\">Pill Style</h3>\n          <OTPInput label=\"Pill OTP\" name=\"pill-otp\" length={6} variant=\"pill\" hint=\"Rounded pill-style OTP input\" />\n        </div>\n\n        <div className=\"space-y-2\">\n          <h3 className=\"text-sm font-medium\">With Separator</h3>\n          <OTPInput\n            label=\"Grouped OTP\"\n            name=\"grouped-otp\"\n            length={6}\n            variant=\"default\"\n            separator\n            groupSize={3}\n            hint=\"OTP with visual grouping and default styling\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <h3 className=\"text-sm font-medium\">Default Style with Colored Border</h3>\n          <OTPInput\n            label=\"Colored Border OTP\"\n            name=\"colored-border-otp\"\n            length={6}\n            variant=\"default\"\n            coloredBorder\n            hint=\"Default style with colored border\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <h3 className=\"text-sm font-medium\">Masked Input (Default Style)</h3>\n          <OTPInput\n            label=\"Masked OTP\"\n            name=\"masked-otp\"\n            length={6}\n            variant=\"default\"\n            mask\n            maskChar=\"â€¢\"\n            hint=\"Masked for security (like a password)\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <h3 className=\"text-sm font-medium\">Different Length (Default Style)</h3>\n          <OTPInput\n            label=\"4-Digit OTP\"\n            name=\"short-otp\"\n            length={4}\n            variant=\"default\"\n            hint=\"Shorter 4-digit OTP input with default styling\"\n          />\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\n",
      "type": "registry:component",
      "target": "delta/inputs/otp-input-demo.tsx"
    }
  ]
}