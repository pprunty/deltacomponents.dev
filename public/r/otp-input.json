{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "otp-input",
  "type": "registry:component",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "dependencies": ["zod", "motion"],
  "files": [
    {
      "path": "registry/inputs/otp-input.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { motion } from \"motion/react\"\nimport type { z } from \"zod\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport type OtpInputType = \"numeric\" | \"alphabetic\" | \"alphanumeric\"\n\nexport interface OtpInputProps {\n  /** The label for the OTP input field */\n  label: string\n  /** The name of the OTP input field (used for form submission) */\n  name: string\n  /** Optional description text to display below the label */\n  description?: string\n  /** Optional hint text to display below the OTP input */\n  hint?: string\n  /** Error message to display (typically from Zod validation) */\n  error?: string\n  /** Whether the field is required */\n  required?: boolean\n  /** Whether the field is in a loading/pending state */\n  pending?: boolean\n  /** Default value for the OTP input */\n  defaultValue?: string\n  /** Controlled value */\n  value?: string\n  /** Container className for the entire component */\n  containerClassName?: string\n  /** Label className for customizing the label */\n  labelClassName?: string\n  /** Label variant - 'default' or 'muted' */\n  labelVariant?: \"default\" | \"muted\"\n  /** Input variant - 'default' or 'pill' */\n  variant?: \"default\" | \"pill\"\n  /** Whether to show a colored border (only applies to pill variant) */\n  coloredBorder?: boolean\n  /** Input type validation - numeric, alphabetic, or alphanumeric */\n  inputType?: OtpInputType\n  /** Whether the OTP is in a success state (shows green border) */\n  success?: boolean\n  /** Zod schema for validation (optional - can be handled at the form level) */\n  schema?: z.ZodType<string>\n  /** Callback when validation occurs */\n  onValidate?: (isValid: boolean, value: string, error?: string) => void\n  /** Callback when OTP value changes */\n  onChange?: (value: string) => void\n  /** Callback when OTP is completed */\n  onComplete?: (value: string) => void\n  /** ID for the OTP input */\n  id?: string\n  /** Whether the OTP input is disabled */\n  disabled?: boolean\n  /** Length of the OTP code */\n  length?: number\n  /** Character to display when input is masked */\n  maskChar?: string\n  /** Whether to mask the input (like a password) */\n  mask?: boolean\n  /** Whether to auto-focus the first input on mount */\n  autoFocus?: boolean\n  /** Whether to render with a separator between groups */\n  separator?: boolean\n  /** Size of each group of digits */\n  groupSize?: number\n  /** Whether to automatically submit the form when OTP is completed */\n  autoSubmit?: boolean\n}\n\n/**\n * OtpInput component that integrates with Zod validation\n */\nexport function OtpInput({\n  label,\n  name,\n  description,\n  hint,\n  error,\n  required = false,\n  pending = false,\n  defaultValue = \"\",\n  value,\n  containerClassName,\n  labelClassName,\n  labelVariant = \"default\",\n  variant = \"default\",\n  coloredBorder = false,\n  inputType = \"alphanumeric\",\n  success = false,\n  schema,\n  onValidate,\n  onChange,\n  onComplete,\n  id = name,\n  disabled = false,\n  length = 6,\n  maskChar = \"â€¢\",\n  mask = false,\n  autoFocus = false,\n  separator = false,\n  groupSize = 3,\n  autoSubmit = false,\n}: OtpInputProps) {\n  const [localError, setLocalError] = React.useState<string | undefined>(error)\n  const [otpValue, setOtpValue] = React.useState<string[]>(\n    (value || defaultValue || \"\")\n      .split(\"\")\n      .slice(0, length)\n      .concat(Array(length).fill(\"\"))\n      .slice(0, length)\n  )\n  const [errorIndexes, setErrorIndexes] = React.useState<Set<number>>(new Set())\n  const [shakeAnimation, setShakeAnimation] = React.useState(false)\n  const inputRefs = React.useRef<(HTMLInputElement | null)[]>([])\n  const hasError = !!localError || !!error\n  const errorId = `error-${id}`\n  const hintId = `hint-${id}`\n  const formRef = React.useRef<HTMLFormElement | null>(null)\n\n  // Controlled vs uncontrolled\n  const isControlled = value !== undefined\n\n  React.useEffect(() => {\n    setLocalError(error)\n  }, [error])\n\n  React.useEffect(() => {\n    if (isControlled && value !== undefined) {\n      setOtpValue(\n        value\n          .split(\"\")\n          .slice(0, length)\n          .concat(Array(length).fill(\"\"))\n          .slice(0, length)\n      )\n    }\n  }, [isControlled, value, length])\n\n  React.useEffect(() => {\n    if (autoSubmit) {\n      const input = inputRefs.current[0]\n      if (input) {\n        let el: HTMLElement | null = input\n        while (el && el.tagName !== \"FORM\") {\n          el = el.parentElement\n        }\n        formRef.current = el as HTMLFormElement\n      }\n    }\n  }, [autoSubmit])\n\n  const isValidInputType = (char: string): boolean => {\n    switch (inputType) {\n      case \"numeric\":\n        return /^\\d$/.test(char)\n      case \"alphabetic\":\n        return /^[a-zA-Z]$/.test(char)\n      case \"alphanumeric\":\n        return /^[a-zA-Z0-9]$/.test(char)\n      default:\n        return true\n    }\n  }\n\n  const triggerErrorAnimation = (index: number) => {\n    setErrorIndexes((prev) => new Set(prev).add(index))\n    setShakeAnimation(true)\n    setTimeout(() => setShakeAnimation(false), 500)\n  }\n\n  const validateOTP = React.useCallback(\n    (val: string) => {\n      if (!schema) return\n      if (val.length === length) {\n        const result = schema.safeParse(val)\n        if (!result.success) {\n          const msg = result.error.errors[0]?.message || \"Invalid code\"\n          setLocalError(msg)\n          onValidate?.(false, val, msg)\n        } else {\n          setLocalError(undefined)\n          onValidate?.(true, val)\n        }\n      } else {\n        setLocalError(undefined)\n      }\n    },\n    [schema, onValidate, length]\n  )\n\n  const handleChange = (\n    index: number,\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const val = e.target.value\n\n    if (val.length > 1) {\n      handlePaste(index, val)\n      return\n    }\n\n    if (val && !isValidInputType(val)) {\n      triggerErrorAnimation(index)\n      return\n    }\n\n    if (val) {\n      setErrorIndexes((prev) => {\n        const next = new Set(prev)\n        next.delete(index)\n        return next\n      })\n    }\n\n    const nextOtp = [...otpValue]\n    nextOtp[index] = val\n    setOtpValue(nextOtp)\n\n    if (val && index < length - 1) {\n      inputRefs.current[index + 1]?.focus()\n    }\n\n    const joined = nextOtp.join(\"\")\n    onChange?.(joined)\n\n    if (nextOtp.filter(Boolean).length === length) {\n      onComplete?.(joined)\n      if (schema) validateOTP(joined)\n      if (autoSubmit && formRef.current) {\n        setTimeout(() => formRef.current?.requestSubmit(), 100)\n      }\n    }\n  }\n\n  const handlePasteEvent = (\n    index: number,\n    e: React.ClipboardEvent<HTMLInputElement>\n  ) => {\n    e.preventDefault()\n    const data = e.clipboardData.getData(\"text/plain\")\n    if (data) handlePaste(index, data)\n  }\n\n  const handlePaste = (start: number, pasted: string) => {\n    let cleaned = pasted.replace(/\\s/g, \"\")\n    if (inputType) {\n      cleaned = cleaned.split(\"\").filter(isValidInputType).join(\"\")\n    }\n    if (!cleaned && pasted.trim()) {\n      triggerErrorAnimation(start)\n      return\n    }\n\n    const newOtp = Array(length).fill(\"\")\n    for (let i = 0; i < Math.min(cleaned.length, length); i++) {\n      newOtp[i] = cleaned[i]\n    }\n    setOtpValue(newOtp)\n    setErrorIndexes(new Set())\n    const filled = newOtp.filter(Boolean).length\n    if (filled === length) {\n      inputRefs.current[length - 1]?.focus()\n    } else {\n      inputRefs.current[filled]?.focus()\n    }\n\n    const joined = newOtp.join(\"\")\n    onChange?.(joined)\n    if (filled === length) {\n      onComplete?.(joined)\n      if (schema) validateOTP(joined)\n      if (autoSubmit && formRef.current) {\n        setTimeout(() => formRef.current?.requestSubmit(), 100)\n      }\n    } else {\n      schema && validateOTP(joined)\n    }\n  }\n\n  const handleKeyDown = (\n    index: number,\n    e: React.KeyboardEvent<HTMLInputElement>\n  ) => {\n    if (e.key === \"Backspace\") {\n      if (!otpValue[index] && index > 0) {\n        const prev = [...otpValue]\n        prev[index - 1] = \"\"\n        setOtpValue(prev)\n        onChange?.(prev.join(\"\"))\n        inputRefs.current[index - 1]?.focus()\n      }\n      if (!otpValue[index]) e.preventDefault()\n    } else if (\n      [\"ArrowRight\", \"ArrowLeft\", \"ArrowUp\", \"ArrowDown\"].includes(e.key)\n    ) {\n      e.preventDefault()\n    }\n  }\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    e.target.select()\n  }\n\n  const inputGroups: number[][] = []\n  for (let i = 0; i < length; i += groupSize) {\n    inputGroups.push(\n      Array.from({ length: Math.min(groupSize, length - i) }, (_, j) => i + j)\n    )\n  }\n\n  return (\n    <div\n      className={cn(\"group/field grid gap-2\", containerClassName)}\n      data-invalid={hasError}\n    >\n      <label\n        htmlFor={`${id}-0`}\n        className={cn(\n          \"text-sm font-normal leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-data-[invalid=true]/field:text-destructive\",\n          labelVariant === \"muted\" && \"text-muted-foreground\",\n          labelClassName\n        )}\n      >\n        {label}\n        {required && <span aria-hidden=\"true\"> *</span>}\n      </label>\n\n      {description && (\n        <p className=\"text-sm text-muted-foreground\">{description}</p>\n      )}\n\n      <div className=\"flex items-center justify-center space-x-1.5 sm:space-x-2\">\n        {inputGroups.map((group, gi) => (\n          <React.Fragment key={gi}>\n            <div className=\"flex items-center space-x-1.5 sm:space-x-2\">\n              {group.map((idx) => (\n                <div key={idx} className=\"relative\">\n                  <motion.input\n                    ref={(el) => {\n                      inputRefs.current[idx] = el\n                    }}\n                    id={`${id}-${idx}`}\n                    name={idx === 0 ? name : `${name}-${idx}`}\n                    type=\"text\"\n                    inputMode={inputType === \"numeric\" ? \"tel\" : \"text\"}\n                    pattern={inputType === \"numeric\" ? \"[0-9]*\" : undefined}\n                    maxLength={1}\n                    autoComplete=\"off\"\n                    value={mask && otpValue[idx] ? maskChar : otpValue[idx]}\n                    onChange={(e) => handleChange(idx, e)}\n                    onKeyDown={(e) => handleKeyDown(idx, e)}\n                    onPaste={(e) => handlePasteEvent(idx, e)}\n                    onFocus={handleFocus}\n                    disabled={pending || disabled}\n                    aria-invalid={hasError}\n                    aria-errormessage={hasError ? errorId : undefined}\n                    aria-describedby={hint ? hintId : undefined}\n                    aria-required={required}\n                    autoFocus={autoFocus && idx === 0}\n                    animate={{\n                      x:\n                        errorIndexes.has(idx) && shakeAnimation\n                          ? [-2, 2, -2, 2, 0]\n                          : 0,\n                      borderColor: success\n                        ? \"rgb(34 197 94)\"\n                        : errorIndexes.has(idx)\n                          ? \"rgb(239 68 68)\"\n                          : undefined,\n                      scale: success ? [1, 1.02, 1] : 1,\n                    }}\n                    transition={{\n                      x:\n                        errorIndexes.has(idx) && shakeAnimation\n                          ? { duration: 0.4, type: \"tween\" }\n                          : { duration: 0.4, type: \"spring\", stiffness: 300 },\n                      borderColor: { duration: 0.3 },\n                      scale: success\n                        ? { duration: 0.6, delay: 0 }\n                        : { duration: 0.6, delay: 0.1 },\n                    }}\n                    className={cn(\n                      // Base styling\n                      \"w-11 h-12 sm:w-10 sm:h-12 bg-background text-center text-base sm:text-xl font-medium transition-colors\",\n                      \"focus:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-white dark:ring-offset-black\",\n\n                      // Default variant\n                      variant === \"default\" &&\n                        \"border border-input rounded-md shadow-[0px_2px_2px_rgba(0,0,0,0.03),_0px_4px_7px_rgba(0,0,0,0.02)] focus-visible:border-primary focus-visible:ring-primary/20\",\n\n                      // Pill variant\n                      variant === \"pill\" &&\n                        \"bg-muted border-0 rounded-lg focus-visible:border-primary focus-visible:ring-primary focus-visible:ring-2 focus-visible:ring-offset-background\",\n                      variant === \"pill\" &&\n                        coloredBorder &&\n                        \"border-2 border-primary\",\n\n                      // Success state\n                      success &&\n                        \"border-2 border-green-500 focus:ring-0 focus:ring-transparent\",\n\n                      // Per-input error\n                      errorIndexes.has(idx) &&\n                        \"border-destructive focus:ring-destructive\",\n\n                      // Global error override\n                      \"group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive\"\n                    )}\n                  />\n                </div>\n              ))}\n            </div>\n            {separator && gi < inputGroups.length - 1 && (\n              <div className=\"text-muted-foreground text-base sm:text-lg font-medium\">\n                -\n              </div>\n            )}\n          </React.Fragment>\n        ))}\n      </div>\n\n      {/* Hidden for form */}\n      <input\n        type=\"hidden\"\n        name={name}\n        value={otpValue.join(\"\")}\n        data-testid={`${id}-hidden`}\n      />\n\n      {hint && !hasError && (\n        <p id={hintId} className=\"text-xs text-muted-foreground mt-1\">\n          {hint}\n        </p>\n      )}\n\n      {hasError && (\n        <p id={errorId} className=\"text-destructive text-sm\">\n          {localError || error}\n        </p>\n      )}\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/delta/otp-input.tsx"
    }
  ]
}
