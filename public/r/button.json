{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:component",
  "title": "Button",
  "description": "A component for button",
  "dependencies": [
    "clsx",
    "react-spinners"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "delta/components/button.tsx",
      "content": "'use client';\n\nimport type { ReactNode } from 'react';\nimport { clsx } from 'clsx';\nimport { ClipLoader } from 'react-spinners';\n\nexport type ButtonVariant =\n  | 'primary'\n  | 'secondary'\n  | 'destructive'\n  | 'action'\n  | 'neobrutalism'\n  | 'ghost'\n  | 'outline';\n\nexport type ButtonSize = 'sm' | 'md' | 'lg';\n\nexport interface ButtonProps {\n  onClick?: () => void;\n  title?: string;\n  children?: ReactNode;\n  type?: 'button' | 'submit' | 'reset';\n  className?: string;\n  disabled?: boolean;\n  icon?: ReactNode;\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  extendedClickArea?: boolean;\n  isLoading?: boolean; // New prop for loading state\n  spinnerSize?: number; // Optional prop for spinner size\n  spinnerColor?: string; // Optional prop for spinner color\n  actionColor?: string; // New prop for customizing action variant color\n  neobrutalismColor?: string; // New prop for neobrutalism variant color\n}\n\nexport function Button({\n  onClick,\n  title,\n  children,\n  type = 'button',\n  className,\n  disabled = false,\n  icon,\n  variant = 'primary',\n  size = 'md',\n  extendedClickArea = false,\n  isLoading = false, // Default to not loading\n  spinnerSize = 20, // Default size\n  spinnerColor, // Will use appropriate color based on variant if not specified\n  actionColor, // New prop\n  neobrutalismColor = 'bg-blue-300', // Default neobrutalism color\n}: ButtonProps) {\n  // Determine spinner color based on variant and theme colors\n  const getSpinnerColor = () => {\n    if (spinnerColor) return spinnerColor;\n\n    switch (variant) {\n      case 'primary':\n        return 'var(--primary-foreground)'; // White in light mode, dark in dark mode\n      case 'secondary':\n        return 'var(--secondary-foreground)'; // Dark in light mode, white in dark mode\n      case 'action':\n        return 'var(--action-foreground)'; // Always white/light\n      case 'destructive':\n        return 'var(--destructive-foreground)'; // Always white/light\n      default:\n        return 'currentColor'; // Fallback to the current text color\n    }\n  };\n\n  // Get action variant styles based on whether a custom color is provided\n  const getActionStyles = () => {\n    if (actionColor) {\n      // If it's a Tailwind class (starts with bg-)\n      if (actionColor.startsWith('bg-')) {\n        const baseColor = actionColor.replace('bg-', '');\n        return [\n          `${actionColor} text-white`,\n          `hover:${actionColor}/80 active:${actionColor}/80`,\n          `focus-visible:outline-${baseColor}/50`,\n          `disabled:hover:${actionColor}`,\n        ];\n      }\n      // If it's a hex color\n      return [\n        `bg-[${actionColor}] text-white`,\n        `hover:bg-[${actionColor}]/80 active:bg-[${actionColor}]/80`,\n        `focus-visible:outline-[${actionColor}]/50`,\n        `disabled:hover:bg-[${actionColor}]`,\n      ];\n    }\n\n    return [\n      'bg-blue-600 text-white',\n      'hover:bg-blue-600/80 active:bg-blue-600/80',\n      'focus-visible:outline-blue-500/50',\n      'disabled:hover:bg-blue-600',\n    ];\n  };\n\n  // Size-based styles\n  const sizeStyles = {\n    sm: 'text-xs px-3 py-1.5 rounded-md',\n    md: 'text-sm py-2 rounded-md',\n    lg: 'text-base px-6 py-3 rounded-lg',\n  };\n\n  // Use title if provided, otherwise use children\n  const buttonContent = title || children;\n\n  return (\n    <button\n      onClick={onClick}\n      type={type}\n      disabled={disabled || isLoading}\n      className={clsx(\n        'w-full text-center rounded-md font-semibold transition-all duration-200',\n        sizeStyles[size],\n        'focus:outline-none focus:ring-0 focus-visible:ring-0',\n        'focus:shadow-none focus-visible:shadow-none',\n        'focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2',\n        'active:opacity-80',\n        'disabled:opacity-50 disabled:cursor-not-allowed disabled:active:opacity-50',\n\n        // Add relative positioning when extended click area is enabled\n        extendedClickArea && 'relative',\n\n        // Primary variant styling\n        variant === 'primary' && [\n          'bg-primary text-primary-foreground',\n          'hover:bg-primary/80 active:bg-primary/80',\n          'focus-visible:outline-primary/50',\n          'disabled:hover:bg-primary',\n        ],\n\n        // Secondary variant styling\n        variant === 'secondary' && [\n          'bg-background text-secondary-foreground',\n          'border border-border',\n          'hover:bg-secondary/80 active:bg-secondary/80',\n          'hover:border-border-hover',\n          'focus-visible:outline-secondary/50',\n          'disabled:hover:bg-secondary disabled:hover:border-border',\n        ],\n\n        // Destructive variant styling\n        variant === 'destructive' && [\n          'bg-destructive text-destructive-foreground',\n          'hover:bg-destructive/80 active:bg-destructive/80',\n          'focus-visible:outline-destructive/50',\n          'disabled:hover:bg-destructive',\n        ],\n\n        // Action variant styling with customizable color\n        variant === 'action' && getActionStyles(),\n\n        // Neobrutalism variant styling\n        variant === 'neobrutalism' && [\n          'rounded-lg border-2 border-black',\n          neobrutalismColor,\n          'text-black',\n          'shadow-[2px_2px_0px_0px_rgba(0,0,0,0.8)] dark:shadow-[2px_2px_0px_0px_rgba(255,255,255,0.8)]',\n          'hover:translate-y-1 hover:translate-x-1 hover:shadow-none',\n          'active:translate-y-1 active:translate-x-1 active:shadow-none',\n          'transition-all',\n          'disabled:hover:translate-y-0 disabled:hover:translate-x-0 disabled:hover:shadow-[2px_2px_0px_0px_rgba(0,0,0,0.8)] dark:disabled:hover:shadow-[2px_2px_0px_0px_rgba(255,255,255,0.8)]',\n        ],\n\n        // Ghost variant styling\n        variant === 'ghost' && [\n          'bg-transparent hover:bg-accent hover:text-accent-foreground',\n          'active:bg-accent/80',\n          'focus-visible:outline-accent/50',\n        ],\n\n        // Outline variant styling\n        variant === 'outline' && [\n          'border border-input bg-background',\n          'hover:bg-accent hover:text-accent-foreground',\n          'active:bg-accent/80',\n          'focus-visible:outline-accent/50',\n        ],\n\n        // Add the extended click area pseudo-element styles\n        extendedClickArea &&\n          'before:absolute before:-inset-10 before:block before:content-[\"\"]',\n\n        className,\n      )}\n      style={{\n        WebkitTapHighlightColor: 'transparent',\n        outline: 'none',\n        ...(variant === 'action' &&\n          actionColor &&\n          !actionColor.startsWith('bg-') && {\n            backgroundColor: actionColor,\n            '--tw-bg-opacity': 1,\n          }),\n      }}\n    >\n      <div\n        className={clsx(\n          'flex items-center justify-center',\n          isLoading && 'gap-2',\n        )}\n      >\n        {isLoading && (\n          <ClipLoader\n            size={spinnerSize}\n            color={getSpinnerColor()}\n            cssOverride={{ display: 'block' }}\n          />\n        )}\n        {icon && !isLoading && (\n          <span className=\"flex items-center\">{icon}</span>\n        )}\n        <span>{title || children}</span>\n      </div>\n    </button>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/components/button.tsx"
    },
    {
      "path": "delta/examples/button-basic-demo.tsx",
      "content": "'use client';\n\nimport { Button } from '@/components/ui/button';\n\nexport default function ButtonBasicDemo() {\n  return (\n    <div className=\"flex items-center justify-center p-4\">\n      <Button onClick={() => alert('Button has been clicked!')}>\n        Click me\n      </Button>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/examples/button-basic-demo.tsx"
    },
    {
      "path": "delta/examples/button-sizes-demo.tsx",
      "content": "'use client';\n\nimport { Button } from '@/delta/components/button';\n\nexport default function ButtonSizesDemo() {\n  return (\n    <div className=\"space-y-8\">\n      {/* Primary Variant Sizes */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">\n          Primary Variant\n        </h3>\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n          <Button title=\"Small\" variant=\"primary\" size=\"sm\" />\n          <Button title=\"Medium\" variant=\"primary\" size=\"md\" />\n          <Button title=\"Large\" variant=\"primary\" size=\"lg\" />\n        </div>\n      </div>\n\n      {/* Secondary Variant Sizes */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">\n          Secondary Variant\n        </h3>\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n          <Button title=\"Small\" variant=\"secondary\" size=\"sm\" />\n          <Button title=\"Medium\" variant=\"secondary\" size=\"md\" />\n          <Button title=\"Large\" variant=\"secondary\" size=\"lg\" />\n        </div>\n      </div>\n\n      {/* Destructive Variant Sizes */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">\n          Destructive Variant\n        </h3>\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n          <Button title=\"Small\" variant=\"destructive\" size=\"sm\" />\n          <Button title=\"Medium\" variant=\"destructive\" size=\"md\" />\n          <Button title=\"Large\" variant=\"destructive\" size=\"lg\" />\n        </div>\n      </div>\n\n      {/* Action Variant Sizes */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">\n          Action Variant\n        </h3>\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n          <Button title=\"Small\" variant=\"action\" size=\"sm\" />\n          <Button title=\"Medium\" variant=\"action\" size=\"md\" />\n          <Button title=\"Large\" variant=\"action\" size=\"lg\" />\n        </div>\n      </div>\n\n      {/* Neobrutalism Variant Sizes */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">\n          Neobrutalism Variant\n        </h3>\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n          <Button title=\"Small\" variant=\"neobrutalism\" size=\"sm\" />\n          <Button title=\"Medium\" variant=\"neobrutalism\" size=\"md\" />\n          <Button title=\"Large\" variant=\"neobrutalism\" size=\"lg\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/examples/button-sizes-demo.tsx"
    },
    {
      "path": "delta/examples/button-variants-demo.tsx",
      "content": "'use client';\n\nimport { Button } from '@/delta/components/button';\nimport { useState } from 'react';\n\nexport default function ButtonVariantsDemo() {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClick = () => {\n    setIsLoading(true);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 2000);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Standard Variants */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">\n          Standard Variants\n        </h3>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4\">\n          <Button title=\"Primary Button\" variant=\"primary\" />\n          <Button title=\"Secondary Button\" variant=\"secondary\" />\n          <Button title=\"Destructive Button\" variant=\"destructive\" />\n          <Button title=\"Action Button\" variant=\"action\" />\n        </div>\n      </div>\n\n      {/* Loading States */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">\n          Loading States\n        </h3>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n          <Button title=\"Always Loading\" variant=\"primary\" isLoading={true} />\n          <Button\n            title=\"Click to Load\"\n            variant=\"primary\"\n            isLoading={isLoading}\n            onClick={handleClick}\n          />\n        </div>\n      </div>\n\n      {/* Button Sizes */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">\n          Button Sizes\n        </h3>\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n          <Button title=\"Small Button\" variant=\"primary\" size=\"sm\" />\n          <Button title=\"Default Size\" variant=\"primary\" size=\"md\" />\n          <Button title=\"Large Button\" variant=\"primary\" size=\"lg\" />\n        </div>\n      </div>\n\n      {/* Width Variations */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">\n          Width Variations\n        </h3>\n        <div className=\"space-y-4\">\n          <Button title=\"Full Width Button\" variant=\"primary\" />\n          <div className=\"flex justify-center\">\n            <Button title=\"Auto Width\" variant=\"primary\" className=\"w-auto\" />\n          </div>\n          <div className=\"flex justify-center\">\n            <Button\n              title=\"Fixed Width\"\n              variant=\"primary\"\n              className=\"w-[200px]\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Disabled States */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">\n          Disabled States\n        </h3>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4\">\n          <Button title=\"Primary\" variant=\"primary\" disabled />\n          <Button title=\"Secondary\" variant=\"secondary\" disabled />\n          <Button title=\"Destructive\" variant=\"destructive\" disabled />\n          <Button title=\"Action\" variant=\"action\" disabled />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/examples/button-variants-demo.tsx"
    },
    {
      "path": "delta/examples/button-neobrutalism-demo.tsx",
      "content": "'use client';\n\nimport { Button } from '@/delta/components/button';\n\nexport default function ButtonNeobrutalismDemo() {\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-5 gap-4\">\n      <div className=\"flex flex-col gap-2\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">\n          Default Blue\n        </h3>\n        <Button title=\"Neobrutalism\" variant=\"neobrutalism\" />\n      </div>\n\n      <div className=\"flex flex-col gap-2\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">Pink</h3>\n        <Button\n          title=\"Pink Style\"\n          variant=\"neobrutalism\"\n          neobrutalismColor=\"bg-pink-300\"\n        />\n      </div>\n\n      <div className=\"flex flex-col gap-2\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">Green</h3>\n        <Button\n          title=\"Green Style\"\n          variant=\"neobrutalism\"\n          neobrutalismColor=\"bg-green-300\"\n        />\n      </div>\n\n      <div className=\"flex flex-col gap-2\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">Black</h3>\n        <Button\n          title=\"Black Style\"\n          variant=\"neobrutalism\"\n          neobrutalismColor=\"bg-black\"\n          className=\"text-white\"\n        />\n      </div>\n\n      <div className=\"flex flex-col gap-2\">\n        <h3 className=\"text-sm font-medium text-muted-foreground\">Disabled</h3>\n        <Button title=\"Disabled\" variant=\"neobrutalism\" disabled />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/examples/button-neobrutalism-demo.tsx"
    },
    {
      "path": "delta/examples/button-icon-only-demo.tsx",
      "content": "'use client';\n\nimport { Button } from '@/delta/components/button';\nimport { ArrowRight, Save, Trash, Download } from 'lucide-react';\n\nexport default function ButtonIconOnlyDemo() {\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4\">\n      <Button variant=\"primary\" icon={<ArrowRight className=\"w-4 h-4\" />} />\n\n      <Button variant=\"secondary\" icon={<Save className=\"w-4 h-4\" />} />\n\n      <Button variant=\"destructive\" icon={<Trash className=\"w-4 h-4\" />} />\n\n      <Button variant=\"action\" icon={<Download className=\"w-4 h-4\" />} />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/examples/button-icon-only-demo.tsx"
    },
    {
      "path": "delta/examples/button-extended-click-demo.tsx",
      "content": "'use client';\n\nimport { Button } from '@/delta/components/button';\nimport { ArrowRight } from 'lucide-react';\n\nexport default function ButtonExtendedClickDemo() {\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-8 items-center justify-center min-h-[200px]\">\n      <div className=\"flex flex-col items-center gap-2\">\n        <h3 className=\"text-sm font-medium text-muted-foreground mb-4\">\n          Standard Click Area\n        </h3>\n        <Button\n          title=\"Standard Button\"\n          variant=\"primary\"\n          className=\"max-w-[200px]\"\n          icon={<ArrowRight className=\"w-4 h-4\" />}\n        />\n        <div className=\"text-xs text-muted-foreground mt-2\">\n          Try clicking just outside the button\n        </div>\n      </div>\n\n      <div className=\"flex flex-col items-center gap-2\">\n        <h3 className=\"text-sm font-medium text-muted-foreground mb-4\">\n          Extended Click Area\n        </h3>\n        <Button\n          title=\"Extended Click Area\"\n          variant=\"primary\"\n          className=\"max-w-[200px]\"\n          extendedClickArea={true}\n          icon={<ArrowRight className=\"w-4 h-4\" />}\n        />\n        <div className=\"text-xs text-muted-foreground mt-2\">\n          The click area extends 40px beyond the button\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/examples/button-extended-click-demo.tsx"
    },
    {
      "path": "delta/examples/button-icons-demo.tsx",
      "content": "'use client';\n\nimport { Button } from '@/delta/components/button';\nimport { ArrowRight, Save, Trash, Download } from 'lucide-react';\n\nexport default function ButtonIconsDemo() {\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4\">\n      <Button\n        title=\"Continue\"\n        variant=\"primary\"\n        icon={<ArrowRight className=\"w-4 h-4\" />}\n      />\n\n      <Button\n        title=\"Save Changes\"\n        variant=\"secondary\"\n        icon={<Save className=\"w-4 h-4\" />}\n      />\n\n      <Button\n        title=\"Delete Item\"\n        variant=\"destructive\"\n        icon={<Trash className=\"w-4 h-4\" />}\n      />\n\n      <Button\n        title=\"Download\"\n        variant=\"action\"\n        icon={<Download className=\"w-4 h-4\" />}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/examples/button-icons-demo.tsx"
    }
  ]
}