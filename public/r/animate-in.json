{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "animate-in",
  "type": "registry:component",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "files": [
    {
      "path": "registry/animations/animate-in.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { motion, useInView, type Variants } from \"framer-motion\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface AnimateInProps\n  extends Omit<\n    React.HTMLAttributes<HTMLDivElement>,\n    | \"onDrag\"\n    | \"onDragEnd\"\n    | \"onDragStart\"\n    | \"onAnimationStart\"\n    | \"onAnimationEnd\"\n  > {\n  children: React.ReactNode\n  /**\n   * Direction of the animation\n   * @default \"up\"\n   */\n  direction?: \"up\" | \"down\" | \"left\" | \"right\"\n  /**\n   * Distance in pixels the element travels during animation\n   * @default 50\n   */\n  distance?: number\n  /**\n   * Duration of the animation in seconds\n   * @default 0.6\n   */\n  duration?: number\n  /**\n   * Delay before animation starts in seconds\n   * @default 0\n   */\n  delay?: number\n  /**\n   * Whether to use intersection observer for triggering animation\n   * @default true\n   */\n  useIntersectionObserver?: boolean\n  /**\n   * Intersection observer threshold (0-1)\n   * @default 0.1\n   */\n  threshold?: number\n  /**\n   * Whether to animate only once or every time it comes into view\n   * @default true\n   */\n  once?: boolean\n  /**\n   * Easing function for the animation\n   * @default \"easeOut\"\n   */\n  easing?:\n    | \"linear\"\n    | \"easeIn\"\n    | \"easeOut\"\n    | \"easeInOut\"\n    | \"circIn\"\n    | \"circOut\"\n    | \"circInOut\"\n    | \"backIn\"\n    | \"backOut\"\n    | \"backInOut\"\n    | \"anticipate\"\n  /**\n   * Initial opacity value\n   * @default 0\n   */\n  initialOpacity?: number\n  /**\n   * Final opacity value\n   * @default 1\n   */\n  finalOpacity?: number\n  /**\n   * Whether to start animation immediately (ignores intersection observer)\n   * @default false\n   */\n  immediate?: boolean\n  /**\n   * Stagger delay for child elements in seconds\n   * @default 0\n   */\n  staggerChildren?: number\n  /**\n   * Whether animation is disabled\n   * @default false\n   */\n  disabled?: boolean\n  /**\n   * Whether to show a blur overlay effect during animation\n   * @default false\n   */\n  overlayBlur?: boolean\n}\n\nconst easingMap = {\n  linear: [0, 0, 1, 1],\n  easeIn: [0.4, 0, 1, 1],\n  easeOut: [0, 0, 0.2, 1],\n  easeInOut: [0.4, 0, 0.2, 1],\n  circIn: [0.6, 0.04, 0.98, 0.335],\n  circOut: [0.075, 0.82, 0.165, 1],\n  circInOut: [0.785, 0.135, 0.15, 0.86],\n  backIn: [0.6, -0.28, 0.735, 0.045],\n  backOut: [0.175, 0.885, 0.32, 1.275],\n  backInOut: [0.68, -0.55, 0.265, 1.55],\n  anticipate: [0.215, 0.61, 0.355, 1],\n} as const\n\nexport default function AnimateIn({\n  children,\n  direction = \"up\",\n  distance = 50,\n  duration = 0.6,\n  delay = 0,\n  useIntersectionObserver = true,\n  threshold = 0.1,\n  once = true,\n  easing = \"easeOut\",\n  initialOpacity = 0,\n  finalOpacity = 1,\n  immediate = false,\n  staggerChildren = 0,\n  disabled = false,\n  overlayBlur = false,\n  className,\n  ...props\n}: AnimateInProps) {\n  const ref = React.useRef<HTMLDivElement>(null)\n  const isInView = useInView(ref, {\n    once,\n    margin: \"0px 0px -100px 0px\", // Start animation slightly before element is fully visible\n  })\n\n  // Determine if animation should be active\n  const shouldAnimate = React.useMemo(() => {\n    if (disabled) return false\n    if (immediate) return true\n    if (!useIntersectionObserver) return true\n    return isInView\n  }, [disabled, immediate, useIntersectionObserver, isInView])\n\n  // Calculate initial position based on direction\n  const getInitialPosition = React.useCallback(() => {\n    switch (direction) {\n      case \"up\":\n        return { x: 0, y: distance }\n      case \"down\":\n        return { x: 0, y: -distance }\n      case \"left\":\n        return { x: distance, y: 0 }\n      case \"right\":\n        return { x: -distance, y: 0 }\n      default:\n        return { x: 0, y: distance }\n    }\n  }, [direction, distance])\n\n  const initialPosition = getInitialPosition()\n\n  const variants: Variants = {\n    hidden: {\n      opacity: initialOpacity,\n      x: initialPosition.x,\n      y: initialPosition.y,\n    },\n    visible: {\n      opacity: finalOpacity,\n      x: 0,\n      y: 0,\n      transition: {\n        duration,\n        delay,\n        ease: easingMap[easing],\n        staggerChildren: staggerChildren > 0 ? staggerChildren : undefined,\n      },\n    },\n  }\n\n  const childVariants: Variants =\n    staggerChildren > 0\n      ? {\n          hidden: {\n            opacity: initialOpacity,\n            x: initialPosition.x,\n            y: initialPosition.y,\n          },\n          visible: {\n            opacity: finalOpacity,\n            x: 0,\n            y: 0,\n            transition: {\n              duration,\n              ease: easingMap[easing],\n            },\n          },\n        }\n      : {}\n\n  // If disabled, render without animation\n  if (disabled) {\n    return (\n      <div ref={ref} className={className} {...props}>\n        {children}\n      </div>\n    )\n  }\n\n  // Create variants with blur effect if overlayBlur is enabled\n  const blurVariants = overlayBlur\n    ? {\n        hidden: {\n          ...variants.hidden,\n          filter: \"blur(4px)\",\n        },\n        visible: {\n          ...variants.visible,\n          filter: \"blur(0px)\",\n        },\n      }\n    : variants\n\n  return (\n    <motion.div\n      ref={ref}\n      initial=\"hidden\"\n      animate={shouldAnimate ? \"visible\" : \"hidden\"}\n      variants={blurVariants}\n      className={cn(className)}\n      {...props}\n    >\n      {staggerChildren > 0\n        ? React.Children.map(children, (child, index) => (\n            <motion.div key={index} variants={childVariants}>\n              {child}\n            </motion.div>\n          ))\n        : children}\n    </motion.div>\n  )\n}\n",
      "type": "registry:component",
      "target": "/components/delta/animations/animate-in.tsx"
    }
  ]
}