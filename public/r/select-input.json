{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "select-input",
  "type": "registry:component",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "dependencies": ["zod"],
  "files": [
    {
      "path": "registry/inputs/select-input.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronDown } from \"lucide-react\"\nimport type { z } from \"zod\"\n\nimport { cn } from \"@/lib/utils\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\n\nexport interface SelectOption {\n  value: string\n  label: string\n  disabled?: boolean\n}\n\nexport interface SelectInputProps {\n  /** The label for the select field */\n  label: string\n  /** The name of the select field (used for form submission) */\n  name: string\n  /** Options for the select dropdown */\n  options: SelectOption[]\n  /** Optional description text to display below the label */\n  description?: string\n  /** Optional hint text to display below the select */\n  hint?: string\n  /** Error message to display (typically from Zod validation) */\n  error?: string\n  /** Whether the field is required */\n  required?: boolean\n  /** Whether the field is in a loading/pending state */\n  pending?: boolean\n  /** Default selected value */\n  defaultValue?: string\n  /** Controlled selected value */\n  value?: string\n  /** Placeholder text when no option is selected */\n  placeholder?: string\n  /** Container className for the entire component */\n  containerClassName?: string\n  /** Select trigger className */\n  selectClassName?: string\n  /** Label className */\n  labelClassName?: string\n  /** Label variant - 'default' or 'muted' */\n  labelVariant?: \"default\" | \"muted\"\n  /** Select variant - 'default' or 'pill' */\n  variant?: \"default\" | \"pill\"\n  /** Whether to show a colored border (only applies to pill variant) */\n  coloredBorder?: boolean\n  /** Zod schema for validation (optional - can be handled at the form level) */\n  schema?: z.ZodType<string>\n  /** Callback when validation occurs */\n  onValidate?: (isValid: boolean, value: string, error?: string) => void\n  /** Callback when selection changes */\n  onValueChange?: (value: string) => void\n  /** Callback when the select loses focus */\n  onBlur?: () => void\n  /** ID for the select */\n  id?: string\n  /** Whether the select is disabled */\n  disabled?: boolean\n}\n\n/**\n * SelectInput component that integrates with Zod validation\n */\nexport function SelectInput({\n  label,\n  name,\n  options,\n  description,\n  hint,\n  error,\n  required = false,\n  pending = false,\n  defaultValue,\n  value,\n  placeholder = \"Select an option\",\n  containerClassName,\n  selectClassName,\n  labelClassName,\n  labelVariant = \"default\",\n  variant = \"default\",\n  coloredBorder = false,\n  schema,\n  onValidate,\n  onValueChange,\n  onBlur,\n  id = name,\n  disabled = false,\n}: SelectInputProps) {\n  const [localError, setLocalError] = React.useState<string | undefined>(error)\n  const hasError = !!localError || !!error\n  const errorId = `error-${id}`\n  const hintId = `hint-${id}`\n\n  // Controlled vs uncontrolled\n  const isControlled = value !== undefined\n\n  React.useEffect(() => {\n    setLocalError(error)\n  }, [error])\n\n  const validateSelect = React.useCallback(\n    (val: string) => {\n      if (!schema) return\n      const result = schema.safeParse(val)\n      if (!result.success) {\n        const msg = result.error.errors[0]?.message || \"Invalid selection\"\n        setLocalError(msg)\n        onValidate?.(false, val, msg)\n      } else {\n        setLocalError(undefined)\n        onValidate?.(true, val)\n      }\n    },\n    [schema, onValidate]\n  )\n\n  const handleValueChange = (newVal: string) => {\n    if (schema) {\n      validateSelect(newVal)\n    }\n    onValueChange?.(newVal)\n  }\n\n  const handleNativeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const newVal = e.target.value\n    if (schema) {\n      validateSelect(newVal)\n    }\n    onValueChange?.(newVal)\n  }\n\n  // PILL variant uses native <select>\n  if (variant === \"pill\") {\n    return (\n      <div\n        className={cn(\"group/field grid gap-2\", containerClassName)}\n        data-invalid={hasError}\n      >\n        <label\n          htmlFor={id}\n          className={cn(\n            \"text-sm font-normal leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-data-[invalid=true]/field:text-destructive\",\n            labelVariant === \"muted\" && \"text-muted-foreground\",\n            labelClassName\n          )}\n        >\n          {label}\n          {required && <span aria-hidden=\"true\"> *</span>}\n        </label>\n\n        {description && (\n          <p className=\"text-xs text-muted-foreground\">{description}</p>\n        )}\n\n        <div className=\"relative\">\n          <select\n            id={id}\n            name={name}\n            onChange={handleNativeChange}\n            onBlur={onBlur}\n            disabled={pending || disabled}\n            aria-invalid={hasError}\n            aria-errormessage={hasError ? errorId : undefined}\n            aria-describedby={hint ? hintId : undefined}\n            aria-required={required}\n            className={cn(\n              // Base\n              \"h-[46px] md:text-md text-md focus-visible:outline-none bg-muted placeholder:text-muted-foreground\",\n              // Pill\n              \"border-0 rounded-lg px-4 w-full pr-10\",\n              \"focus-visible:ring-2 focus-visible:ring-primary focus-visible:border-primary focus-visible:ring-offset-background\",\n              // Hide native select arrow\n              \"appearance-none\",\n              coloredBorder && \"border-2 border-primary\",\n              // Error override\n              \"group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive\",\n              selectClassName\n            )}\n            {...(isControlled\n              ? { value }\n              : { defaultValue: defaultValue || \"\" })}\n          >\n            {!defaultValue && !value && (\n              <option value=\"\" disabled>\n                {placeholder}\n              </option>\n            )}\n            {options.map((opt) => (\n              <option key={opt.value} value={opt.value} disabled={opt.disabled}>\n                {opt.label}\n              </option>\n            ))}\n          </select>\n          <ChevronDown className=\"absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4 pointer-events-none text-muted-foreground\" />\n        </div>\n\n        {hint && !hasError && (\n          <p id={hintId} className=\"text-xs text-muted-foreground mt-1\">\n            {hint}\n          </p>\n        )}\n        {hasError && (\n          <p id={errorId} className=\"text-destructive text-xs\">\n            {localError || error}\n          </p>\n        )}\n      </div>\n    )\n  }\n\n  // DEFAULT variant uses shadcn <Select>\n  return (\n    <div\n      className={cn(\"group/field grid gap-2\", containerClassName)}\n      data-invalid={hasError}\n    >\n      <label\n        htmlFor={id}\n        className={cn(\n          \"text-sm font-normal leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-data-[invalid=true]/field:text-destructive\",\n          labelVariant === \"muted\" && \"text-muted-foreground\",\n          labelClassName\n        )}\n      >\n        {label}\n        {required && <span aria-hidden=\"true\"> *</span>}\n      </label>\n\n      {description && (\n        <p className=\"text-xs text-muted-foreground\">{description}</p>\n      )}\n\n      <Select\n        onValueChange={handleValueChange}\n        disabled={pending || disabled}\n        {...(isControlled ? { value } : { defaultValue })}\n      >\n        <SelectTrigger\n          id={id}\n          onBlur={onBlur}\n          className={cn(\n            // Base\n            \"h-[46px] md:text-md text-md focus-visible:outline-none bg-background\",\n            // Default\n            \"border border-input shadow-[0px_1px_1px_rgba(0,0,0,0.03),_0px_3px_6px_rgba(0,0,0,0.02)] \" +\n              \"focus-visible:ring-2 focus-visible:ring-primary focus-visible:border-primary\",\n            // Error override\n            \"group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive\",\n            selectClassName\n          )}\n          aria-invalid={hasError}\n          aria-errormessage={hasError ? errorId : undefined}\n          aria-describedby={hint ? hintId : undefined}\n          aria-required={required}\n        >\n          <SelectValue placeholder={placeholder} />\n        </SelectTrigger>\n        <SelectContent>\n          {options.map((opt) => (\n            <SelectItem\n              className={cn(\n                \"h-[46px] md:text-md text-md\",\n                \"outline-none focus:bg-primary/10 focus:text-primary data-[state=checked]:bg-primary/10 data-[state=checked]:text-primary\"\n              )}\n              key={opt.value}\n              value={opt.value}\n              disabled={opt.disabled}\n            >\n              {opt.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n\n      {hint && !hasError && (\n        <p id={hintId} className=\"text-xs text-muted-foreground mt-1\">\n          {hint}\n        </p>\n      )}\n      {hasError && (\n        <p id={errorId} className=\"text-destructive text-xs\">\n          {localError || error}\n        </p>\n      )}\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "/components/delta/inputs/select-input.tsx"
    }
  ]
}
