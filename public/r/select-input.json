{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "select-input",
  "type": "registry:component",
  "title": "Select Input",
  "description": "A select input component with both native and shadcn/ui select variants",
  "dependencies": [
    "zod",
    "lucide-react"
  ],
  "registryDependencies": [
    "select"
  ],
  "files": [
    {
      "path": "delta/inputs/select-input.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cn } from '@/lib/utils';\nimport type { z } from 'zod';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { ChevronDown } from 'lucide-react';\n\nexport interface SelectOption {\n  value: string;\n  label: string;\n  disabled?: boolean;\n}\n\nexport interface SelectInputProps {\n  /** The label for the select field */\n  label: string;\n  /** The name of the select field (used for form submission) */\n  name: string;\n  /** Options for the select dropdown */\n  options: SelectOption[];\n  /** Optional description text to display below the label */\n  description?: string;\n  /** Optional hint text to display below the select */\n  hint?: string;\n  /** Error message to display (typically from Zod validation) */\n  error?: string;\n  /** Whether the field is required */\n  required?: boolean;\n  /** Whether the field is in a loading/pending state */\n  pending?: boolean;\n  /** Default selected value */\n  defaultValue?: string;\n  /** Controlled selected value */\n  value?: string;\n  /** Placeholder text when no option is selected */\n  placeholder?: string;\n  /** Container className for the entire component */\n  containerClassName?: string;\n  /** Select trigger className */\n  selectClassName?: string;\n  /** Label className */\n  labelClassName?: string;\n  /** Label variant - 'default' or 'muted' */\n  labelVariant?: 'default' | 'muted';\n  /** Select variant - 'default' or 'pill' */\n  variant?: 'default' | 'pill';\n  /** Whether to show a colored border (only applies to pill variant) */\n  coloredBorder?: boolean;\n  /** Zod schema for validation (optional - can be handled at the form level) */\n  schema?: z.ZodType<string>;\n  /** Callback when validation occurs */\n  onValidate?: (isValid: boolean, value: string, error?: string) => void;\n  /** Callback when selection changes */\n  onValueChange?: (value: string) => void;\n  /** ID for the select */\n  id?: string;\n  /** Whether the select is disabled */\n  disabled?: boolean;\n}\n\n/**\n * SelectInput component that integrates with Zod validation\n */\nexport function SelectInput({\n  label,\n  name,\n  options,\n  description,\n  hint,\n  error,\n  required = false,\n  pending = false,\n  defaultValue,\n  value,\n  placeholder = 'Select an option',\n  containerClassName,\n  selectClassName,\n  labelClassName,\n  labelVariant = 'default',\n  variant = 'default',\n  coloredBorder = false,\n  schema,\n  onValidate,\n  onValueChange,\n  id = name,\n  disabled = false,\n}: SelectInputProps) {\n  const [localError, setLocalError] = React.useState<string | undefined>(error);\n  const hasError = !!localError || !!error;\n  const errorId = `error-${id}`;\n  const hintId = `hint-${id}`;\n\n  // Determine if component is controlled or uncontrolled\n  const isControlled = value !== undefined;\n\n  // Update local error when prop changes\n  React.useEffect(() => {\n    setLocalError(error);\n  }, [error]);\n\n  // Handle validation with the provided schema\n  const validateSelect = React.useCallback(\n    (value: string) => {\n      if (!schema) return;\n\n      const result = schema.safeParse(value);\n      if (!result.success) {\n        const errorMessage =\n          result.error.errors[0]?.message || 'Invalid selection';\n        setLocalError(errorMessage);\n        onValidate?.(false, value, errorMessage);\n      } else {\n        setLocalError(undefined);\n        onValidate?.(true, value);\n      }\n    },\n    [schema, onValidate],\n  );\n\n  // Handle selection change for shadcn Select\n  const handleValueChange = (newValue: string) => {\n    // If we have a schema, validate on change\n    if (schema) {\n      validateSelect(newValue);\n    }\n\n    // Call the original onValueChange if provided\n    onValueChange?.(newValue);\n  };\n\n  // Handle selection change for native select\n  const handleNativeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const newValue = e.target.value;\n\n    // If we have a schema, validate on change\n    if (schema) {\n      validateSelect(newValue);\n    }\n\n    // Call the original onValueChange if provided\n    onValueChange?.(newValue);\n  };\n\n  // Render native select for pill variant\n  if (variant === 'pill') {\n    return (\n      <div\n        className={cn('group/field grid gap-2', containerClassName)}\n        data-invalid={hasError}\n      >\n        <label\n          htmlFor={id}\n          className={cn(\n            'text-sm font-normal leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-data-[invalid=true]/field:text-destructive',\n            labelVariant === 'muted' && 'text-muted-foreground',\n            labelClassName,\n          )}\n        >\n          {label}\n          {required && <span aria-hidden=\"true\"> *</span>}\n        </label>\n\n        {description && (\n          <p className=\"text-xs text-muted-foreground\">{description}</p>\n        )}\n\n        <div className=\"relative\">\n          <select\n            id={id}\n            name={name}\n            onChange={handleNativeChange}\n            disabled={pending || disabled}\n            aria-invalid={hasError}\n            aria-errormessage={hasError ? errorId : undefined}\n            aria-describedby={hint ? hintId : undefined}\n            aria-required={required}\n            className={cn(\n              'h-[46px] md:text-md text-md focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#4E90F9] dark:ring-offset-black ring-offset-white',\n              'bg-muted border-0 rounded-lg px-4 w-full pr-10',\n              'text-foreground',\n              'appearance-none',\n              'md:cursor-pointer',\n              'group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive',\n              selectClassName,\n            )}\n            {...(isControlled\n              ? { value }\n              : { defaultValue: defaultValue || '' })}\n          >\n            {!defaultValue && !value && (\n              <option value=\"\" disabled>\n                {placeholder || `Select your ${label.toLowerCase()}`}\n              </option>\n            )}\n            {options.map((option) => (\n              <option\n                key={option.value}\n                value={option.value}\n                disabled={option.disabled}\n              >\n                {option.label}\n              </option>\n            ))}\n          </select>\n          <ChevronDown className=\"absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4 pointer-events-none text-muted-foreground\" />\n        </div>\n\n        {hint && !hasError && (\n          <p id={hintId} className=\"text-xs text-muted-foreground mt-1\">\n            {hint}\n          </p>\n        )}\n\n        {hasError && (\n          <p id={errorId} className=\"text-destructive text-xs\">\n            {localError || error}\n          </p>\n        )}\n      </div>\n    );\n  }\n\n  // Render shadcn Select for default variant\n  return (\n    <div\n      className={cn('group/field grid gap-2', containerClassName)}\n      data-invalid={hasError}\n    >\n      <label\n        htmlFor={id}\n        className={cn(\n          'text-sm font-normal leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-data-[invalid=true]/field:text-destructive',\n          labelVariant === 'muted' && 'text-muted-foreground',\n          labelClassName,\n        )}\n      >\n        {label}\n        {required && <span aria-hidden=\"true\"> *</span>}\n      </label>\n\n      {description && (\n        <p className=\"text-xs text-muted-foreground\">{description}</p>\n      )}\n\n      <Select\n        onValueChange={handleValueChange}\n        disabled={pending || disabled}\n        {...(isControlled ? { value } : { defaultValue })}\n      >\n        <SelectTrigger\n          id={id}\n          className={cn(\n            'h-[46px] md:text-md text-md',\n            'shadow-[0px_1px_1px_rgba(0,0,0,0.03),_0px_3px_6px_rgba(0,0,0,0.02)]',\n            'border border-input hover:border-[#4E90F9] focus:border-[#4E90F9]',\n            'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#4E90F9] dark:ring-offset-black ring-offset-white',\n            'group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive',\n            selectClassName,\n          )}\n          aria-invalid={hasError}\n          aria-errormessage={hasError ? errorId : undefined}\n          aria-describedby={hint ? hintId : undefined}\n          aria-required={required}\n        >\n          <SelectValue placeholder={placeholder} />\n        </SelectTrigger>\n        <SelectContent>\n          {options.map((option) => (\n            <SelectItem\n              className=\"h-[46px] md:text-md text-md\"\n              key={option.value}\n              value={option.value}\n              disabled={option.disabled}\n            >\n              {option.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n\n      {hint && !hasError && (\n        <p id={hintId} className=\"text-xs text-muted-foreground mt-1\">\n          {hint}\n        </p>\n      )}\n\n      {hasError && (\n        <p id={errorId} className=\"text-destructive text-xs\">\n          {localError || error}\n        </p>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/inputs/select-input.tsx"
    },
    {
      "path": "delta/inputs/select-input-demo.tsx",
      "content": "'use client';\n\nimport { SelectInput } from './select-input';\nimport { z } from 'zod';\n\nconst countryOptions = [\n  { value: 'us', label: 'United States' },\n  { value: 'ca', label: 'Canada' },\n  { value: 'uk', label: 'United Kingdom' },\n  { value: 'au', label: 'Australia' },\n  { value: 'de', label: 'Germany' },\n  { value: 'fr', label: 'France' },\n  { value: 'jp', label: 'Japan' },\n];\n\nconst roleOptions = [\n  { value: 'user', label: 'User' },\n  { value: 'editor', label: 'Editor' },\n  { value: 'admin', label: 'Administrator' },\n  { value: 'owner', label: 'Owner', disabled: true },\n];\n\nexport default function SelectInputDemo() {\n  return (\n    <div className=\"container mx-auto max-w-7xl px-4 py-8 space-y-8\">\n      <DefaultSelectInputDemo />\n      <PillSelectInputDemo />\n      <ValidationSelectInputDemo />\n      <MutedLabelSelectInputDemo />\n      <RequiredSelectInputDemo />\n      <DisabledSelectInputDemo />\n      <HintSelectInputDemo />\n      <DisabledOptionsSelectInputDemo />\n    </div>\n  );\n}\n\nexport function DefaultSelectInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Default Select Input</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <SelectInput\n          label=\"Country\"\n          name=\"country\"\n          options={countryOptions}\n          placeholder=\"Select your country\"\n          defaultValue=\"us\"\n        />\n        <SelectInput\n          label=\"Role\"\n          name=\"role\"\n          options={roleOptions}\n          variant=\"pill\"\n          placeholder=\"Select your role\"\n          defaultValue=\"user\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function PillSelectInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Pill Variant</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <SelectInput\n          label=\"Country\"\n          name=\"country-pill\"\n          options={countryOptions}\n          placeholder=\"Select your country\"\n          variant=\"pill\"\n        />\n        <SelectInput\n          label=\"Role\"\n          name=\"role-pill\"\n          options={roleOptions}\n          placeholder=\"Select your role\"\n          variant=\"pill\"\n          coloredBorder\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function ValidationSelectInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">With Validation</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <SelectInput\n          label=\"Country\"\n          name=\"country-validation\"\n          options={countryOptions}\n          placeholder=\"Select your country\"\n          error=\"Please select a country\"\n          schema={z.string().min(1, 'Please select a country')}\n        />\n        <SelectInput\n          label=\"Role\"\n          name=\"role-validation\"\n          options={roleOptions}\n          placeholder=\"Select your role\"\n          error=\"Please select a valid role\"\n          schema={z.string().min(1, 'Please select a valid role')}\n          variant=\"pill\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function MutedLabelSelectInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Muted Label Variant</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <SelectInput\n          label=\"Country\"\n          name=\"country-muted\"\n          options={countryOptions}\n          placeholder=\"Select your country\"\n          labelVariant=\"muted\"\n        />\n        <SelectInput\n          label=\"Role\"\n          name=\"role-muted\"\n          options={roleOptions}\n          placeholder=\"Select your role\"\n          labelVariant=\"muted\"\n          variant=\"pill\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function RequiredSelectInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Required Fields</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <SelectInput\n          label=\"Country\"\n          name=\"country-required\"\n          options={countryOptions}\n          placeholder=\"Select your country\"\n          required\n        />\n        <SelectInput\n          label=\"Role\"\n          name=\"role-required\"\n          options={roleOptions}\n          placeholder=\"Select your role\"\n          required\n          variant=\"pill\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function DisabledSelectInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Disabled State</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <SelectInput\n          label=\"Country\"\n          name=\"country-disabled\"\n          options={countryOptions}\n          placeholder=\"Select your country\"\n          disabled\n        />\n        <SelectInput\n          label=\"Role\"\n          name=\"role-disabled\"\n          options={roleOptions}\n          placeholder=\"Select your role\"\n          disabled\n          variant=\"pill\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function HintSelectInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">With Hint Text</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <SelectInput\n          label=\"Country\"\n          name=\"country-hint\"\n          options={countryOptions}\n          placeholder=\"Select your country\"\n          hint=\"This will determine your default currency\"\n        />\n        <SelectInput\n          label=\"Role\"\n          name=\"role-hint\"\n          options={roleOptions}\n          placeholder=\"Select your role\"\n          hint=\"Your role determines your permissions\"\n          variant=\"pill\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function DisabledOptionsSelectInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">With Disabled Options</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <SelectInput\n          label=\"Role\"\n          name=\"role-disabled-options\"\n          options={roleOptions}\n          placeholder=\"Select your role\"\n          description=\"Some roles may not be available\"\n        />\n        <SelectInput\n          label=\"Role\"\n          name=\"role-disabled-options-pill\"\n          options={roleOptions}\n          placeholder=\"Select your role\"\n          description=\"Some roles may not be available\"\n          variant=\"pill\"\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/inputs/select-input-demo.tsx"
    }
  ]
}