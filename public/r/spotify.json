{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "spotify",
  "type": "registry:component",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "files": [
    {
      "path": "registry/media/spotify.tsx",
      "content": "\"use client\"\n\nimport React, { useEffect, useRef, useState } from \"react\"\n\ninterface SpotifyProps {\n  id: string\n  type?: \"track\" | \"playlist\"\n  width?: string | number\n  height?: string | number\n}\n\nexport const Spotify: React.FC<SpotifyProps> = ({\n  id,\n  type,\n  width = \"100%\",\n  height,\n}) => {\n  // Infer type if not provided\n  let resolvedType: \"track\" | \"playlist\" = \"track\"\n  if (type) {\n    resolvedType = type\n  } else {\n    // Heuristic: playlist ids are usually longer and sometimes start with '37' or '5', or contain 'playlist' in the url\n    if (id.length > 22 || id.startsWith(\"37\") || id.startsWith(\"5\")) {\n      resolvedType = \"playlist\"\n    }\n  }\n  const src = `https://open.spotify.com/embed/${resolvedType}/${id}?utm_source=generator`\n  // Default height: 152 for track, 380 for playlist\n  const resolvedHeight = height ?? (resolvedType === \"playlist\" ? 380 : 152)\n\n  // Memoize loaded state per id+type\n  const loadedMapRef = useRef<{ [key: string]: boolean }>({})\n  const key = `${resolvedType}:${id}`\n  const [loaded, setLoaded] = useState(() => loadedMapRef.current[key] || false)\n\n  useEffect(() => {\n    setLoaded(loadedMapRef.current[key] || false)\n  }, [key])\n\n  return (\n    <div className=\"my-4 relative\" style={{ width, height: resolvedHeight }}>\n      <iframe\n        src={src}\n        width={width}\n        height={resolvedHeight}\n        allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\"\n        loading=\"lazy\"\n        className=\"rounded-2xl transition-opacity duration-300\"\n        style={{\n          opacity: loaded ? 1 : 0,\n          pointerEvents: loaded ? \"auto\" : \"none\",\n          position: \"relative\",\n          zIndex: 2,\n        }}\n        onLoad={() => {\n          loadedMapRef.current[key] = true\n          setLoaded(true)\n        }}\n      />\n      {!loaded && (\n        <div\n          className=\"absolute top-0 left-0 w-full h-full rounded-2xl bg-muted animate-pulse\"\n          style={{ backgroundColor: \"var(--muted)\", zIndex: 1 }}\n        />\n      )}\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "/components/delta/spotify.tsx"
    }
  ]
}