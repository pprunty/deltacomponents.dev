{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "switch-input",
  "type": "registry:component",
  "title": "Switch Input",
  "description": "A component for switch-input",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "delta/components/switch-input.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { motion, HTMLMotionProps } from 'framer-motion';\nimport { cn } from '@/lib/utils';\nimport type { z } from 'zod';\n\n// CustomSwitch component moved into this file\ninterface CustomSwitchProps\n  extends Omit<\n    HTMLMotionProps<'button'>,\n    'checked' | 'defaultChecked' | 'onChange'\n  > {\n  checked?: boolean;\n  defaultChecked?: boolean;\n  onCheckedChange?: (checked: boolean) => void;\n  disabled?: boolean;\n  size?: 'default' | 'large';\n  /** Custom color for the active/checked state (CSS color or Tailwind class) */\n  activeColor?: string;\n  /** Switch shape variant */\n  variant?: 'pill' | 'rectangular';\n  /** Extends the clickable area beyond the visible component */\n  extendedClickArea?: boolean;\n}\n\nconst CustomSwitch = React.forwardRef<HTMLButtonElement, CustomSwitchProps>(\n  (\n    {\n      className,\n      checked,\n      defaultChecked,\n      onCheckedChange,\n      disabled,\n      size = 'default',\n      activeColor,\n      variant = 'rectangular',\n      extendedClickArea = false,\n      ...props\n    },\n    ref,\n  ) => {\n    const [isChecked, setIsChecked] = React.useState<boolean>(\n      checked !== undefined ? checked : defaultChecked || false,\n    );\n\n    // Update checked state when controlled prop changes\n    React.useEffect(() => {\n      if (checked !== undefined) {\n        setIsChecked(checked);\n      }\n    }, [checked]);\n\n    const handleClick = () => {\n      if (disabled) return;\n\n      const newChecked = !isChecked;\n      setIsChecked(newChecked);\n      onCheckedChange?.(newChecked);\n    };\n\n    // Custom active color style if provided\n    const activeColorStyle =\n      activeColor && isChecked ? { backgroundColor: activeColor } : {};\n\n    // Calculate toggle position based on size and variant\n    const toggleXPosition = () => {\n      if (size === 'large') {\n        return isChecked ? 24 : 2;\n      }\n      return isChecked ? 20 : 2;\n    };\n\n    return (\n      <motion.button\n        type=\"button\"\n        role=\"switch\"\n        aria-checked={isChecked}\n        data-state={isChecked ? 'checked' : 'unchecked'}\n        disabled={disabled}\n        ref={ref}\n        onClick={handleClick}\n        style={activeColorStyle}\n        className={cn(\n          'relative flex shrink-0 cursor-pointer border border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50',\n          variant === 'pill' ? 'rounded-full' : 'rounded-md',\n          isChecked ? (activeColor ? '' : 'bg-primary') : 'bg-muted',\n          size === 'large' ? 'h-[30px] w-[53px]' : 'h-[24px] w-[44px]',\n          extendedClickArea &&\n            \"before:absolute before:-inset-10 before:block before:content-['']\",\n          className,\n        )}\n        whileTap={{ scale: 0.95 }}\n        {...props}\n      >\n        <motion.div\n          initial={false}\n          animate={{\n            x: toggleXPosition(),\n          }}\n          transition={{\n            type: 'spring',\n            stiffness: 500,\n            damping: 30,\n          }}\n          className={cn(\n            'absolute top-0 bottom-0 left-0 m-auto shadow-md',\n            activeColor ? 'bg-white' : `dark:bg-black bg-background`,\n            variant === 'pill' ? 'rounded-full' : 'rounded-md',\n            size === 'large' ? 'h-6 w-6' : 'h-5 w-5',\n          )}\n        />\n      </motion.button>\n    );\n  },\n);\n\nCustomSwitch.displayName = 'CustomSwitch';\n\nexport { CustomSwitch };\n\nexport interface SwitchInputProps {\n  /** The label for the switch */\n  label: string;\n  /** The name of the switch field (used for form submission) */\n  name: string;\n  /** Optional description text to display below the switch */\n  description?: string;\n  /** Optional hint text to display below the switch */\n  hint?: string;\n  /** Error message to display (typically from Zod validation) */\n  error?: string;\n  /** Whether the field is required */\n  required?: boolean;\n  /** Whether the field is in a loading/pending state */\n  pending?: boolean;\n  /** Default checked state */\n  defaultChecked?: boolean;\n  /** Controlled checked state */\n  checked?: boolean;\n  /** Container className for the entire component */\n  containerClassName?: string;\n  /** Switch className */\n  switchClassName?: string;\n  /** Label className */\n  labelClassName?: string;\n  /** Label variant - 'default' or 'muted' */\n  labelVariant?: 'default' | 'muted';\n  /** Zod schema for validation (optional - can be handled at the form level) */\n  schema?: z.ZodType<boolean>;\n  /** Callback when validation occurs */\n  onValidate?: (isValid: boolean, value: boolean, error?: string) => void;\n  /** Callback when switch state changes */\n  onCheckedChange?: (checked: boolean) => void;\n  /** ID for the switch */\n  id?: string;\n  /** Whether the switch is disabled */\n  disabled?: boolean;\n  /** Size of the switch - 'default' or 'large' (1.2x default size) */\n  size?: 'default' | 'large';\n  /** Custom color for the active/checked state (CSS color or Tailwind class) */\n  activeColor?: string;\n  /** Switch shape variant - 'pill' or 'rectangular' */\n  variant?: 'pill' | 'rectangular';\n  /** Extends the clickable area beyond the visible component */\n  extendedClickArea?: boolean;\n}\n\n/**\n * SwitchInput component that integrates with Zod validation\n */\nexport function SwitchInput({\n  label,\n  name,\n  description,\n  hint,\n  error,\n  required = false,\n  pending = false,\n  defaultChecked = false,\n  checked,\n  containerClassName,\n  switchClassName,\n  labelClassName,\n  labelVariant = 'default',\n  schema,\n  onValidate,\n  onCheckedChange,\n  id = name,\n  disabled = false,\n  size = 'default',\n  activeColor,\n  variant = 'rectangular',\n  extendedClickArea = false, // Default to true for better mobile usability\n}: SwitchInputProps) {\n  const [localError, setLocalError] = React.useState<string | undefined>(error);\n  const [isChecked, setIsChecked] = React.useState<boolean>(\n    checked !== undefined ? checked : defaultChecked,\n  );\n  const hasError = !!localError || !!error;\n  const errorId = `error-${id}`;\n  const hintId = `hint-${id}`;\n\n  // Update local error when prop changes\n  React.useEffect(() => {\n    setLocalError(error);\n  }, [error]);\n\n  // Update checked state when controlled prop changes\n  React.useEffect(() => {\n    if (checked !== undefined) {\n      setIsChecked(checked);\n    }\n  }, [checked]);\n\n  // Handle validation with the provided schema\n  const validateSwitch = React.useCallback(\n    (value: boolean) => {\n      if (!schema) return;\n\n      const result = schema.safeParse(value);\n      if (!result.success) {\n        const errorMessage =\n          result.error.errors[0]?.message || 'Invalid selection';\n        setLocalError(errorMessage);\n        onValidate?.(false, value, errorMessage);\n      } else {\n        setLocalError(undefined);\n        onValidate?.(true, value);\n      }\n    },\n    [schema, onValidate],\n  );\n\n  // Handle switch change\n  const handleCheckedChange = (checked: boolean) => {\n    setIsChecked(checked);\n\n    // If we have a schema, validate on change\n    if (schema) {\n      validateSwitch(checked);\n    }\n\n    // Call the original onCheckedChange if provided\n    onCheckedChange?.(checked);\n  };\n\n  return (\n    <div\n      className={cn('group/field space-y-2', containerClassName)}\n      data-invalid={hasError}\n    >\n      <div className=\"flex items-center justify-between space-x-2\">\n        <div className=\"space-y-1\">\n          <label\n            htmlFor={id}\n            className={cn(\n              'text-md font-semibold leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-data-[invalid=true]/field:text-destructive',\n              labelVariant === 'muted' && 'text-muted-foreground',\n              labelClassName,\n            )}\n          >\n            {label}\n            {required && <span aria-hidden=\"true\"> *</span>}\n          </label>\n          {description && (\n            <p className=\"text-xs text-muted-foreground\">{description}</p>\n          )}\n        </div>\n        <CustomSwitch\n          id={id}\n          defaultChecked={checked === undefined ? defaultChecked : undefined}\n          checked={checked !== undefined ? checked : undefined}\n          disabled={pending || disabled}\n          onCheckedChange={handleCheckedChange}\n          aria-invalid={hasError}\n          aria-errormessage={hasError ? errorId : undefined}\n          aria-describedby={hint ? hintId : undefined}\n          aria-required={required}\n          size={size}\n          activeColor={activeColor}\n          variant={variant}\n          extendedClickArea={extendedClickArea}\n          className={cn(\n            'group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive',\n            switchClassName,\n          )}\n        />\n      </div>\n\n      {hint && !hasError && (\n        <p id={hintId} className=\"text-xs text-muted-foreground mt-1\">\n          {hint}\n        </p>\n      )}\n\n      {hasError && (\n        <p id={errorId} className=\"text-destructive text-xs\">\n          {localError || error}\n        </p>\n      )}\n\n      {/* Hidden input for form submission */}\n      <input type=\"hidden\" name={name} value={isChecked ? 'true' : 'false'} />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/components/switch-input.tsx"
    },
    {
      "path": "delta/examples/switch-input-basic-demo.tsx",
      "content": "\"use client\"\n\nimport { CustomSwitch } from \"@/delta/components/switch-input\"\n\nexport default function SwitchInputBasicDemo() {\n  return (\n    <div className=\"flex items-center justify-center p-4\">\n      <CustomSwitch defaultChecked/>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "delta/examples/switch-input-basic-demo.tsx"
    },
    {
      "path": "content/docs/switch-input.mdx",
      "content": "export const metadata = {\n  title: 'SwitchInput | Delta Components',\n  description: 'A customizable switch input component with validation, variants, and accessibility features. Built with shadcn/ui and featuring Zod validation integration.',\n  keywords: ['shadcn/ui', 'react', 'switch', 'toggle', 'form input', 'validation', 'zod', 'react components', 'delta components', 'nextjs components', 'tailwind components'],\n  alternates: {\n    canonical: 'https://deltacomponents.dev/docs/switch-input',\n  },\n  category: 'component',\n  openGraph: {\n    title: 'SwitchInput Component | Delta Components',\n    description: 'A customizable switch input component with validation, variants, and accessibility features.',\n    type: 'article',\n    url: 'https://deltacomponents.dev/docs/switch-input',\n    images: [\n      {\n        url: 'https://deltacomponents.dev/og/switch-input.png',\n        width: 1200,\n        height: 630,\n        alt: 'SwitchInput Component Preview'\n      }\n    ],\n    article: {\n      authors: ['Patrick Prunty'],\n      tags: ['UI Components', 'React', 'Shadcn', 'Form', 'Input', 'Validation'],\n      section: 'Components'\n    },\n    siteName: 'Delta Components'\n  },\n  twitter: {\n    card: 'summary_large_image',\n    title: 'SwitchInput Component | Delta Components',\n    description: 'A customizable switch input component with validation, variants, and accessibility features.',\n    images: ['https://deltacomponents.dev/og/switch-input.png'],\n    creator: '@pprunty_',\n    site: '@deltacomponents'\n  },\n  robots: {\n    index: true,\n    follow: true,\n    nocache: false,\n    googleBot: {\n      index: true,\n      follow: true,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n      'max-video-preview': -1\n    }\n  }\n}\n\n# SwitchInput\n\nA customizable switch input component with validation, variants, and accessibility features.\n\n## Basic Usage\n\n<ComponentTabs name=\"switch-input-basic\" />\n\n<InstallationInstructions componentName=\"switch-input\" />\n\n## Props\n\n<Table>\n  <TableHeader>\n    <TableRow>\n      <TableHead>Prop</TableHead>\n      <TableHead>Type</TableHead>\n      <TableHead>Default</TableHead>\n      <TableHead>Description</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell>`name`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>Required</TableCell>\n      <TableCell>The name of the switch field</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`description`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Optional description text below the label</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`hint`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Optional hint text below the switch</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`error`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Error message to display</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`required`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether the field is required</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`pending`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether the field is in a loading state</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`defaultChecked`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Default checked state</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`checked`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Controlled checked state</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`size`</TableCell>\n      <TableCell>`'default' | 'large'`</TableCell>\n      <TableCell>`'default'`</TableCell>\n      <TableCell>Size of the switch</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`variant`</TableCell>\n      <TableCell>`'pill' | 'rectangular'`</TableCell>\n      <TableCell>`'rectangular'`</TableCell>\n      <TableCell>Switch shape variant</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`activeColor`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Custom color for the active state</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`extendedClickArea`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Extends the clickable area beyond visible bounds</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`schema`</TableCell>\n      <TableCell>`z.ZodType<boolean>`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Zod schema for validation</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`onValidate`</TableCell>\n      <TableCell>`(isValid: boolean, value: boolean, error?: string) => void`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Callback when validation occurs</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`onCheckedChange`</TableCell>\n      <TableCell>`(checked: boolean) => void`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Callback when switch state changes</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n\n## Features\n\n- Customizable size and shape variants\n- Built-in validation with Zod integration\n- Accessible with proper ARIA attributes\n- Extended click area for better mobile usability\n- Custom colors for active state\n- Support for descriptions and hints\n- Error handling and display\n- Loading state support\n- Required field validation\n\n\n<ComponentTabs name=\"switch-input-variants\" />\n\n\n## Usage\n\n```tsx\nimport { SwitchInput } from \"@/delta/components/switch-input\"\nimport { z } from \"zod\"\n\nexport default function SwitchInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <SwitchInput \n        label=\"Enable Notifications\"\n        name=\"notifications\"\n        description=\"Receive updates about your account\"\n        defaultChecked\n      />\n      <SwitchInput \n        label=\"Dark Mode\"\n        name=\"dark-mode\"\n        variant=\"pill\"\n        hint=\"Toggle between light and dark theme\"\n      />\n      <SwitchInput \n        label=\"Accept Terms\"\n        name=\"terms\"\n        required\n        schema={z.literal(true, {\n          errorMap: () => ({ message: 'You must accept the terms' }),\n        })}\n      />\n    </div>\n  )\n}\n```\n\n## Custom Styling\n\nYou can customize the switch appearance using Tailwind CSS classes:\n\n```tsx\n<SwitchInput \n  label=\"Custom Style\"\n  name=\"custom\"\n  className=\"bg-blue-500\"\n  activeColor=\"bg-purple-500\"\n/>\n```\n\n## Accessibility\n\nThe SwitchInput component follows WAI-ARIA guidelines and includes:\n- Proper ARIA attributes for switch role\n- Keyboard navigation support\n- Screen reader compatibility\n- Error message association\n- Required field indication\n- Loading state indication\n",
      "type": "registry:component",
      "target": "content/docs/switch-input.mdx"
    },
    {
      "path": "delta/examples/switch-input-variants-demo.tsx",
      "content": "\"use client\"\n\nimport { SwitchInput } from \"@/delta/components/switch-input\"\n\nexport default function SwitchInputVariantsDemo() {\n  return (\n    <div className=\"space-y-8 p-6 max-w-2xl mx-auto\">\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold\">Appearance Settings</h3>\n        <div className=\"space-y-6\">\n          <SwitchInput \n            label=\"Dark Mode\"\n            name=\"dark-mode\"\n            variant=\"pill\"\n            hint=\"Toggle between light and dark theme\"\n            defaultChecked\n          />\n          <SwitchInput \n            label=\"Notifications\"\n            name=\"notifications\"\n            description=\"Receive updates about your account\"\n            defaultChecked\n          />\n          <SwitchInput \n            label=\"Large Size\"\n            name=\"large-size\"\n            size=\"large\"\n            hint=\"A larger switch for better visibility\"\n            defaultChecked\n          />\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold\">Custom Colors</h3>\n        <div className=\"space-y-6\">\n          <SwitchInput \n            label=\"Success State\"\n            name=\"success\"\n            activeColor=\"#22c55e\"\n            variant=\"pill\"\n            hint=\"Green color for success states\"\n            defaultChecked\n          />\n          <SwitchInput \n            label=\"Warning State\"\n            name=\"warning\"\n            activeColor=\"#f59e0b\"\n            variant=\"pill\"\n            hint=\"Orange color for warning states\"\n            defaultChecked\n          />\n          <SwitchInput \n            label=\"Danger State\"\n            name=\"danger\"\n            activeColor=\"#ef4444\"\n            variant=\"pill\"\n            hint=\"Red color for danger states\"\n            defaultChecked\n          />\n          <SwitchInput \n            label=\"Info State\"\n            name=\"info\"\n            activeColor=\"#3b82f6\"\n            variant=\"pill\"\n            hint=\"Blue color for info states\"\n            defaultChecked\n          />\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold\">Form States</h3>\n        <div className=\"space-y-6\">\n          <SwitchInput \n            label=\"Required Field\"\n            name=\"required\"\n            required\n            error=\"This field is required\"\n            hint=\"This switch must be enabled\"\n          />\n          <SwitchInput \n            label=\"Disabled State\"\n            name=\"disabled\"\n            disabled\n            defaultChecked\n            hint=\"This switch cannot be toggled\"\n          />\n          <SwitchInput \n            label=\"With Description\"\n            name=\"description\"\n            description=\"This is a detailed description of what this switch does\"\n            defaultChecked\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "delta/examples/switch-input-variants-demo.tsx"
    }
  ]
}