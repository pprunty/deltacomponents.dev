{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "switch-input",
  "type": "registry:component",
  "title": "Switch Input",
  "description": "A switch toggle component with validation and label support",
  "dependencies": [
    "zod",
    "framer-motion"
  ],
  "files": [
    {
      "path": "delta/inputs/switch-input.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { motion, HTMLMotionProps } from 'framer-motion';\nimport { cn } from '@/lib/utils';\nimport type { z } from 'zod';\n\n// CustomSwitch component moved into this file\ninterface CustomSwitchProps\n  extends Omit<\n    HTMLMotionProps<'button'>,\n    'checked' | 'defaultChecked' | 'onChange'\n  > {\n  checked?: boolean;\n  defaultChecked?: boolean;\n  onCheckedChange?: (checked: boolean) => void;\n  disabled?: boolean;\n  size?: 'default' | 'large';\n  /** Custom color for the active/checked state (CSS color or Tailwind class) */\n  activeColor?: string;\n  /** Switch shape variant */\n  variant?: 'pill' | 'rectangular';\n  /** Extends the clickable area beyond the visible component */\n  extendedClickArea?: boolean;\n}\n\nconst CustomSwitch = React.forwardRef<HTMLButtonElement, CustomSwitchProps>(\n  (\n    {\n      className,\n      checked,\n      defaultChecked,\n      onCheckedChange,\n      disabled,\n      size = 'default',\n      activeColor,\n      variant = 'rectangular',\n      extendedClickArea = false,\n      ...props\n    },\n    ref,\n  ) => {\n    const [isChecked, setIsChecked] = React.useState<boolean>(\n      checked !== undefined ? checked : defaultChecked || false,\n    );\n\n    // Update checked state when controlled prop changes\n    React.useEffect(() => {\n      if (checked !== undefined) {\n        setIsChecked(checked);\n      }\n    }, [checked]);\n\n    const handleClick = () => {\n      if (disabled) return;\n\n      const newChecked = !isChecked;\n      setIsChecked(newChecked);\n      onCheckedChange?.(newChecked);\n    };\n\n    // Custom active color style if provided\n    const activeColorStyle =\n      activeColor && isChecked ? { backgroundColor: activeColor } : {};\n\n    // Calculate toggle position based on size and variant\n    const toggleXPosition = () => {\n      if (size === 'large') {\n        return isChecked ? 24 : 2;\n      }\n      return isChecked ? 20 : 2;\n    };\n\n    return (\n      <motion.button\n        type=\"button\"\n        role=\"switch\"\n        aria-checked={isChecked}\n        data-state={isChecked ? 'checked' : 'unchecked'}\n        disabled={disabled}\n        ref={ref}\n        onClick={handleClick}\n        style={activeColorStyle}\n        className={cn(\n          'relative flex shrink-0 cursor-pointer border border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50',\n          variant === 'pill' ? 'rounded-full' : 'rounded-md',\n          isChecked ? (activeColor ? '' : 'bg-primary') : 'bg-muted',\n          size === 'large' ? 'h-[30px] w-[53px]' : 'h-[24px] w-[44px]',\n          extendedClickArea &&\n            \"before:absolute before:-inset-10 before:block before:content-['']\",\n          className,\n        )}\n        whileTap={{ scale: 0.95 }}\n        {...props}\n      >\n        <motion.div\n          initial={false}\n          animate={{\n            x: toggleXPosition(),\n          }}\n          transition={{\n            type: 'spring',\n            stiffness: 500,\n            damping: 30,\n          }}\n          className={cn(\n            'absolute top-0 bottom-0 left-0 m-auto shadow-md',\n            activeColor ? 'bg-white' : `dark:bg-black bg-background`,\n            variant === 'pill' ? 'rounded-full' : 'rounded-md',\n            size === 'large' ? 'h-6 w-6' : 'h-5 w-5',\n          )}\n        />\n      </motion.button>\n    );\n  },\n);\n\nCustomSwitch.displayName = 'CustomSwitch';\n\nexport interface SwitchInputProps {\n  /** The label for the switch */\n  label: string;\n  /** The name of the switch field (used for form submission) */\n  name: string;\n  /** Optional description text to display below the switch */\n  description?: string;\n  /** Optional hint text to display below the switch */\n  hint?: string;\n  /** Error message to display (typically from Zod validation) */\n  error?: string;\n  /** Whether the field is required */\n  required?: boolean;\n  /** Whether the field is in a loading/pending state */\n  pending?: boolean;\n  /** Default checked state */\n  defaultChecked?: boolean;\n  /** Controlled checked state */\n  checked?: boolean;\n  /** Container className for the entire component */\n  containerClassName?: string;\n  /** Switch className */\n  switchClassName?: string;\n  /** Label className */\n  labelClassName?: string;\n  /** Label variant - 'default' or 'muted' */\n  labelVariant?: 'default' | 'muted';\n  /** Zod schema for validation (optional - can be handled at the form level) */\n  schema?: z.ZodType<boolean>;\n  /** Callback when validation occurs */\n  onValidate?: (isValid: boolean, value: boolean, error?: string) => void;\n  /** Callback when switch state changes */\n  onCheckedChange?: (checked: boolean) => void;\n  /** ID for the switch */\n  id?: string;\n  /** Whether the switch is disabled */\n  disabled?: boolean;\n  /** Size of the switch - 'default' or 'large' (1.2x default size) */\n  size?: 'default' | 'large';\n  /** Custom color for the active/checked state (CSS color or Tailwind class) */\n  activeColor?: string;\n  /** Switch shape variant - 'pill' or 'rectangular' */\n  variant?: 'pill' | 'rectangular';\n  /** Extends the clickable area beyond the visible component */\n  extendedClickArea?: boolean;\n}\n\n/**\n * SwitchInput component that integrates with Zod validation\n */\nexport function SwitchInput({\n  label,\n  name,\n  description,\n  hint,\n  error,\n  required = false,\n  pending = false,\n  defaultChecked = false,\n  checked,\n  containerClassName,\n  switchClassName,\n  labelClassName,\n  labelVariant = 'default',\n  schema,\n  onValidate,\n  onCheckedChange,\n  id = name,\n  disabled = false,\n  size = 'default',\n  activeColor,\n  variant = 'rectangular',\n  extendedClickArea = false, // Default to true for better mobile usability\n}: SwitchInputProps) {\n  const [localError, setLocalError] = React.useState<string | undefined>(error);\n  const [isChecked, setIsChecked] = React.useState<boolean>(\n    checked !== undefined ? checked : defaultChecked,\n  );\n  const hasError = !!localError || !!error;\n  const errorId = `error-${id}`;\n  const hintId = `hint-${id}`;\n\n  // Update local error when prop changes\n  React.useEffect(() => {\n    setLocalError(error);\n  }, [error]);\n\n  // Update checked state when controlled prop changes\n  React.useEffect(() => {\n    if (checked !== undefined) {\n      setIsChecked(checked);\n    }\n  }, [checked]);\n\n  // Handle validation with the provided schema\n  const validateSwitch = React.useCallback(\n    (value: boolean) => {\n      if (!schema) return;\n\n      const result = schema.safeParse(value);\n      if (!result.success) {\n        const errorMessage =\n          result.error.errors[0]?.message || 'Invalid selection';\n        setLocalError(errorMessage);\n        onValidate?.(false, value, errorMessage);\n      } else {\n        setLocalError(undefined);\n        onValidate?.(true, value);\n      }\n    },\n    [schema, onValidate],\n  );\n\n  // Handle switch change\n  const handleCheckedChange = (checked: boolean) => {\n    setIsChecked(checked);\n\n    // If we have a schema, validate on change\n    if (schema) {\n      validateSwitch(checked);\n    }\n\n    // Call the original onCheckedChange if provided\n    onCheckedChange?.(checked);\n  };\n\n  return (\n    <div\n      className={cn('group/field space-y-2', containerClassName)}\n      data-invalid={hasError}\n    >\n      <div className=\"flex items-center justify-between space-x-2\">\n        <div className=\"space-y-1\">\n          <label\n            htmlFor={id}\n            className={cn(\n              'text-md font-semibold leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-data-[invalid=true]/field:text-destructive',\n              labelVariant === 'muted' && 'text-muted-foreground',\n              labelClassName,\n            )}\n          >\n            {label}\n            {required && <span aria-hidden=\"true\"> *</span>}\n          </label>\n          {description && (\n            <p className=\"text-xs text-muted-foreground\">{description}</p>\n          )}\n        </div>\n        <CustomSwitch\n          id={id}\n          defaultChecked={checked === undefined ? defaultChecked : undefined}\n          checked={checked !== undefined ? checked : undefined}\n          disabled={pending || disabled}\n          onCheckedChange={handleCheckedChange}\n          aria-invalid={hasError}\n          aria-errormessage={hasError ? errorId : undefined}\n          aria-describedby={hint ? hintId : undefined}\n          aria-required={required}\n          size={size}\n          activeColor={activeColor}\n          variant={variant}\n          extendedClickArea={extendedClickArea}\n          className={cn(\n            'group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive',\n            switchClassName,\n          )}\n        />\n      </div>\n\n      {hint && !hasError && (\n        <p id={hintId} className=\"text-xs text-muted-foreground mt-1\">\n          {hint}\n        </p>\n      )}\n\n      {hasError && (\n        <p id={errorId} className=\"text-destructive text-xs\">\n          {localError || error}\n        </p>\n      )}\n\n      {/* Hidden input for form submission */}\n      <input type=\"hidden\" name={name} value={isChecked ? 'true' : 'false'} />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/inputs/switch-input.tsx"
    },
    {
      "path": "delta/inputs/switch-input-demo.tsx",
      "content": "'use client';\n\nimport { SwitchInput } from './switch-input';\nimport { z } from 'zod';\n\nexport default function SwitchInputDemo() {\n  return (\n    <div className=\"container mx-auto max-w-7xl px-4 py-8 space-y-12\">\n      <h1 className=\"text-3xl font-bold mb-8 text-center\">\n        Custom Switch Input Demo\n      </h1>\n\n      <ExtendedClickAreaDemo />\n      <VariantsDemo />\n      <SizeVariantsDemo />\n      <CustomColorSwitch />\n      <DefaultSwitchInputDemo />\n      <ValidationSwitchInputDemo />\n      <MutedLabelSwitchInputDemo />\n      <RequiredSwitchInputDemo />\n      <DisabledSwitchInputDemo />\n      <HintSwitchInputDemo />\n      <DescriptionSwitchInputDemo />\n    </div>\n  );\n}\n\nexport function ExtendedClickAreaDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-2xl font-semibold\">Extended Click Area</h2>\n      <p className=\"text-muted-foreground mb-4\">\n        The extended click area creates an invisible touch target around the\n        switch, making it easier to interact with, especially on mobile devices.\n        Meaning, you can \"miss\" clicking the button but still trigger its click\n        handler.\n      </p>\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <div className=\"relative border border-dashed border-muted-foreground/30 rounded-lg p-12 flex justify-center\">\n          <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n            <div className=\"w-20 h-20 rounded-lg\"></div>\n          </div>\n          <SwitchInput\n            label=\"With Extended Click Area\"\n            name=\"extended-click-area\"\n            extendedClickArea={true}\n            containerClassName=\"w-full max-w-xs\"\n            variant=\"pill\"\n          />\n        </div>\n        <div className=\"relative border border-dashed border-muted-foreground/30 rounded-lg p-12 flex justify-center\">\n          <SwitchInput\n            label=\"Without Extended Click Area\"\n            name=\"no-extended-click-area\"\n            extendedClickArea={false}\n            containerClassName=\"w-full max-w-xs\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport function VariantsDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-2xl font-semibold\">Shape Variants</h2>\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <SwitchInput\n          label=\"Pill\"\n          name=\"pill-variant\"\n          variant=\"pill\"\n          defaultChecked\n        />\n        <SwitchInput\n          label=\"Rectangular (Default)\"\n          name=\"rectangular-variant\"\n          variant=\"rectangular\"\n          defaultChecked\n        />\n        <SwitchInput\n          label=\"Large Pill\"\n          name=\"large-pill\"\n          variant=\"pill\"\n          size=\"large\"\n          defaultChecked\n        />\n        <SwitchInput\n          label=\"Large Rectangular\"\n          name=\"large-rectangular\"\n          variant=\"rectangular\"\n          size=\"large\"\n          defaultChecked\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function SizeVariantsDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-2xl font-semibold\">Size Variants</h2>\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <SwitchInput label=\"Default Size\" name=\"default-size\" defaultChecked />\n        <SwitchInput\n          label=\"Large Size (1.2x)\"\n          name=\"large-size\"\n          size=\"large\"\n          defaultChecked\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function CustomColorSwitch() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-2xl font-semibold\">Custom Colors</h2>\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <SwitchInput\n          label=\"Success\"\n          name=\"success-switch\"\n          activeColor=\"#22c55e\"\n          defaultChecked\n        />\n        <SwitchInput\n          label=\"Warning\"\n          name=\"warning-switch\"\n          activeColor=\"#f59e0b\"\n          defaultChecked\n        />\n        <SwitchInput\n          label=\"Info\"\n          name=\"info-switch\"\n          activeColor=\"#3b82f6\"\n          defaultChecked\n        />\n        <SwitchInput\n          label=\"Danger\"\n          name=\"danger-switch\"\n          activeColor=\"#ef4444\"\n          defaultChecked\n        />\n        <SwitchInput\n          label=\"Rectangular Success\"\n          name=\"rect-success-switch\"\n          activeColor=\"#22c55e\"\n          variant=\"rectangular\"\n          defaultChecked\n        />\n        <SwitchInput\n          label=\"Rectangular Danger\"\n          name=\"rect-danger-switch\"\n          activeColor=\"#ef4444\"\n          variant=\"rectangular\"\n          defaultChecked\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function DefaultSwitchInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-2xl font-semibold\">Default Switch Input</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <SwitchInput label=\"Dark Mode\" name=\"dark-mode\" variant=\"pill\" />\n        <SwitchInput\n          label=\"Notifications\"\n          name=\"notifications\"\n          defaultChecked\n          variant=\"pill\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function ValidationSwitchInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-2xl font-semibold\">With Validation</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <SwitchInput\n          label=\"Accept Terms\"\n          name=\"terms-validation\"\n          error=\"You must accept the terms\"\n          schema={z.literal(true, {\n            errorMap: () => ({ message: 'You must accept the terms' }),\n          })}\n        />\n        <SwitchInput\n          label=\"Data Sharing\"\n          name=\"data-sharing-validation\"\n          error=\"Data sharing is required\"\n          schema={z.literal(true, {\n            errorMap: () => ({ message: 'Data sharing is required' }),\n          })}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function MutedLabelSwitchInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-2xl font-semibold\">Muted Label Variant</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <SwitchInput label=\"Auto-save\" name=\"auto-save\" labelVariant=\"muted\" />\n        <SwitchInput\n          label=\"Sound Effects\"\n          name=\"sound-effects\"\n          labelVariant=\"muted\"\n          defaultChecked\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function RequiredSwitchInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-2xl font-semibold\">Required Fields</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <SwitchInput\n          label=\"Accept Privacy Policy\"\n          name=\"privacy-policy\"\n          required\n        />\n        <SwitchInput label=\"Data Processing\" name=\"data-processing\" required />\n      </div>\n    </div>\n  );\n}\n\nexport function DisabledSwitchInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-2xl font-semibold\">Disabled State</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <SwitchInput label=\"Premium Feature\" name=\"premium-feature\" disabled />\n        <SwitchInput\n          label=\"System Setting\"\n          name=\"system-setting\"\n          disabled\n          defaultChecked\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function HintSwitchInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-2xl font-semibold\">With Hint Text</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <SwitchInput\n          label=\"Two-factor Authentication\"\n          name=\"2fa\"\n          hint=\"Adds an extra layer of security to your account\"\n        />\n        <SwitchInput\n          label=\"Email Notifications\"\n          name=\"email-notifications\"\n          hint=\"Receive important updates via email\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function DescriptionSwitchInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-2xl font-semibold\">With Description</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <SwitchInput\n          label=\"Analytics\"\n          name=\"analytics\"\n          description=\"Allow us to collect anonymous usage data to improve our service\"\n        />\n        <SwitchInput\n          label=\"Marketing Communications\"\n          name=\"marketing\"\n          description=\"Receive updates about new features and promotions\"\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/inputs/switch-input-demo.tsx"
    }
  ]
}