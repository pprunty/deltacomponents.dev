{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "modal",
  "type": "registry:component",
  "dependencies": [
    "framer-motion",
    "@phosphor-icons/react"
  ],
  "files": [
    {
      "path": "registry/components/modal.tsx",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport { useEffect, useState } from \"react\"\nimport { X } from \"@phosphor-icons/react\"\nimport { AnimatePresence, motion, type Variants } from \"framer-motion\"\nimport { createPortal } from \"react-dom\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface ModalProps {\n  isOpen: boolean\n  onClose: () => void\n  children: React.ReactNode\n  closeOnOverlayClick?: boolean\n  title?: string\n  subtitle?: string\n  type?: \"blur\" | \"overlay\" | \"none\"\n  showCloseButton?: boolean\n  borderBottom?: boolean\n  className?: string\n  /**\n   * Choose between the default drop-in animation or a scale-from-center animation.\n   * @default 'drop'\n   */\n  animationType?: \"drop\" | \"scale\"\n  /**\n   * Adjust the vertical position of the modal.\n   * Positive values move it up, negative values move it down.\n   * @default 0\n   */\n  position?: number\n  /**\n   * Disable default padding of the modal content.\n   * @default false\n   */\n  disablePadding?: boolean\n}\n\nconst backdropVariants: Variants = {\n  hidden: { opacity: 0 },\n  visible: { opacity: 1, transition: { duration: 0.4 } },\n  exit: { opacity: 0, transition: { duration: 0.2 } },\n}\n\n// Default drop-in from bottom\nconst dropVariants: Variants = {\n  hidden: {\n    opacity: 0,\n    y: 40,\n    transition: {\n      duration: 0.22,\n      ease: [0.4, 0, 0.2, 1],\n    },\n  },\n  visible: {\n    opacity: 1,\n    y: 0,\n    transition: {\n      type: \"spring\",\n      stiffness: 400,\n      damping: 32,\n      mass: 0.7,\n      opacity: { duration: 0.32, ease: [0.4, 0, 0.2, 1] },\n    },\n  },\n  exit: {\n    opacity: 0,\n    y: 24,\n    transition: {\n      duration: 0.18,\n      ease: [0.4, 0, 0.2, 1],\n    },\n  },\n}\n\n// Scale from center animation\nconst scaleVariants: Variants = {\n  hidden: {\n    opacity: 0,\n    scale: 0.8,\n    transition: {\n      duration: 0.15,\n      ease: [0.4, 0, 0.2, 1],\n    },\n  },\n  visible: {\n    opacity: 1,\n    scale: 1,\n    transition: {\n      type: \"spring\",\n      stiffness: 500,\n      damping: 30,\n      mass: 0.5,\n    },\n  },\n  exit: {\n    opacity: 0,\n    scale: 0.8,\n    transition: {\n      duration: 0.15,\n      ease: [0.4, 0, 0.2, 1],\n    },\n  },\n}\n\nconst Modal: React.FC<ModalProps> = ({\n  isOpen,\n  onClose,\n  children,\n  closeOnOverlayClick = true,\n  title,\n  subtitle,\n  type = \"overlay\",\n  showCloseButton = true,\n  borderBottom = true,\n  className,\n  animationType = \"scale\",\n  position = 0,\n  disablePadding = false,\n}) => {\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  useEffect(() => {\n    const scrollbarWidth =\n      window.innerWidth - document.documentElement.clientWidth\n    if (isOpen) {\n      const currentPaddingRight =\n        Number.parseInt(getComputedStyle(document.body).paddingRight) || 0\n      document.body.style.paddingRight = `${currentPaddingRight + scrollbarWidth}px`\n      document.body.classList.add(\"overflow-hidden\")\n    } else {\n      document.body.style.paddingRight = \"\"\n      document.body.classList.remove(\"overflow-hidden\")\n    }\n    return () => {\n      document.body.style.paddingRight = \"\"\n      document.body.classList.remove(\"overflow-hidden\")\n    }\n  }, [isOpen])\n\n  const handleOverlayClick = () => {\n    if (closeOnOverlayClick) onClose()\n  }\n\n  const getOverlayClasses = () => {\n    switch (type) {\n      case \"blur\":\n        return \"bg-background/60 backdrop-blur-[2px]\"\n      case \"overlay\":\n        return \"bg-black/50\"\n      case \"none\":\n        return \"shadow-xl shadow-primary-foreground\"\n      default:\n        return \"bg-black/50\"\n    }\n  }\n\n  const getModalClasses = () => {\n    const base =\n      \"w-auto bg-background border border-border text-card-foreground max-w-[90%] sm:max-w-xl rounded-2xl shadow-lg m-4 relative\"\n    return type === \"overlay\" ? base : `${base} border border-border`\n  }\n\n  if (!mounted) return null\n\n  // Choose the appropriate animation variants\n  const variants = animationType === \"scale\" ? scaleVariants : dropVariants\n\n  const modalContent = (\n    <AnimatePresence>\n      {isOpen && (\n        <motion.div\n          variants={backdropVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          exit=\"exit\"\n          className={`fixed inset-0 z-[100] flex items-center justify-center overflow-y-auto ${getOverlayClasses()}`}\n          onClick={handleOverlayClick}\n          style={{\n            alignItems: position === 0 ? \"center\" : \"flex-start\",\n            paddingTop: position === 0 ? 0 : `calc(50vh - ${position}px)`,\n            willChange: type === \"blur\" ? \"backdrop-filter, opacity\" : undefined,\n          }}\n          layout={type === \"blur\"}\n        >\n          <motion.div\n            variants={variants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\"\n            className={cn(getModalClasses(), className)}\n            onClick={(e) => e.stopPropagation()}\n            layout={type === \"blur\"}\n          >\n            {title ? (\n              <div\n                className={cn(\n                  \"flex justify-between p-6 pb-4\",\n                  borderBottom && \"border-b border-border\",\n                  subtitle ? \"flex-col items-start gap-1\" : \"items-center\"\n                )}\n              >\n                <div>\n                  <h2 className=\"text-xl font-semibold\">{title}</h2>\n                  {subtitle && (\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {subtitle}\n                    </p>\n                  )}\n                </div>\n                {showCloseButton && (\n                  <button\n                    className={cn(\n                      \"p-1 rounded-md hover:bg-muted transition-colors\",\n                      subtitle && \"absolute top-6 right-6\"\n                    )}\n                    onClick={onClose}\n                    aria-label=\"Close modal\"\n                  >\n                    <X size={20} weight=\"bold\" />\n                  </button>\n                )}\n              </div>\n            ) : (\n              showCloseButton && (\n                <div className=\"absolute top-6 right-6\">\n                  <button\n                    className=\"p-1 rounded-md hover:bg-muted transition-colors\"\n                    onClick={onClose}\n                    aria-label=\"Close modal\"\n                  >\n                    <X size={20} weight=\"bold\" />\n                  </button>\n                </div>\n              )\n            )}\n\n            <div\n              className={cn(!disablePadding && (!title ? \"p-6 pt-12\" : \"p-6\"))}\n            >\n              {children}\n            </div>\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  )\n\n  return createPortal(modalContent, document.body)\n}\n\nexport default Modal\n",
      "type": "registry:component"
    }
  ]
}