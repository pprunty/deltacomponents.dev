{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "modal",
  "type": "registry:component",
  "title": "Modal",
  "description": "A component for modal",
  "dependencies": [
    "react-dom",
    "framer-motion",
    "@phosphor-icons/react"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "delta/components/modal.tsx",
      "content": "'use client';\n\nimport type React from 'react';\nimport { useState, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { motion, AnimatePresence, type Variants } from 'framer-motion';\nimport { X } from '@phosphor-icons/react';\nimport { cn } from '@/lib/utils';\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n  closeOnOverlayClick?: boolean;\n  title?: string;\n  subtitle?: string;\n  type?: 'blur' | 'overlay' | 'none';\n  showCloseButton?: boolean;\n  borderBottom?: boolean;\n  className?: string;\n}\n\nconst backdropVariants: Variants = {\n  hidden: { opacity: 0 },\n  visible: { opacity: 1, transition: { duration: 0.4 } },\n  exit: { opacity: 0, transition: { duration: 0.2 } },\n};\n\nconst modalVariants: Variants = {\n  hidden: {\n    opacity: 0,\n    y: '50%',\n    transition: {\n      y: { type: 'spring', stiffness: 500, damping: 50 },\n      opacity: { duration: 0.2, ease: 'easeInOut' },\n    },\n  },\n  visible: {\n    opacity: 1,\n    y: 0,\n    x: 0,\n    transition: {\n      y: { type: 'spring', stiffness: 500, damping: 50 },\n      opacity: { duration: 0.4, ease: 'easeInOut' },\n    },\n  },\n  exit: {\n    opacity: 0,\n    y: '50%',\n    transition: {\n      y: { type: 'spring', stiffness: 300, damping: 30 },\n      x: { duration: 0.2, ease: 'easeInOut' },\n      opacity: { duration: 0.2, ease: 'easeInOut' },\n    },\n  },\n};\n\nconst Modal: React.FC<ModalProps> = ({\n  isOpen,\n  onClose,\n  children,\n  closeOnOverlayClick = true,\n  title,\n  subtitle,\n  type = 'overlay',\n  showCloseButton = true,\n  borderBottom = true,\n  className,\n}) => {\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useEffect(() => {\n    // Get the current scrollbar width\n    const scrollbarWidth =\n      window.innerWidth - document.documentElement.clientWidth;\n\n    if (isOpen) {\n      // Save the current padding\n      const currentPaddingRight =\n        parseInt(getComputedStyle(document.body).paddingRight) || 0;\n\n      // Apply overflow hidden and compensate for scrollbar\n      document.body.style.paddingRight = `${currentPaddingRight + scrollbarWidth}px`;\n      document.body.classList.add('overflow-hidden');\n    } else {\n      // Remove the style and class\n      document.body.style.paddingRight = '';\n      document.body.classList.remove('overflow-hidden');\n    }\n\n    // Cleanup function to remove the class when the component unmounts\n    return () => {\n      document.body.style.paddingRight = '';\n      document.body.classList.remove('overflow-hidden');\n    };\n  }, [isOpen]);\n\n  const handleOverlayClick = () => {\n    if (closeOnOverlayClick) {\n      onClose();\n    }\n  };\n\n  const getOverlayClasses = () => {\n    switch (type) {\n      case 'blur':\n        return 'bg-primary-foreground/85 backdrop-blur-sm';\n      case 'overlay':\n        return 'bg-black/50';\n      case 'none':\n        return 'shadow-xl shadow-primary-foreground';\n      default:\n        return 'bg-black/50';\n    }\n  };\n\n  const getModalClasses = () => {\n    const baseClasses =\n      'w-auto bg-background border border-border text-card-foreground max-w-[90%] sm:max-w-xl rounded-2xl shadow-lg m-4 relative';\n    return type === 'overlay'\n      ? baseClasses\n      : `${baseClasses} border border-border`;\n  };\n\n  // Only render the modal content if we're in the browser\n  if (!mounted) {\n    return null;\n  }\n\n  // Create the modal content\n  const modalContent = (\n    <AnimatePresence>\n      {isOpen && (\n        <motion.div\n          variants={backdropVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          exit=\"exit\"\n          className={`fixed inset-0 z-[100] flex items-center justify-center overflow-y-auto ${getOverlayClasses()}`}\n          onClick={handleOverlayClick}\n        >\n          <motion.div\n            variants={modalVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\"\n            className={cn(getModalClasses(), className)}\n            onClick={(e) => e.stopPropagation()}\n          >\n            {title ? (\n              // When there is a title, show the title bar with optional close button\n              <div\n                className={cn(\n                  'flex justify-between p-6',\n                  borderBottom && 'border-b border-border',\n                  subtitle ? 'flex-col items-start gap-1' : 'items-center',\n                )}\n              >\n                <div>\n                  <h2 className=\"text-xl font-semibold\">{title}</h2>\n                  {subtitle && (\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {subtitle}\n                    </p>\n                  )}\n                </div>\n                {showCloseButton && (\n                  <button\n                    className={cn(\n                      'p-1 rounded-md hover:bg-muted transition-colors',\n                      subtitle && 'absolute top-4 right-4',\n                    )}\n                    onClick={onClose}\n                    aria-label=\"Close modal\"\n                  >\n                    <X size={20} weight=\"bold\" />\n                  </button>\n                )}\n              </div>\n            ) : (\n              // If no title but we want a close button, add it in the top right\n              showCloseButton && (\n                <div className=\"absolute top-4 right-4\">\n                  <button\n                    className=\"p-1 rounded-md hover:bg-muted transition-colors\"\n                    onClick={onClose}\n                    aria-label=\"Close modal\"\n                  >\n                    <X size={20} weight=\"bold\" />\n                  </button>\n                </div>\n              )\n            )}\n\n            {/* Modal content */}\n            <div className={`p-6 ${!title && showCloseButton ? 'pt-12' : ''}`}>\n              {children}\n            </div>\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n\n  // Use createPortal to render the modal at the document body level\n  return createPortal(modalContent, document.body);\n};\n\nexport default Modal;\n\n",
      "type": "registry:component",
      "target": "delta/components/modal.tsx"
    },
    {
      "path": "delta/examples/modal-basic-demo.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/delta/components/button\"\nimport Modal from \"@/delta/components/modal\"\n\nexport default function ModalBasicDemo() {\n  const [isOpen, setIsOpen] = useState(false)\n\n  return (\n    <div className=\"flex items-center justify-center p-4\">\n      <Button\n        onClick={() => setIsOpen(true)}\n      >\n        Open Modal\n      </Button>\n\n      <Modal\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        title=\"Modal Title\"\n        subtitle=\"This is a simple modal example\"\n      >\n        <div className=\"space-y-4\">\n          <p>This is the modal content. You can put any components or text here.</p>\n          \n          <div className=\"flex justify-end\">\n            <Button\n              variant=\"secondary\"\n              onClick={() => setIsOpen(false)}\n            >\n              Close\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "delta/examples/modal-basic-demo.tsx"
    },
    {
      "path": "content/docs/modal.mdx",
      "content": "export const metadata = {\n  title: 'Modal | Delta Components',\n  description: 'A versatile modal component with customizable overlay, animations, and multiple content layout options. Features configurable backdrop styles, title/subtitle support, and responsive design.',\n\n  // Keywords help with SEO\n  keywords: ['shadcn/ui', 'react', 'modal', 'dialog', 'overlay', 'popup', 'ui components', 'framer motion', 'react components', 'delta components', 'nextjs components', 'tailwind components'],\n\n  // Canonical URL to prevent duplicate content issues\n  alternates: {\n    canonical: 'https://deltacomponents.dev/docs/modal',\n  },\n\n  // Category helps with structured data\n  category: 'component',\n\n  openGraph: {\n    title: 'Modal Component | Delta Components',\n    description: 'A versatile modal component with customizable overlay, animations, and multiple content layout options. Features configurable backdrop styles, title/subtitle support, and responsive design.',\n    type: 'article',\n    url: 'https://deltacomponents.dev/docs/modal',\n    images: [\n      {\n        url: 'https://deltacomponents.dev/og/modal.png',\n        width: 1200,\n        height: 630,\n        alt: 'Modal Component Preview showing different backdrop styles and content layouts'\n      }\n    ],\n    // Article specific OpenGraph metadata\n    article: {\n      authors: ['Patrick Prunty'],\n      tags: ['UI Components', 'React', 'Shadcn', 'Modal', 'Dialog', 'Overlay', 'Design'],\n      section: 'Components'\n    },\n    siteName: 'Delta Components'\n  },\n\n  twitter: {\n    card: 'summary_large_image',\n    title: 'Modal Component | Delta Components',\n    description: 'A versatile modal component with customizable overlay, animations, and multiple content layout options. Features configurable backdrop styles, title/subtitle support, and responsive design.',\n    images: ['https://deltacomponents.dev/og/modal.png'],\n    creator: '@pprunty_',\n    site: '@deltacomponents'\n  },\n\n  // Additional metadata for better SEO\n  robots: {\n    index: true,\n    follow: true,\n    nocache: false,\n    googleBot: {\n      index: true,\n      follow: true,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n      'max-video-preview': -1\n    }\n  }\n}\n\n# Modal\n\nA versatile modal component with customizable overlay, animations, and multiple content layout options. Features smooth entrance/exit animations powered by Framer Motion, configurable backdrop styles, and responsive design.\n\n## Basic Usage\n\n<ComponentTabs name=\"modal-basic\" />\n\n<InstallationInstructions componentName=\"modal\" />\n\n## Props\n\n<Table>\n  <TableHeader>\n    <TableRow>\n      <TableHead>Prop</TableHead>\n      <TableHead>Type</TableHead>\n      <TableHead>Default</TableHead>\n      <TableHead>Description</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell>`onClose`</TableCell>\n      <TableCell>`() => void`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Function called when the modal is closed</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`children`</TableCell>\n      <TableCell>`ReactNode`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Content to display inside the modal</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`closeOnOverlayClick`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`true`</TableCell>\n      <TableCell>Whether clicking the overlay closes the modal</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`title`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Optional title to display in the modal header</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`subtitle`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Optional subtitle to display below the title</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`type`</TableCell>\n      <TableCell>`'blur' | 'overlay' | 'none'`</TableCell>\n      <TableCell>`'overlay'`</TableCell>\n      <TableCell>Type of backdrop effect</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`showCloseButton`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`true`</TableCell>\n      <TableCell>Whether to show the close button</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`borderBottom`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`true`</TableCell>\n      <TableCell>Whether to show a border below the title area</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`className`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Additional CSS classes to apply to the modal</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n\n## Examples\n\n### Basic Modal\n\n```tsx\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport Modal from \"@/components/ui/modal\"\n\nexport default function BasicExample() {\n  const [isOpen, setIsOpen] = useState(false)\n\n  return (\n    <>\n      <Button onClick={() => setIsOpen(true)}>\n        Open Modal\n      </Button>\n\n      <Modal\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        title=\"Modal Title\"\n        subtitle=\"This is a simple modal example\"\n      >\n        <div className=\"space-y-4\">\n          <p>This is the modal content. You can put any components or text here.</p>\n          \n          <div className=\"flex justify-end\">\n            <Button variant=\"secondary\" onClick={() => setIsOpen(false)}>\n              Close\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    </>\n  )\n}\n```\n\n### With Blur Backdrop\n\n```tsx\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport Modal from \"@/components/ui/modal\"\n\nexport default function BlurExample() {\n  const [isOpen, setIsOpen] = useState(false)\n\n  return (\n    <>\n      <Button onClick={() => setIsOpen(true)}>\n        Open Blur Modal\n      </Button>\n\n      <Modal\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        title=\"Blur Backdrop\"\n        type=\"blur\"\n      >\n        <p>This modal has a blurred backdrop effect.</p>\n      </Modal>\n    </>\n  )\n}\n```\n\n### Content-Only Modal\n\n```tsx\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport Modal from \"@/components/ui/modal\"\n\nexport default function ContentOnlyExample() {\n  const [isOpen, setIsOpen] = useState(false)\n\n  return (\n    <>\n      <Button onClick={() => setIsOpen(true)}>\n        Content Only\n      </Button>\n\n      <Modal\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        showCloseButton={true}\n      >\n        <div className=\"text-center p-4\">\n          <h2 className=\"text-2xl font-bold mb-4\">Custom Content</h2>\n          <p>This modal has no title bar, just content with a close button.</p>\n          <Button \n            className=\"mt-4\" \n            onClick={() => setIsOpen(false)}\n          >\n            Close\n          </Button>\n        </div>\n      </Modal>\n    </>\n  )\n}\n```\n\n## Accessibility\n\nThe Modal component is built with accessibility in mind:\n\n- Proper focus management\n- ARIA attributes for screen readers\n- Keyboard navigation support (ESC to close)\n- Prevents background scrolling when open\n- Preserves scrollbar width to prevent layout shift\n- Maintains focus trap within the modal\n\nWhen using the Modal component, ensure that the close button or alternative close method is clearly visible and accessible. For content-only modals, always include a visible close mechanism.\n",
      "type": "registry:component",
      "target": "content/docs/modal.mdx"
    }
  ]
}