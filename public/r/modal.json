{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "modal",
  "type": "registry:component",
  "title": "Modal",
  "description": "A customizable modal component with animations and various style options",
  "dependencies": [
    "framer-motion",
    "@phosphor-icons/react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "delta/components/modal.tsx",
      "content": "'use client';\n\nimport type React from 'react';\nimport { useState, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { motion, AnimatePresence, type Variants } from 'framer-motion';\nimport { X } from '@phosphor-icons/react';\nimport { cn } from '@/lib/utils';\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n  closeOnOverlayClick?: boolean;\n  title?: string;\n  subtitle?: string;\n  type?: 'blur' | 'overlay' | 'none';\n  showCloseButton?: boolean;\n  borderBottom?: boolean;\n  className?: string;\n}\n\nconst backdropVariants: Variants = {\n  hidden: { opacity: 0 },\n  visible: { opacity: 1, transition: { duration: 0.4 } },\n  exit: { opacity: 0, transition: { duration: 0.2 } },\n};\n\nconst modalVariants: Variants = {\n  hidden: {\n    opacity: 0,\n    y: '50%',\n    transition: {\n      y: { type: 'spring', stiffness: 500, damping: 50 },\n      opacity: { duration: 0.2, ease: 'easeInOut' },\n    },\n  },\n  visible: {\n    opacity: 1,\n    y: 0,\n    x: 0,\n    transition: {\n      y: { type: 'spring', stiffness: 500, damping: 50 },\n      opacity: { duration: 0.4, ease: 'easeInOut' },\n    },\n  },\n  exit: {\n    opacity: 0,\n    y: '50%',\n    transition: {\n      y: { type: 'spring', stiffness: 300, damping: 30 },\n      x: { duration: 0.2, ease: 'easeInOut' },\n      opacity: { duration: 0.2, ease: 'easeInOut' },\n    },\n  },\n};\n\nconst Modal: React.FC<ModalProps> = ({\n  isOpen,\n  onClose,\n  children,\n  closeOnOverlayClick = true,\n  title,\n  subtitle,\n  type = 'overlay',\n  showCloseButton = true,\n  borderBottom = true,\n  className,\n}) => {\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useEffect(() => {\n    // Get the current scrollbar width\n    const scrollbarWidth =\n      window.innerWidth - document.documentElement.clientWidth;\n\n    if (isOpen) {\n      // Save the current padding\n      const currentPaddingRight =\n        parseInt(getComputedStyle(document.body).paddingRight) || 0;\n\n      // Apply overflow hidden and compensate for scrollbar\n      document.body.style.paddingRight = `${currentPaddingRight + scrollbarWidth}px`;\n      document.body.classList.add('overflow-hidden');\n    } else {\n      // Remove the style and class\n      document.body.style.paddingRight = '';\n      document.body.classList.remove('overflow-hidden');\n    }\n\n    // Cleanup function to remove the class when the component unmounts\n    return () => {\n      document.body.style.paddingRight = '';\n      document.body.classList.remove('overflow-hidden');\n    };\n  }, [isOpen]);\n\n  const handleOverlayClick = () => {\n    if (closeOnOverlayClick) {\n      onClose();\n    }\n  };\n\n  const getOverlayClasses = () => {\n    switch (type) {\n      case 'blur':\n        return 'bg-primary-foreground/85 backdrop-blur-sm';\n      case 'overlay':\n        return 'bg-black/50';\n      case 'none':\n        return 'shadow-xl shadow-primary-foreground';\n      default:\n        return 'bg-black/50';\n    }\n  };\n\n  const getModalClasses = () => {\n    const baseClasses =\n      'w-auto bg-background border border-border text-card-foreground max-w-[90%] sm:max-w-xl rounded-2xl shadow-lg m-4 relative';\n    return type === 'overlay'\n      ? baseClasses\n      : `${baseClasses} border border-border`;\n  };\n\n  // Only render the modal content if we're in the browser\n  if (!mounted) {\n    return null;\n  }\n\n  // Create the modal content\n  const modalContent = (\n    <AnimatePresence>\n      {isOpen && (\n        <motion.div\n          variants={backdropVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          exit=\"exit\"\n          className={`fixed inset-0 z-[100] flex items-center justify-center overflow-y-auto ${getOverlayClasses()}`}\n          onClick={handleOverlayClick}\n        >\n          <motion.div\n            variants={modalVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\"\n            className={cn(getModalClasses(), className)}\n            onClick={(e) => e.stopPropagation()}\n          >\n            {title ? (\n              // When there is a title, show the title bar with optional close button\n              <div\n                className={cn(\n                  'flex justify-between p-6',\n                  borderBottom && 'border-b border-border',\n                  subtitle ? 'flex-col items-start gap-1' : 'items-center',\n                )}\n              >\n                <div>\n                  <h2 className=\"text-xl font-semibold\">{title}</h2>\n                  {subtitle && (\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {subtitle}\n                    </p>\n                  )}\n                </div>\n                {showCloseButton && (\n                  <button\n                    className={cn(\n                      'p-1 rounded-md hover:bg-muted transition-colors',\n                      subtitle && 'absolute top-4 right-4',\n                    )}\n                    onClick={onClose}\n                    aria-label=\"Close modal\"\n                  >\n                    <X size={20} weight=\"bold\" />\n                  </button>\n                )}\n              </div>\n            ) : (\n              // If no title but we want a close button, add it in the top right\n              showCloseButton && (\n                <div className=\"absolute top-4 right-4\">\n                  <button\n                    className=\"p-1 rounded-md hover:bg-muted transition-colors\"\n                    onClick={onClose}\n                    aria-label=\"Close modal\"\n                  >\n                    <X size={20} weight=\"bold\" />\n                  </button>\n                </div>\n              )\n            )}\n\n            {/* Modal content */}\n            <div className={`p-6 ${!title && showCloseButton ? 'pt-12' : ''}`}>\n              {children}\n            </div>\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n\n  // Use createPortal to render the modal at the document body level\n  return createPortal(modalContent, document.body);\n};\n\nexport default Modal;\n",
      "type": "registry:component",
      "target": "delta/components/modal.tsx"
    },
    {
      "path": "delta/components/modal-demo.tsx",
      "content": "'use client';\n\nimport { useState } from 'react';\nimport Modal from './modal';\nimport { Button } from '@/components/ui/button';\n\nexport function ModalDemo() {\n  const [isBasicOpen, setIsBasicOpen] = useState(false);\n  const [isWithTitleOpen, setIsWithTitleOpen] = useState(false);\n  const [isBlurOpen, setIsBlurOpen] = useState(false);\n  const [isWithoutCloseOpen, setIsWithoutCloseOpen] = useState(false);\n  const [isNoOverlayCloseOpen, setIsNoOverlayCloseOpen] = useState(false);\n  const [isWithSubtitleOpen, setIsWithSubtitleOpen] = useState(false);\n  const [isNoBorderOpen, setIsNoBorderOpen] = useState(false);\n  const [isCustomClassOpen, setIsCustomClassOpen] = useState(false);\n  const [isForcedActionOpen, setIsForcedActionOpen] = useState(false);\n  const [hasAgreed, setHasAgreed] = useState(false);\n\n  const resetAgreement = () => {\n    setHasAgreed(false);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex flex-col space-y-3\">\n        <h3 className=\"text-lg font-medium\">Modal Component</h3>\n        <p className=\"text-muted-foreground\">\n          A versatile modal component with multiple style options and\n          configurations.\n        </p>\n      </div>\n\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"border rounded-lg p-4 flex flex-col space-y-4\">\n            <h4 className=\"font-medium\">Basic Modal</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              A simple modal with overlay background.\n            </p>\n            <Button onClick={() => setIsBasicOpen(true)}>\n              Open Basic Modal\n            </Button>\n          </div>\n\n          <div className=\"border rounded-lg p-4 flex flex-col space-y-4\">\n            <h4 className=\"font-medium\">Modal with Title</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              Shows a header with title and close button.\n            </p>\n            <Button onClick={() => setIsWithTitleOpen(true)}>\n              Open Modal with Title\n            </Button>\n          </div>\n\n          <div className=\"border rounded-lg p-4 flex flex-col space-y-4\">\n            <h4 className=\"font-medium\">Modal with Subtitle</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              Shows a header with title, subtitle and close button.\n            </p>\n            <Button onClick={() => setIsWithSubtitleOpen(true)}>\n              Open Modal with Subtitle\n            </Button>\n          </div>\n\n          <div className=\"border rounded-lg p-4 flex flex-col space-y-4\">\n            <h4 className=\"font-medium\">Modal without Border</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              Header without bottom border separation.\n            </p>\n            <Button onClick={() => setIsNoBorderOpen(true)}>\n              Open Borderless Modal\n            </Button>\n          </div>\n\n          <div className=\"border rounded-lg p-4 flex flex-col space-y-4\">\n            <h4 className=\"font-medium\">Blur Background Modal</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              Uses a blur effect on the background.\n            </p>\n            <Button onClick={() => setIsBlurOpen(true)}>Open Blur Modal</Button>\n          </div>\n\n          <div className=\"border rounded-lg p-4 flex flex-col space-y-4\">\n            <h4 className=\"font-medium\">Without Close Button</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              Modal without the close button.\n            </p>\n            <Button onClick={() => setIsWithoutCloseOpen(true)}>\n              Open No-Close Modal\n            </Button>\n          </div>\n\n          <div className=\"border rounded-lg p-4 flex flex-col space-y-4\">\n            <h4 className=\"font-medium\">No Overlay Close</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              Modal won't close when clicking overlay.\n            </p>\n            <Button onClick={() => setIsNoOverlayCloseOpen(true)}>\n              Open Modal\n            </Button>\n          </div>\n\n          <div className=\"border rounded-lg p-4 flex flex-col space-y-4\">\n            <h4 className=\"font-medium\">Custom Styled Modal</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              Using className to customize modal appearance.\n            </p>\n            <Button onClick={() => setIsCustomClassOpen(true)}>\n              Open Custom Modal\n            </Button>\n          </div>\n\n          <div className=\"border rounded-lg p-4 flex flex-col space-y-4\">\n            <h4 className=\"font-medium\">Forced Action Modal</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              User must accept terms to dismiss modal.\n            </p>\n            <Button\n              onClick={() => {\n                resetAgreement();\n                setIsForcedActionOpen(true);\n              }}\n            >\n              Open Forced Action Modal\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Modals */}\n      <Modal isOpen={isBasicOpen} onClose={() => setIsBasicOpen(false)}>\n        <div className=\"space-y-4 min-w-[300px]\">\n          <h3 className=\"text-lg font-medium\">Basic Modal</h3>\n          <p>This is a basic modal with default styling.</p>\n          <div className=\"flex justify-end\">\n            <Button onClick={() => setIsBasicOpen(false)}>Close</Button>\n          </div>\n        </div>\n      </Modal>\n\n      <Modal\n        isOpen={isWithTitleOpen}\n        onClose={() => setIsWithTitleOpen(false)}\n        title=\"Modal with Title\"\n      >\n        <div className=\"space-y-4 min-w-[300px]\">\n          <p>This modal has a title in the header alongside a close button.</p>\n          <div className=\"flex justify-end\">\n            <Button onClick={() => setIsWithTitleOpen(false)}>Close</Button>\n          </div>\n        </div>\n      </Modal>\n\n      <Modal\n        isOpen={isWithSubtitleOpen}\n        onClose={() => setIsWithSubtitleOpen(false)}\n        title=\"Modal with Subtitle\"\n        borderBottom={false}\n        subtitle=\"This smaller text provides additional context about the modal\"\n      >\n        <div className=\"space-y-4 min-w-[350px]\">\n          <p>This modal displays both a title and a subtitle in the header.</p>\n          <p>\n            The subtitle can be used to provide additional context or\n            instructions.\n          </p>\n          <div className=\"flex justify-end\">\n            <Button onClick={() => setIsWithSubtitleOpen(false)}>Close</Button>\n          </div>\n        </div>\n      </Modal>\n\n      <Modal\n        isOpen={isNoBorderOpen}\n        onClose={() => setIsNoBorderOpen(false)}\n        title=\"No Border Modal\"\n        borderBottom={false}\n      >\n        <div className=\"space-y-4 min-w-[300px]\">\n          <p>This modal has no border between the header and content.</p>\n          <p>This creates a more seamless appearance.</p>\n          <div className=\"flex justify-end\">\n            <Button onClick={() => setIsNoBorderOpen(false)}>Close</Button>\n          </div>\n        </div>\n      </Modal>\n\n      <Modal\n        isOpen={isBlurOpen}\n        onClose={() => setIsBlurOpen(false)}\n        type=\"blur\"\n      >\n        <div className=\"space-y-4 min-w-[300px]\">\n          <h3 className=\"text-lg font-medium\">Blur Background</h3>\n          <p>This modal uses a semi-transparent backdrop with blur effect.</p>\n          <div className=\"flex justify-end\">\n            <Button onClick={() => setIsBlurOpen(false)}>Close</Button>\n          </div>\n        </div>\n      </Modal>\n\n      <Modal\n        isOpen={isWithoutCloseOpen}\n        onClose={() => setIsWithoutCloseOpen(false)}\n        showCloseButton={false}\n      >\n        <div className=\"space-y-4 min-w-[300px]\">\n          <h3 className=\"text-lg font-medium\">No Close Button</h3>\n          <p>This modal doesn't have a close button in the corner.</p>\n          <p>Click the button below or outside to close it.</p>\n          <div className=\"flex justify-end\">\n            <Button onClick={() => setIsWithoutCloseOpen(false)}>Close</Button>\n          </div>\n        </div>\n      </Modal>\n\n      <Modal\n        isOpen={isNoOverlayCloseOpen}\n        onClose={() => setIsNoOverlayCloseOpen(false)}\n        closeOnOverlayClick={false}\n      >\n        <div className=\"space-y-4 min-w-[300px]\">\n          <h3 className=\"text-lg font-medium\">No Overlay Click</h3>\n          <p>This modal doesn't close when you click on the overlay.</p>\n          <p>You must use the close button.</p>\n          <div className=\"flex justify-end\">\n            <Button onClick={() => setIsNoOverlayCloseOpen(false)}>\n              Close\n            </Button>\n          </div>\n        </div>\n      </Modal>\n\n      <Modal\n        isOpen={isCustomClassOpen}\n        onClose={() => setIsCustomClassOpen(false)}\n        className=\"bg-slate-900 text-white max-w-md rounded-lg\"\n        title=\"Custom Styled Modal\"\n      >\n        <div className=\"space-y-4 min-w-[300px]\">\n          <p>\n            This modal uses a custom className to override the default styling.\n          </p>\n          <p>You can customize colors, width, border radius, and more.</p>\n          <div className=\"flex justify-end\">\n            <Button\n              onClick={() => setIsCustomClassOpen(false)}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n            >\n              Close\n            </Button>\n          </div>\n        </div>\n      </Modal>\n\n      <Modal\n        isOpen={isForcedActionOpen}\n        onClose={() => hasAgreed && setIsForcedActionOpen(false)}\n        closeOnOverlayClick={false}\n        showCloseButton={false}\n        title=\"Terms and Conditions\"\n        subtitle=\"You must agree to continue\"\n      >\n        <div className=\"space-y-4 min-w-[350px]\">\n          <div className=\"max-h-40 overflow-y-auto border rounded p-3 text-sm\">\n            <p>\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam\n              auctor, nisl eget ultricies ultricies, nisl nisl ultricies nisl,\n              eget ultricies nisl nisl eget.\n            </p>\n            <p className=\"mt-2\">\n              Praesent euismod, nisl eget ultricies ultricies, nisl nisl\n              ultricies nisl, eget ultricies nisl nisl eget. Nullam auctor, nisl\n              eget ultricies ultricies.\n            </p>\n            <p className=\"mt-2\">\n              Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n              Ut enim ad minim veniam, quis nostrud exercitation ullamco\n              laboris.\n            </p>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            You cannot close this modal without agreeing to the terms.\n          </p>\n          <div className=\"flex flex-col gap-2\">\n            <Button\n              onClick={() => {\n                setHasAgreed(true);\n                setIsForcedActionOpen(false);\n              }}\n              className=\"w-full\"\n            >\n              I Agree\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/components/modal-demo.tsx"
    }
  ]
}