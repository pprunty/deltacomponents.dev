{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "modal",
  "type": "registry:component",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "dependencies": ["motion", "@phosphor-icons/react"],
  "files": [
    {
      "path": "registry/components/modal.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogOverlay,\n  DialogPortal,\n} from \"@/components/ui/dialog\"\n\ninterface ModalProps {\n  isOpen: boolean\n  onClose: () => void\n  children: React.ReactNode\n  allowEasyClose?: boolean\n  title?: string\n  subtitle?: string\n  type?: \"blur\" | \"overlay\" | \"none\"\n  showCloseButton?: boolean\n  showEscText?: boolean\n  borderBottom?: boolean\n  className?: string\n  /**\n   * Adjust the vertical position of the modal.\n   * Positive values move it up, negative values move it down.\n   * @default 0\n   */\n  position?: number\n  /**\n   * Disable default padding of the modal content.\n   * @default false\n   */\n  disablePadding?: boolean\n}\n\nconst Modal: React.FC<ModalProps> = ({\n  isOpen,\n  onClose,\n  children,\n  allowEasyClose = true,\n  title,\n  subtitle,\n  type = \"overlay\",\n  showCloseButton = true,\n  showEscText = true,\n  borderBottom = true,\n  className,\n  position = 0,\n  disablePadding = false,\n}) => {\n  const getOverlayClasses = () => {\n    switch (type) {\n      case \"blur\":\n        return \"bg-background/60 backdrop-blur-[2px]\"\n      case \"overlay\":\n        return \"bg-black/50\"\n      case \"none\":\n        return \"bg-transparent\"\n      default:\n        return \"bg-black/50\"\n    }\n  }\n\n  const getContentClasses = () => {\n    const baseClasses = cn(\n      \"w-auto max-w-[90%] sm:max-w-xl rounded-2xl shadow-lg m-4 p-0\",\n      type === \"none\" && \"shadow-xl shadow-primary-foreground\",\n      className\n    )\n\n    // Position adjustment\n    const positionClasses = position !== 0 ? `translate-y-[${position}px]` : \"\"\n\n    return cn(baseClasses, positionClasses)\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={allowEasyClose ? onClose : undefined}>\n      <DialogPortal>\n        <DialogOverlay\n          className={getOverlayClasses()}\n          onClick={allowEasyClose ? onClose : undefined}\n        />\n        <DialogContent\n          className={getContentClasses()}\n          onPointerDownOutside={\n            allowEasyClose ? undefined : (e) => e.preventDefault()\n          }\n          onEscapeKeyDown={\n            allowEasyClose ? undefined : (e) => e.preventDefault()\n          }\n        >\n          {/* Custom close button - hide default one */}\n          <div className=\"absolute right-4 top-4 opacity-0 pointer-events-none\">\n            <X className=\"size-4\" />\n          </div>\n\n          {title ? (\n            <div\n              className={cn(\n                \"flex justify-between p-6 pb-4\",\n                borderBottom && \"border-b border-border\",\n                subtitle ? \"flex-col items-start gap-1\" : \"items-center\"\n              )}\n            >\n              <div>\n                <h2 className=\"text-xl font-semibold\">{title}</h2>\n                {subtitle && (\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {subtitle}\n                  </p>\n                )}\n              </div>\n              {showCloseButton && (\n                <div\n                  className={cn(\n                    \"flex items-center gap-2\",\n                    subtitle && \"absolute top-6 right-6\"\n                  )}\n                >\n                  {showEscText && (\n                    <span className=\"hidden lg:inline px-2 py-1 text-[11px] font-medium bg-muted text-muted-foreground rounded\">\n                      ESC\n                    </span>\n                  )}\n                  <button\n                    className=\"p-1 rounded-md hover:bg-muted transition-colors\"\n                    onClick={onClose}\n                    aria-label=\"Close modal\"\n                  >\n                    <X size={20} />\n                  </button>\n                </div>\n              )}\n            </div>\n          ) : (\n            showCloseButton && (\n              <div className=\"absolute top-6 right-6 flex items-center gap-2 z-10\">\n                {showEscText && (\n                  <span className=\"hidden lg:inline px-2 py-1 text-xs font-medium bg-muted text-muted-foreground rounded\">\n                    ESC\n                  </span>\n                )}\n                <button\n                  className=\"p-1 rounded-md hover:bg-muted transition-colors\"\n                  onClick={onClose}\n                  aria-label=\"Close modal\"\n                >\n                  <X size={20} />\n                </button>\n              </div>\n            )\n          )}\n\n          <div\n            className={cn(!disablePadding && (!title ? \"p-6 pt-12\" : \"p-6\"))}\n          >\n            {children}\n          </div>\n        </DialogContent>\n      </DialogPortal>\n    </Dialog>\n  )\n}\n\nexport default Modal\n",
      "type": "registry:component",
      "target": "components/delta/modal.tsx"
    }
  ]
}
