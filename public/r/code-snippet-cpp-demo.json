{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-snippet-cpp-demo",
  "type": "registry:block",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "registryDependencies": [
    "https://deltacomponents.dev/r/code-snippet.json"
  ],
  "files": [
    {
      "path": "registry/examples/code-snippet-cpp-demo.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport { CodeSnippet } from \"@/delta/code-snippet\"\nimport { PrismTheme } from \"prism-react-renderer\"\n\n// Custom C++ optimized theme with purple/blue accents\nconst cppTheme: PrismTheme = {\n  plain: {\n    color: \"#e6e6fa\",\n    backgroundColor: \"#1a1a2e\",\n  },\n  styles: [\n    {\n      types: [\"comment\"],\n      style: {\n        color: \"#6a7b9a\",\n        fontStyle: \"italic\",\n      },\n    },\n    {\n      types: [\"keyword\", \"operator\"],\n      style: {\n        color: \"#bb86fc\",\n        fontWeight: \"bold\",\n      },\n    },\n    {\n      types: [\"string\", \"char\"],\n      style: {\n        color: \"#98d982\",\n      },\n    },\n    {\n      types: [\"number\"],\n      style: {\n        color: \"#f39c12\",\n      },\n    },\n    {\n      types: [\"function\", \"method\"],\n      style: {\n        color: \"#61dafb\",\n      },\n    },\n    {\n      types: [\"class-name\", \"type\"],\n      style: {\n        color: \"#ffd700\",\n        fontWeight: \"500\",\n      },\n    },\n    {\n      types: [\"punctuation\", \"symbol\"],\n      style: {\n        color: \"#c5c8c6\",\n      },\n    },\n    {\n      types: [\"preprocessor\", \"directive\"],\n      style: {\n        color: \"#ff79c6\",\n      },\n    },\n    {\n      types: [\"namespace\", \"scope\"],\n      style: {\n        color: \"#8be9fd\",\n      },\n    },\n  ],\n}\n\nexport default function CodeSnippetCppDemo() {\n  const cpp20Code = `#include <iostream>\n#include <vector>\n#include <ranges>\n#include <concepts>\n#include <coroutine>\n#include <format>\n\n// C++20 Concepts\ntemplate<typename T>\nconcept Numeric = std::integral<T> || std::floating_point<T>;\n\ntemplate<Numeric T>\nauto multiply(T a, T b) -> T {\n    return a * b;\n}\n\n// C++20 Coroutines\nstruct Generator {\n    struct promise_type {\n        int current_value;\n        \n        Generator get_return_object() {\n            return Generator{handle_type::from_promise(*this)};\n        }\n        \n        std::suspend_always initial_suspend() { return {}; }\n        std::suspend_always final_suspend() noexcept { return {}; }\n        void unhandled_exception() {}\n        \n        std::suspend_always yield_value(int value) {\n            current_value = value;\n            return {};\n        }\n    };\n    \n    using handle_type = std::coroutine_handle<promise_type>;\n    handle_type coro;\n    \n    Generator(handle_type h) : coro(h) {}\n    ~Generator() { if (coro) coro.destroy(); }\n};\n\nGenerator fibonacci() {\n    int a = 0, b = 1;\n    while (true) {\n        co_yield a;\n        auto next = a + b;\n        a = b;\n        b = next;\n    }\n}\n\nint main() {\n    // C++20 Ranges and Views\n    std::vector<int> numbers{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    \n    auto even_squares = numbers \n        | std::views::filter([](int n) { return n % 2 == 0; })\n        | std::views::transform([](int n) { return n * n; });\n    \n    // C++20 Format library\n    std::cout << std::format(\"Even squares: \");\n    for (auto value : even_squares) {\n        std::cout << std::format(\"{} \", value);\n    }\n    std::cout << std::endl;\n    \n    // Using concepts\n    auto result = multiply(3.14, 2.71);\n    std::cout << std::format(\"Result: {:.2f}\\\\n\", result);\n    \n    return 0;\n}`\n\n  return (\n    <div className=\"w-full py-4\">\n      <CodeSnippet\n        title=\"modern_cpp20.cpp\"\n        code={cpp20Code}\n        language=\"cpp\"\n        theme={cppTheme}\n        showLineNumbers={true}\n      />\n    </div>\n  )\n}\n",
      "type": "registry:block",
      "target": "/components/delta/code-snippet-cpp-demo.tsx"
    }
  ]
}