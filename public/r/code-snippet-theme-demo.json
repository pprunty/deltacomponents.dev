{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-snippet-theme-demo",
  "type": "registry:block",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "registryDependencies": [
    "https://deltacomponents.dev/r/code-snippet.json"
  ],
  "files": [
    {
      "path": "registry/examples/code-snippet-theme-demo.tsx",
      "content": "\"use client\"\n\nimport React, { useState } from \"react\"\nimport { CodeSnippet } from \"@/delta/code-snippet\"\nimport { PrismTheme } from \"prism-react-renderer\"\n\nimport { Button } from \"@/components/ui/button\"\n\n// Custom Monokai-inspired dark theme\nconst monokaiTheme: PrismTheme = {\n  plain: {\n    color: \"#f8f8f2\",\n    backgroundColor: \"#272822\",\n  },\n  styles: [\n    {\n      types: [\"comment\"],\n      style: {\n        color: \"#75715e\",\n        fontStyle: \"italic\",\n      },\n    },\n    {\n      types: [\"keyword\", \"operator\"],\n      style: {\n        color: \"#f92672\",\n        fontWeight: \"bold\",\n      },\n    },\n    {\n      types: [\"string\", \"char\"],\n      style: {\n        color: \"#e6db74\",\n      },\n    },\n    {\n      types: [\"number\"],\n      style: {\n        color: \"#ae81ff\",\n      },\n    },\n    {\n      types: [\"function\", \"method\"],\n      style: {\n        color: \"#a6e22e\",\n      },\n    },\n    {\n      types: [\"class-name\", \"type\"],\n      style: {\n        color: \"#66d9ef\",\n        fontWeight: \"bold\",\n      },\n    },\n    {\n      types: [\"punctuation\", \"symbol\"],\n      style: {\n        color: \"#f8f8f2\",\n      },\n    },\n    {\n      types: [\"tag\"],\n      style: {\n        color: \"#f92672\",\n      },\n    },\n    {\n      types: [\"attr-name\"],\n      style: {\n        color: \"#a6e22e\",\n      },\n    },\n    {\n      types: [\"attr-value\"],\n      style: {\n        color: \"#e6db74\",\n      },\n    },\n  ],\n}\n\n// Custom GitHub-inspired light theme\nconst githubLightTheme: PrismTheme = {\n  plain: {\n    color: \"#24292f\",\n    backgroundColor: \"#ffffff\",\n  },\n  styles: [\n    {\n      types: [\"comment\"],\n      style: {\n        color: \"#6a737d\",\n        fontStyle: \"italic\",\n      },\n    },\n    {\n      types: [\"keyword\", \"operator\"],\n      style: {\n        color: \"#d73a49\",\n        fontWeight: \"600\",\n      },\n    },\n    {\n      types: [\"string\", \"char\"],\n      style: {\n        color: \"#032f62\",\n      },\n    },\n    {\n      types: [\"number\"],\n      style: {\n        color: \"#005cc5\",\n      },\n    },\n    {\n      types: [\"function\", \"method\"],\n      style: {\n        color: \"#6f42c1\",\n      },\n    },\n    {\n      types: [\"class-name\", \"type\"],\n      style: {\n        color: \"#e36209\",\n        fontWeight: \"600\",\n      },\n    },\n    {\n      types: [\"punctuation\", \"symbol\"],\n      style: {\n        color: \"#24292f\",\n      },\n    },\n    {\n      types: [\"tag\"],\n      style: {\n        color: \"#22863a\",\n      },\n    },\n    {\n      types: [\"attr-name\"],\n      style: {\n        color: \"#005cc5\",\n      },\n    },\n    {\n      types: [\"attr-value\"],\n      style: {\n        color: \"#032f62\",\n      },\n    },\n  ],\n}\n\nexport default function CodeSnippetThemeDemo() {\n  const [selectedTheme, setSelectedTheme] = useState<\"monokai\" | \"github\">(\n    \"monokai\"\n  )\n\n  const jsCode = `// Advanced JavaScript patterns and concepts\nclass EventEmitter {\n  constructor() {\n    this.events = new Map();\n  }\n\n  on(event, callback) {\n    if (!this.events.has(event)) {\n      this.events.set(event, []);\n    }\n    this.events.get(event).push(callback);\n    return () => this.off(event, callback);\n  }\n\n  off(event, callback) {\n    const callbacks = this.events.get(event);\n    if (callbacks) {\n      const index = callbacks.indexOf(callback);\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n\n  emit(event, ...args) {\n    const callbacks = this.events.get(event);\n    if (callbacks) {\n      callbacks.forEach(callback => {\n        try {\n          callback(...args);\n        } catch (error) {\n          console.error(\\`Error in event handler for \\${event}:\\`, error);\n        }\n      });\n    }\n  }\n}\n\n// Usage with modern async/await patterns\nconst api = {\n  async fetchUser(id) {\n    const response = await fetch(\\`/api/users/\\${id}\\`);\n    if (!response.ok) {\n      throw new Error(\\`Failed to fetch user: \\${response.statusText}\\`);\n    }\n    return response.json();\n  },\n\n  async updateUser(id, data) {\n    const response = await fetch(\\`/api/users/\\${id}\\`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n    return response.json();\n  }\n};\n\n// Functional programming with higher-order functions\nconst compose = (...fns) => (value) => fns.reduceRight((acc, fn) => fn(acc), value);\nconst pipe = (...fns) => (value) => fns.reduce((acc, fn) => fn(acc), value);\n\nconst addTax = (rate) => (price) => price * (1 + rate);\nconst applyDiscount = (discount) => (price) => price * (1 - discount);\nconst formatCurrency = (price) => \\`$\\${price.toFixed(2)}\\`;\n\nconst calculatePrice = pipe(\n  addTax(0.08),\n  applyDiscount(0.1),\n  formatCurrency\n);\n\nconsole.log(calculatePrice(100)); // $97.20`\n\n  return (\n    <div className=\"w-full space-y-4\">\n      <div className=\"flex gap-2\">\n        <Button\n          variant={selectedTheme === \"monokai\" ? \"default\" : \"outline\"}\n          size=\"sm\"\n          onClick={() => setSelectedTheme(\"monokai\")}\n        >\n          Monokai Dark\n        </Button>\n        <Button\n          variant={selectedTheme === \"github\" ? \"default\" : \"outline\"}\n          size=\"sm\"\n          onClick={() => setSelectedTheme(\"github\")}\n        >\n          GitHub Light\n        </Button>\n      </div>\n\n      <CodeSnippet\n        title=\"advanced-patterns.js\"\n        code={jsCode}\n        language=\"javascript\"\n        theme={selectedTheme === \"monokai\" ? monokaiTheme : githubLightTheme}\n        showLineNumbers={true}\n      />\n    </div>\n  )\n}\n",
      "type": "registry:block",
      "target": "/components/delta/code-snippet-theme-demo.tsx"
    }
  ]
}