{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "vertical-snap-scroll",
  "type": "registry:component",
  "title": "Vertical Snap Scroll",
  "description": "A component for vertical-snap-scroll",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "delta/layout/vertical-snap-scroll.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { usePathname } from \"next/navigation\"\nimport { debounce } from \"lodash\"\nimport { cn } from \"@/lib/utils\"\nimport { Loader2 } from \"lucide-react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\n// Variants\nexport const verticalSnapScrollVariants = cva(\"flex flex-col overflow-y-scroll scroll-smooth snap-y snap-mandatory\", {\n  variants: {\n    variant: {\n      default: \"bg-background\",\n      bordered: \"bg-background border border-border rounded-md\",\n      ghost: \"bg-transparent\",\n    },\n    size: {\n      sm: \"h-[50vh]\",\n      md: \"h-[75vh]\",\n      lg: \"h-[90vh]\",\n      full: \"h-screen\",\n      auto: \"h-auto\",\n    },\n    hideScrollbar: {\n      true: \"scrollbar-hide\",\n      false: \"\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    size: \"full\",\n    hideScrollbar: true,\n  },\n})\n\nexport const verticalSnapScrollItemVariants = cva(\n  \"snap-start flex min-h-screen w-full flex-shrink-0 items-center justify-center transition-all duration-300 transform will-change-transform translate-z-0 relative\",\n  {\n    variants: {\n      variant: {\n        default: \"opacity-100\",\n        fade: \"opacity-90 hover:opacity-100\",\n        bordered: \"border border-border rounded-md m-2 p-4\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\n// Types\nexport interface Item {\n  id: string\n  [key: string]: any\n}\n\nexport interface VerticalSnapScrollProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof verticalSnapScrollVariants> {\n  /**\n   * The items to be scrolled through. Each must have a unique id.\n   */\n  items: Item[]\n  /**\n   * Enable updating the URL when scrolling to a new item.\n   * @default false\n   */\n  enableDynamicRouting?: boolean\n  /**\n   * Prefix for the dynamic routes.\n   * @default \"items\"\n   */\n  routePrefix?: string\n  /**\n   * Callback function to fetch more items when near the end.\n   */\n  onFetchMore: () => Promise<void>\n  /**\n   * Number of items from the end when fetch more should be triggered.\n   * @default 5\n   */\n  fetchThreshold?: number\n  /**\n   * Custom loading indicator to show when fetching more items.\n   */\n  loadingIndicator?: React.ReactNode\n  /**\n   * Hide the scrollbar.\n   * @default true\n   */\n  hideScrollbar?: boolean\n}\n\nexport interface VerticalSnapScrollItemProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof verticalSnapScrollItemVariants> {\n  /**\n   * Whether this item is active. If not provided, component will\n   * determine this based on scroll position.\n   */\n  isActive?: boolean\n  /**\n   * Background image URL.\n   */\n  backgroundImage?: string\n  /**\n   * Overlay text for instructions.\n   */\n  overlayText?: string\n  /**\n   * Overlay text position.\n   * @default \"center\"\n   */\n  overlayPosition?: \"top\" | \"center\" | \"bottom\"\n  /**\n   * Overlay text color.\n   * @default \"white\"\n   */\n  overlayColor?: string\n  /**\n   * Overlay background color.\n   * @default \"rgba(0, 0, 0, 0.5)\"\n   */\n  overlayBgColor?: string\n}\n\nexport interface VerticalSnapScrollLoadingProps extends React.HTMLAttributes<HTMLDivElement> {}\n\n// Context\nconst VerticalSnapScrollContext = React.createContext<{\n  currentIndex: number\n}>({\n  currentIndex: 0,\n})\n\n// Components\nconst VerticalSnapScroll = React.forwardRef<HTMLDivElement, VerticalSnapScrollProps>(\n  (\n    {\n      children,\n      items,\n      enableDynamicRouting = false,\n      routePrefix = \"items\",\n      onFetchMore,\n      fetchThreshold = 5,\n      className,\n      variant = \"default\",\n      size = \"full\",\n      hideScrollbar = true,\n      loadingIndicator,\n      ...props\n    },\n    ref,\n  ) => {\n    const pathname = usePathname()\n    const containerRef = React.useRef<HTMLDivElement>(null)\n    const [currentIndex, setCurrentIndex] = React.useState(0)\n    const [isLoading, setIsLoading] = React.useState(false)\n    const [isFetching, setIsFetching] = React.useState(false)\n\n    const internalRef = ref || containerRef\n    const actualRef = internalRef as React.RefObject<HTMLDivElement>\n\n    const updateURL = React.useCallback(\n      (index: number) => {\n        if (enableDynamicRouting && index >= 0 && index < items.length) {\n          const newPath = `/${routePrefix}/${items[index].id}`\n          window.history.replaceState({ path: newPath }, \"\", newPath)\n        }\n      },\n      [enableDynamicRouting, items, routePrefix],\n    )\n\n    const handleScroll = React.useCallback(() => {\n      const snapContainer = actualRef.current\n      if (snapContainer && !isLoading) {\n        const index = Math.round(snapContainer.scrollTop / snapContainer.clientHeight)\n\n        if (index !== currentIndex) {\n          setCurrentIndex(index)\n          updateURL(index)\n        }\n\n        // Fetch more when we reach the last item\n        if (index >= items.length - 1 && !isLoading && !isFetching) {\n          setIsLoading(true)\n          setIsFetching(true)\n          onFetchMore()\n            .then(() => {\n              setIsLoading(false)\n              setIsFetching(false)\n            })\n            .catch((error) => {\n              console.error(`Error fetching more items: ${error.message || error}`)\n              setIsLoading(false)\n              setIsFetching(false)\n            })\n        }\n\n        // Pre-fetch more items before we reach the end\n        if (items.length - index <= fetchThreshold && index < items.length - 1 && !isFetching) {\n          setIsFetching(true)\n          onFetchMore()\n            .then(() => setIsFetching(false))\n            .catch((error) => {\n              console.error(`Error pre-fetching more items: ${error.message || error}`)\n              setIsFetching(false)\n            })\n        }\n      }\n    }, [currentIndex, updateURL, items, onFetchMore, fetchThreshold, isLoading, isFetching, actualRef])\n\n    React.useEffect(() => {\n      const container = actualRef.current\n      const debouncedHandleScroll = debounce(handleScroll, 100)\n\n      if (container) {\n        container.addEventListener(\"scroll\", debouncedHandleScroll)\n      }\n\n      return () => {\n        if (container) {\n          container.removeEventListener(\"scroll\", debouncedHandleScroll)\n        }\n        debouncedHandleScroll.cancel()\n      }\n    }, [handleScroll, actualRef])\n\n    React.useEffect(() => {\n      if (enableDynamicRouting && pathname) {\n        const itemId = pathname.split(\"/\").pop()\n        const index = items.findIndex((item) => item.id === itemId)\n        const snapContainer = actualRef.current\n\n        if (snapContainer && index !== -1 && index !== currentIndex) {\n          snapContainer.scrollTo({\n            top: index * snapContainer.clientHeight,\n            behavior: \"smooth\",\n          })\n          setCurrentIndex(index)\n        }\n      }\n    }, [pathname, items, currentIndex, enableDynamicRouting, actualRef])\n\n    // Add touch-action manipulation for better mobile experience\n    React.useEffect(() => {\n      const container = actualRef.current\n      if (container) {\n        container.style.touchAction = \"pan-y\"\n        container.style.webkitOverflowScrolling = \"touch\"\n      }\n\n      return () => {\n        if (container) {\n          container.style.touchAction = \"\"\n          container.style.webkitOverflowScrolling = \"\"\n        }\n      }\n    }, [actualRef])\n\n    return (\n      <VerticalSnapScrollContext.Provider value={{ currentIndex }}>\n        <div\n          ref={actualRef}\n          className={cn(\n            verticalSnapScrollVariants({ variant, size, hideScrollbar }),\n            hideScrollbar && \"scrollbar-hide\",\n            className,\n          )}\n          aria-live=\"polite\"\n          tabIndex={0}\n          role=\"region\"\n          aria-roledescription=\"scrollable content\"\n          {...props}\n        >\n          {children}\n          {isLoading && (\n            <VerticalSnapScrollLoading>\n              {loadingIndicator || <Loader2 className=\"h-6 w-6 animate-spin\" />}\n            </VerticalSnapScrollLoading>\n          )}\n        </div>\n      </VerticalSnapScrollContext.Provider>\n    )\n  },\n)\nVerticalSnapScroll.displayName = \"VerticalSnapScroll\"\n\nconst VerticalSnapScrollItem = React.forwardRef<HTMLDivElement, VerticalSnapScrollItemProps>(\n  (\n    {\n      children,\n      className,\n      variant = \"default\",\n      isActive,\n      backgroundImage,\n      overlayText,\n      overlayPosition = \"center\",\n      overlayColor = \"white\",\n      overlayBgColor = \"rgba(0, 0, 0, 0.5)\",\n      ...props\n    },\n    ref,\n  ) => {\n    const { currentIndex } = React.useContext(VerticalSnapScrollContext)\n    const isActiveItem = isActive !== undefined ? isActive : false\n\n    // Determine overlay position classes\n    const overlayPositionClasses = {\n      top: \"items-start pt-16\",\n      center: \"items-center\",\n      bottom: \"items-end pb-16\",\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(verticalSnapScrollItemVariants({ variant }), isActiveItem && \"opacity-100\", className)}\n        style={{\n          backgroundImage: backgroundImage ? `url(${backgroundImage})` : undefined,\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\",\n        }}\n        {...props}\n      >\n        {children}\n\n        {overlayText && (\n          <div\n            className={cn(\"absolute inset-0 flex justify-center px-4 md:px-8\", overlayPositionClasses[overlayPosition])}\n            style={{ backgroundColor: overlayBgColor }}\n          >\n            <p className={cn(\"text-center text-lg md:text-2xl font-medium max-w-2xl\")} style={{ color: overlayColor }}>\n              {overlayText}\n            </p>\n          </div>\n        )}\n      </div>\n    )\n  },\n)\nVerticalSnapScrollItem.displayName = \"VerticalSnapScrollItem\"\n\nconst VerticalSnapScrollLoading = React.forwardRef<HTMLDivElement, VerticalSnapScrollLoadingProps>(\n  ({ children, className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(\"snap-start flex h-24 w-full flex-shrink-0 items-center justify-center\", className)}\n        aria-label=\"Loading more content\"\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  },\n)\nVerticalSnapScrollLoading.displayName = \"VerticalSnapScrollLoading\"\n\nexport { VerticalSnapScroll, VerticalSnapScrollItem, VerticalSnapScrollLoading }\n\n",
      "type": "registry:component",
      "target": "delta/layout/vertical-snap-scroll.tsx"
    },
    {
      "path": "delta/layout/vertical-snap-scroll-demo.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { VerticalSnapScroll, VerticalSnapScrollItem } from \"./vertical-snap-scroll\"\nimport { ChevronDown } from \"lucide-react\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Label } from \"@/components/ui/label\"\n\n// Random image URLs (using Unsplash for random high-quality images)\nconst getRandomImage = (width = 1920, height = 1080, index: number) => {\n  return `https://source.unsplash.com/random/${width}x${height}?sig=${index}`\n}\n\n// Example mock data with random images\nconst initialItems = Array.from({ length: 10 }, (_, i) => ({\n  id: `item-${i + 1}`,\n  title: `Item ${i + 1}`,\n  description: `This is the description for item ${i + 1}`,\n  imageUrl: getRandomImage(1920, 1080, i),\n}))\n\n// Overlay instructions for each slide\nconst instructions = [\n  \"Scroll down to explore more images\",\n  \"Keep scrolling to automatically load more content\",\n  \"Each image snaps into place as you scroll\",\n  \"Try this on your mobile device too!\",\n  \"The URL updates as you scroll through images\",\n  \"Toggle the scrollbar visibility with the switch above\",\n  \"Images are loaded dynamically as you scroll\",\n  \"This component works great for visual storytelling\",\n  \"Perfect for portfolios and image galleries\",\n  \"Reach the end to load more images automatically\",\n]\n\nexport default function VerticalSnapScrollDemo() {\n  const [items, setItems] = React.useState(initialItems)\n  const [loading, setLoading] = React.useState(false)\n  const [hideScrollbar, setHideScrollbar] = React.useState(true)\n\n  const fetchMoreItems = React.useCallback(async () => {\n    setLoading(true)\n\n    // Simulate API delay\n    await new Promise((resolve) => setTimeout(resolve, 1500))\n\n    const startIndex = items.length\n    const newItems = Array.from({ length: 5 }, (_, i) => ({\n      id: `item-${startIndex + i + 1}`,\n      title: `Item ${startIndex + i + 1}`,\n      description: `This is the description for item ${startIndex + i + 1}`,\n      imageUrl: getRandomImage(1920, 1080, startIndex + i),\n    }))\n\n    setItems((prev) => [...prev, ...newItems])\n    setLoading(false)\n\n    return Promise.resolve()\n  }, [items.length])\n\n  return (\n    <div className=\"relative w-full h-screen\">\n      {/* Controls overlay */}\n      <div className=\"absolute top-4 right-4 z-10 flex items-center gap-2 bg-black/50 p-2 rounded-md\">\n        <Switch id=\"hide-scrollbar\" checked={hideScrollbar} onCheckedChange={setHideScrollbar} />\n        <Label htmlFor=\"hide-scrollbar\" className=\"text-white\">\n          Hide Scrollbar\n        </Label>\n      </div>\n\n      {/* First-time user hint */}\n      <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 z-10 animate-bounce\">\n        <ChevronDown className=\"h-8 w-8 text-white drop-shadow-md\" />\n      </div>\n\n      <VerticalSnapScroll\n        items={items}\n        onFetchMore={fetchMoreItems}\n        fetchThreshold={3}\n        enableDynamicRouting={true}\n        routePrefix=\"images\"\n        variant=\"default\"\n        size=\"full\"\n        hideScrollbar={hideScrollbar}\n        aria-label=\"Image gallery\"\n      >\n        {items.map((item, index) => (\n          <VerticalSnapScrollItem\n            key={item.id}\n            variant=\"fade\"\n            id={item.id}\n            backgroundImage={item.imageUrl}\n            overlayText={instructions[index % instructions.length]}\n            overlayPosition={index % 3 === 0 ? \"top\" : index % 3 === 1 ? \"center\" : \"bottom\"}\n            overlayBgColor=\"rgba(0, 0, 0, 0.3)\"\n          />\n        ))}\n      </VerticalSnapScroll>\n    </div>\n  )\n}\n\n",
      "type": "registry:component",
      "target": "delta/layout/vertical-snap-scroll-demo.tsx"
    }
  ]
}
