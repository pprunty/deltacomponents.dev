{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabs",
  "type": "registry:component",
  "title": "Tabs",
  "description": "A component for tabs",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "delta/components/tabs.tsx",
      "content": "'use client';\n\nimport {\n  useState,\n  useRef,\n  useEffect,\n  type ReactNode,\n  useCallback,\n} from 'react';\nimport { cn } from '@/lib/utils';\nimport { XScrollable } from '@/delta/components/x-scrollable';\n\nexport interface TabItem {\n  id: string;\n  label: string | ReactNode;\n  disabled?: boolean;\n}\n\nexport interface TabsProps {\n  /** Array of tab items to display */\n  items: TabItem[];\n  /** Index of the default active tab (0-based) */\n  defaultActiveIndex?: number;\n  /** Callback fired when active tab changes */\n  onTabChange?: (index: number, id: string) => void;\n  /** Custom class name for the tabs container */\n  className?: string;\n  /** Custom class name for the active indicator */\n  activeIndicatorClassName?: string;\n  /** Custom class name for the hover indicator */\n  hoverIndicatorClassName?: string;\n  /** Custom class name for each tab */\n  tabClassName?: string;\n  /** Custom class name for the active tab */\n  activeTabClassName?: string;\n  /** Custom class name for the inactive tab */\n  inactiveTabClassName?: string;\n  /** Custom class name for the disabled tab */\n  disabledTabClassName?: string;\n  /** Whether to show the hover effect */\n  showHoverEffect?: boolean;\n  /** Whether to show the active indicator */\n  showActiveIndicator?: boolean;\n  /** Position of the active indicator */\n  activeIndicatorPosition?: 'top' | 'bottom';\n  /** Size of the tabs */\n  size?: 'sm' | 'md' | 'lg';\n  /** Variant of the tabs */\n  variant?: 'default' | 'pills' | 'underlined';\n  /** Whether to stretch tabs to fill the container */\n  stretch?: boolean;\n  /** Aria label for the tabs navigation */\n  ariaLabel?: string;\n  /** Whether to show a bottom border for the entire tab list */\n  showBottomBorder?: boolean;\n  /** Custom class name for the bottom border */\n  bottomBorderClassName?: string;\n}\n\nexport function Tabs({\n  items,\n  defaultActiveIndex = 0,\n  onTabChange,\n  className,\n  activeIndicatorClassName,\n  hoverIndicatorClassName,\n  tabClassName,\n  activeTabClassName,\n  inactiveTabClassName,\n  disabledTabClassName,\n  showHoverEffect = true,\n  showActiveIndicator = true,\n  activeIndicatorPosition = 'bottom',\n  size = 'md',\n  variant = 'default',\n  stretch = false,\n  ariaLabel = 'Tabs',\n  showBottomBorder = false,\n  bottomBorderClassName,\n}: TabsProps) {\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n  const [activeIndex, setActiveIndex] = useState(defaultActiveIndex);\n  const [hoverStyle, setHoverStyle] = useState({});\n  const [activeStyle, setActiveStyle] = useState({ left: '0px', width: '0px' });\n  const tabRefs = useRef<(HTMLDivElement | null)[]>([]);\n  const scrollContainerRef = useRef<HTMLDivElement | null>(null);\n\n  // Update hover indicator position\n  useEffect(() => {\n    if (hoveredIndex !== null && showHoverEffect) {\n      const hoveredElement = tabRefs.current[hoveredIndex];\n      if (hoveredElement) {\n        const { offsetLeft, offsetWidth } = hoveredElement;\n        setHoverStyle({\n          left: `${offsetLeft}px`,\n          width: `${offsetWidth}px`,\n        });\n      }\n    }\n  }, [hoveredIndex, showHoverEffect]);\n\n  // Update active indicator position\n  const updateActiveIndicator = useCallback(() => {\n    if (showActiveIndicator) {\n      const activeElement = tabRefs.current[activeIndex];\n      if (activeElement) {\n        const { offsetLeft, offsetWidth } = activeElement;\n        setActiveStyle({\n          left: `${offsetLeft}px`,\n          width: `${offsetWidth}px`,\n        });\n      }\n    }\n  }, [activeIndex, showActiveIndicator]);\n\n  // Update active indicator on active tab change\n  useEffect(() => {\n    updateActiveIndicator();\n  }, []);\n\n  // Initialize active indicator position\n  useEffect(() => {\n    requestAnimationFrame(updateActiveIndicator);\n  }, [updateActiveIndicator]);\n\n  // Handle tab click\n  const handleTabClick = (index: number) => {\n    if (items[index].disabled) return;\n\n    setActiveIndex(index);\n    onTabChange?.(index, items[index].id);\n\n    // Scroll the clicked tab into center view\n    scrollTabToCenter(index);\n  };\n\n  // Function to scroll tab to center\n  const scrollTabToCenter = (index: number) => {\n    const tabElement = tabRefs.current[index];\n    const scrollContainer = scrollContainerRef.current;\n\n    if (tabElement && scrollContainer) {\n      const containerWidth = scrollContainer.offsetWidth;\n      const tabWidth = tabElement.offsetWidth;\n      const tabLeft = tabElement.offsetLeft;\n\n      // Calculate position to center the tab\n      const scrollTarget = tabLeft - containerWidth / 2 + tabWidth / 2;\n\n      // Smooth scroll to the target position\n      scrollContainer.scrollTo({\n        left: scrollTarget,\n        behavior: 'smooth',\n      });\n    }\n  };\n\n  // Size classes\n  const sizeClasses = {\n    sm: 'h-[24px] text-xs',\n    md: 'h-[30px] text-sm',\n    lg: 'h-[36px] text-base',\n  };\n\n  // Variant classes\n  const variantClasses = {\n    default: '',\n    pills: 'rounded-full',\n    underlined: '',\n  };\n\n  // Active indicator classes\n  const activeIndicatorClasses = {\n    default: 'h-[4px] bg-foreground dark:bg-white',\n    pills: 'hidden',\n    underlined: 'h-[4px] bg-foreground dark:bg-white',\n  };\n\n  // Hover indicator classes\n  const hoverIndicatorClasses = {\n    default: 'bg-[#0e0f1114] dark:bg-[#ffffff1a] rounded-[6px]',\n    pills: 'bg-[#0e0f1114] dark:bg-[#ffffff1a] rounded-full',\n    underlined: 'bg-[#0e0f1114] dark:bg-[#ffffff1a] rounded-[6px]',\n  };\n\n  // Create a proper ref callback function\n  const setTabRef = useCallback((el: HTMLDivElement | null, index: number) => {\n    tabRefs.current[index] = el;\n  }, []);\n\n  // Save a reference to the scroll container when it's mounted\n  const handleScrollableRef = useCallback((node: HTMLDivElement | null) => {\n    if (node) {\n      // Find the actual scrollable div inside XScrollable\n      const scrollableDiv = node.querySelector('div[class*=\"overflow-x-auto\"]');\n      if (scrollableDiv) {\n        scrollContainerRef.current = scrollableDiv as HTMLDivElement;\n      }\n    }\n  }, []);\n\n  // Center the active tab on initial render\n  useEffect(() => {\n    // Use a small timeout to ensure the tabs are properly rendered\n    const timer = setTimeout(() => {\n      scrollTabToCenter(activeIndex);\n    }, 100);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  const tabsContent = (\n    <div\n      className={cn('relative', showBottomBorder && 'pb-px', className)}\n      role=\"tablist\"\n      aria-label={ariaLabel}\n    >\n      {/* Bottom border for the entire tab list */}\n      {showBottomBorder && (\n        <div\n          className={cn(\n            'absolute bottom-0 left-0 right-0 h-px bg-border dark:bg-border',\n            bottomBorderClassName,\n          )}\n        />\n      )}\n\n      {/* Hover Indicator */}\n      {showHoverEffect && (\n        <div\n          className={cn(\n            'absolute transition-all duration-300 ease-out flex items-center z-0',\n            sizeClasses[size],\n            hoverIndicatorClasses[variant],\n            hoverIndicatorClassName,\n          )}\n          style={{\n            ...hoverStyle,\n            opacity: hoveredIndex !== null ? 1 : 0,\n          }}\n          aria-hidden=\"true\"\n        />\n      )}\n\n      {/* Tabs */}\n      <div\n        className={cn(\n          'relative flex items-center',\n          stretch ? 'w-full' : '',\n          variant === 'default' ? 'space-x-[6px]' : 'space-x-[2px]',\n        )}\n      >\n        {items.map((item, index) => (\n          <div\n            key={item.id}\n            ref={(el) => setTabRef(el, index)}\n            className={cn(\n              'px-3 py-2 sm:mb-1.5 mb-2 cursor-pointer transition-colors duration-300',\n              sizeClasses[size],\n              variant === 'pills' && index === activeIndex\n                ? 'bg-[#0e0f1114] dark:bg-[#ffffff1a] rounded-full'\n                : '',\n              item.disabled ? 'opacity-50 cursor-not-allowed' : '',\n              stretch ? 'flex-1 text-center' : '',\n              tabClassName,\n              index === activeIndex\n                ? cn('text-foreground dark:text-white', activeTabClassName)\n                : cn(\n                    'text-[#0e0f1199] dark:text-[#ffffff99]',\n                    inactiveTabClassName,\n                  ),\n              item.disabled && disabledTabClassName,\n              variantClasses[variant],\n            )}\n            onMouseEnter={() => !item.disabled && setHoveredIndex(index)}\n            onMouseLeave={() => setHoveredIndex(null)}\n            onClick={() => handleTabClick(index)}\n            role=\"tab\"\n            aria-selected={index === activeIndex}\n            aria-disabled={item.disabled}\n            aria-controls={`tabpanel-${item.id}`}\n            id={`tab-${item.id}`}\n            tabIndex={index === activeIndex ? 0 : -1}\n          >\n            <div className=\"whitespace-nowrap flex items-center justify-center h-full\">\n              {item.label}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Active Indicator */}\n      {showActiveIndicator && variant !== 'pills' && (\n        <div\n          className={cn(\n            'absolute transition-all duration-300 ease-out z-10',\n            activeIndicatorClasses[variant],\n            activeIndicatorPosition === 'top' ? 'top-[-1px]' : 'bottom-[-1px]',\n            activeIndicatorClassName,\n          )}\n          style={activeStyle}\n          aria-hidden=\"true\"\n        />\n      )}\n    </div>\n  );\n\n  return (\n    <div ref={handleScrollableRef}>\n      <XScrollable showScrollbar={false}>{tabsContent}</XScrollable>\n    </div>\n  );\n}\n\nexport interface TabPanelProps {\n  /** ID of the tab this panel belongs to */\n  tabId: string;\n  /** Whether this panel is currently active */\n  active: boolean;\n  /** Content of the tab panel */\n  children: ReactNode;\n  /** Custom class name for the tab panel */\n  className?: string;\n}\n\nexport function TabPanel({\n  tabId,\n  active,\n  children,\n  className,\n}: TabPanelProps) {\n  if (!active) return null;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      id={`tabpanel-${tabId}`}\n      aria-labelledby={`tab-${tabId}`}\n      className={className}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport interface TabsContentProps {\n  /** Children should be TabPanel components */\n  children: ReactNode;\n  /** Custom class name for the tabs content container */\n  className?: string;\n}\n\nexport function TabsContent({ children, className }: TabsContentProps) {\n  return <div className={className}>{children}</div>;\n}\n",
      "type": "registry:component",
      "target": "delta/components/tabs.tsx"
    },
    {
      "path": "delta/components/tabs-demo.tsx",
      "content": "'use client';\n\nimport { useState } from 'react';\nimport { Tabs, TabPanel } from './tabs';\n\nexport default function TabsDemo() {\n  return (\n    <div className=\"container mx-auto max-w-7xl px-4 py-8 space-y-12\">\n      <UnderlinedTabsDemo />\n      <NotUnderlinedTabsDemo />\n      <PillsTabsDemo />\n      <CustomPillsTabsDemo />\n    </div>\n  );\n}\n\nexport function UnderlinedTabsDemo() {\n  const [activeIndex, setActiveIndex] = useState(0);\n\n  const tabs = [\n    { id: 'account', label: 'Account' },\n    { id: 'password', label: 'Password' },\n    { id: 'notifications', label: 'Notifications' },\n    { id: 'rewards', label: 'Rewards' },\n    { id: 'insights', label: 'Insights' },\n    { id: 'billing', label: 'Billing', disabled: true },\n  ];\n\n  return (\n    <div>\n      <h2 className=\"text-lg font-medium mb-4\">Underlined Tabs</h2>\n      <Tabs\n        items={tabs}\n        defaultActiveIndex={0}\n        onTabChange={(index) => setActiveIndex(index)}\n        showBottomBorder={true}\n        variant=\"underlined\"\n      />\n\n      <div className=\"mt-6 p-4\">\n        <TabPanel tabId=\"account\" active={activeIndex === 0}>\n          <h3 className=\"font-medium\">Account Settings</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage your account settings and preferences.\n          </p>\n        </TabPanel>\n        <TabPanel tabId=\"password\" active={activeIndex === 1}>\n          <h3 className=\"font-medium\">Password Settings</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Update your password and security preferences.\n          </p>\n        </TabPanel>\n        <TabPanel tabId=\"notifications\" active={activeIndex === 2}>\n          <h3 className=\"font-medium\">Notification Preferences</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Control when and how you receive notifications.\n          </p>\n        </TabPanel>\n        <TabPanel tabId=\"rewards\" active={activeIndex === 3}>\n          <h3 className=\"font-medium\">Rewards Program</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            View your rewards and redeem points.\n          </p>\n        </TabPanel>\n        <TabPanel tabId=\"insights\" active={activeIndex === 4}>\n          <h3 className=\"font-medium\">Usage Insights</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            View analytics and insights about your account usage.\n          </p>\n        </TabPanel>\n        <TabPanel tabId=\"billing\" active={activeIndex === 5}>\n          <h3 className=\"font-medium\">Billing Information</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage your billing information and subscription.\n          </p>\n        </TabPanel>\n      </div>\n    </div>\n  );\n}\n\nexport function NotUnderlinedTabsDemo() {\n  const [activeIndex, setActiveIndex] = useState(0);\n\n  const tabs = [\n    { id: 'account', label: 'Account' },\n    { id: 'password', label: 'Password' },\n    { id: 'notifications', label: 'Notifications' },\n    { id: 'rewards', label: 'Rewards' },\n    { id: 'insights', label: 'Insights' },\n    { id: 'billing', label: 'Billing', disabled: true },\n  ];\n\n  return (\n    <div>\n      <h2 className=\"text-lg font-medium mb-4\">Not Underlined Tabs</h2>\n      <Tabs\n        items={tabs}\n        defaultActiveIndex={0}\n        onTabChange={(index) => setActiveIndex(index)}\n        showBottomBorder={false}\n      />\n\n      <div className=\"mt-6 p-4 \">\n        <TabPanel tabId=\"account\" active={activeIndex === 0}>\n          <h3 className=\"font-medium\">Account Settings</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage your account settings and preferences.\n          </p>\n        </TabPanel>\n        <TabPanel tabId=\"password\" active={activeIndex === 1}>\n          <h3 className=\"font-medium\">Password Settings</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Update your password and security preferences.\n          </p>\n        </TabPanel>\n        <TabPanel tabId=\"notifications\" active={activeIndex === 2}>\n          <h3 className=\"font-medium\">Notification Preferences</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Control when and how you receive notifications.\n          </p>\n        </TabPanel>\n        <TabPanel tabId=\"rewards\" active={activeIndex === 3}>\n          <h3 className=\"font-medium\">Rewards Program</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            View your rewards and redeem points.\n          </p>\n        </TabPanel>\n        <TabPanel tabId=\"insights\" active={activeIndex === 4}>\n          <h3 className=\"font-medium\">Usage Insights</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            View analytics and insights about your account usage.\n          </p>\n        </TabPanel>\n        <TabPanel tabId=\"billing\" active={activeIndex === 5}>\n          <h3 className=\"font-medium\">Billing Information</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage your billing information and subscription.\n          </p>\n        </TabPanel>\n      </div>\n    </div>\n  );\n}\n\nexport function PillsTabsDemo() {\n  const [activeIndex, setActiveIndex] = useState(0);\n\n  const tabs = [\n    { id: 'account', label: 'Account' },\n    { id: 'password', label: 'Password' },\n    { id: 'notifications', label: 'Notifications' },\n    { id: 'rewards', label: 'Rewards' },\n    { id: 'insights', label: 'Insights' },\n    { id: 'billing', label: 'Billing', disabled: true },\n  ];\n\n  return (\n    <div>\n      <h2 className=\"text-lg font-medium mb-4\">Pills Tabs</h2>\n      <Tabs\n        items={tabs}\n        defaultActiveIndex={0}\n        onTabChange={(index) => setActiveIndex(index)}\n        variant=\"pills\"\n        showHoverEffect={true}\n        showActiveIndicator={false}\n        size=\"md\"\n      />\n\n      <div className=\"mt-6 p-4  bg-card\">\n        <TabPanel tabId=\"account\" active={activeIndex === 0}>\n          <h3 className=\"font-medium\">Account Settings</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage your account settings and preferences.\n          </p>\n        </TabPanel>\n        <TabPanel tabId=\"password\" active={activeIndex === 1}>\n          <h3 className=\"font-medium\">Password Settings</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Update your password and security preferences.\n          </p>\n        </TabPanel>\n        <TabPanel tabId=\"notifications\" active={activeIndex === 2}>\n          <h3 className=\"font-medium\">Notification Preferences</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Control when and how you receive notifications.\n          </p>\n        </TabPanel>\n        <TabPanel tabId=\"rewards\" active={activeIndex === 3}>\n          <h3 className=\"font-medium\">Rewards Program</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            View your rewards and redeem points.\n          </p>\n        </TabPanel>\n        <TabPanel tabId=\"insights\" active={activeIndex === 4}>\n          <h3 className=\"font-medium\">Usage Insights</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            View analytics and insights about your account usage.\n          </p>\n        </TabPanel>\n        <TabPanel tabId=\"billing\" active={activeIndex === 5}>\n          <h3 className=\"font-medium\">Billing Information</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage your billing information and subscription.\n          </p>\n        </TabPanel>\n      </div>\n    </div>\n  );\n}\n\nexport function CustomPillsTabsDemo() {\n  const [activeIndex, setActiveIndex] = useState(0);\n\n  const tabs = [\n    { id: 'discover', label: 'Discover' },\n    { id: 'podcasts', label: 'Podcasts' },\n    { id: 'artists', label: 'Artists' },\n    { id: 'albums', label: 'Albums' },\n    { id: 'playlists', label: 'Playlists' },\n  ];\n\n  return (\n    <div>\n      <h2 className=\"text-lg font-medium mb-4\">\n        Custom Spotify-Style Pills Tabs\n      </h2>\n      <Tabs\n        items={tabs}\n        defaultActiveIndex={0}\n        onTabChange={(index) => setActiveIndex(index)}\n        variant=\"pills\"\n        showHoverEffect={true}\n        showActiveIndicator={false}\n        size=\"md\"\n        tabClassName=\"text-gray-700 dark:text-gray-300 font-medium\"\n        activeTabClassName=\"bg-[#1cd760] dark:bg-[#1cd760] text-white dark:text-black font-medium\"\n        inactiveTabClassName=\"\"\n      />\n\n      <div className=\"mt-6 p-4  bg-card\">\n        <TabPanel tabId=\"discover\" active={activeIndex === 0}>\n          <h3 className=\"font-medium\">Discover New Music</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Find new music based on your listening habits.\n          </p>\n        </TabPanel>\n        <TabPanel tabId=\"podcasts\" active={activeIndex === 1}>\n          <h3 className=\"font-medium\">Podcasts</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Browse popular podcasts and discover new shows.\n          </p>\n        </TabPanel>\n        <TabPanel tabId=\"artists\" active={activeIndex === 2}>\n          <h3 className=\"font-medium\">Artists</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Browse your favorite artists and discover new ones.\n          </p>\n        </TabPanel>\n        <TabPanel tabId=\"albums\" active={activeIndex === 3}>\n          <h3 className=\"font-medium\">Albums</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Browse your favorite albums and discover new releases.\n          </p>\n        </TabPanel>\n        <TabPanel tabId=\"playlists\" active={activeIndex === 4}>\n          <h3 className=\"font-medium\">Playlists</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Browse your playlists and discover curated collections.\n          </p>\n        </TabPanel>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/components/tabs-demo.tsx"
    }
  ]
}