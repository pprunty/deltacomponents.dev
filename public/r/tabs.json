{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabs",
  "type": "registry:component",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "registryDependencies": ["https://deltacomponents.dev/r/x-scrollable.json"],
  "files": [
    {
      "path": "registry/components/tabs.tsx",
      "content": "\"use client\"\n\nimport React, {\n  forwardRef,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  type ReactNode,\n} from \"react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { XScrollable } from \"@/delta/x-scrollable\"\n\n// Base Tabs component (Root)\nconst Tabs = forwardRef<\n  HTMLDivElement,\n  {\n    defaultValue?: string\n    value?: string\n    onValueChange?: (value: string) => void\n    className?: string\n    children?: ReactNode\n  }\n>(\n  (\n    { defaultValue, value, onValueChange, className, children, ...props },\n    ref\n  ) => {\n    const [activeValue, setActiveValue] = useState(value || defaultValue || \"\")\n\n    useEffect(() => {\n      if (value !== undefined) {\n        setActiveValue(value)\n      }\n    }, [value])\n\n    const handleValueChange = useCallback(\n      (newValue: string) => {\n        if (value === undefined) {\n          setActiveValue(newValue)\n        }\n        onValueChange?.(newValue)\n      },\n      [onValueChange, value]\n    )\n\n    return (\n      <div ref={ref} className={cn(\"tabs-container\", className)} {...props}>\n        {React.Children.map(children, (child) => {\n          if (!React.isValidElement(child)) return child\n\n          // Only pass tab-related props to tab components\n          const childType = child.type\n          const isTabComponent =\n            childType === TabsList ||\n            childType === TabsTrigger ||\n            childType === TabsContent ||\n            (typeof childType === \"function\" &&\n              ((childType as any).displayName === \"TabsList\" ||\n                (childType as any).displayName === \"TabsTrigger\" ||\n                (childType as any).displayName === \"TabsContent\"))\n\n          if (isTabComponent) {\n            return React.cloneElement(\n              child as React.ReactElement<{\n                activeValue?: string\n                onValueChange?: (value: string) => void\n                className?: string\n                children?: ReactNode\n                [key: string]: any\n              }>,\n              {\n                activeValue,\n                onValueChange: handleValueChange,\n              }\n            )\n          }\n\n          return child\n        })}\n      </div>\n    )\n  }\n)\nTabs.displayName = \"Tabs\"\n\n// TabsList component\nconst TabsList = forwardRef<\n  HTMLDivElement,\n  {\n    className?: string\n    activeValue?: string\n    onValueChange?: (value: string) => void\n    children?: ReactNode\n    showHoverEffect?: boolean\n    showActiveIndicator?: boolean\n    activeIndicatorPosition?: \"top\" | \"bottom\"\n    activeIndicatorOffset?: number\n    size?: \"sm\" | \"md\" | \"lg\"\n    variant?: \"default\" | \"pills\" | \"underlined\"\n    stretch?: boolean\n    ariaLabel?: string\n    showBottomBorder?: boolean\n    bottomBorderClassName?: string\n    activeIndicatorClassName?: string\n    hoverIndicatorClassName?: string\n  }\n>(\n  (\n    {\n      className,\n      activeValue,\n      onValueChange,\n      children,\n      showHoverEffect = true,\n      showActiveIndicator = true,\n      activeIndicatorPosition = \"bottom\",\n      activeIndicatorOffset = 0,\n      size = \"sm\",\n      variant = \"default\",\n      stretch = false,\n      ariaLabel = \"Tabs\",\n      showBottomBorder = false,\n      bottomBorderClassName,\n      activeIndicatorClassName,\n      hoverIndicatorClassName,\n      ...props\n    },\n    ref\n  ) => {\n    const [hoveredIndex, setHoveredIndex] = useState<number | null>(null)\n    const [hoverStyle, setHoverStyle] = useState({})\n    const [activeStyle, setActiveStyle] = useState({\n      left: \"0px\",\n      width: \"0px\",\n    })\n    const tabRefs = useRef<(HTMLDivElement | null)[]>([])\n    const scrollContainerRef = useRef<HTMLDivElement | null>(null)\n\n    // Find active tab index based on value\n    const activeIndex = React.Children.toArray(children).findIndex(\n      (child) =>\n        React.isValidElement(child) &&\n        (child as React.ReactElement<{ value: string }>).props.value ===\n          activeValue\n    )\n\n    // Update hover indicator position\n    useEffect(() => {\n      if (hoveredIndex !== null && showHoverEffect) {\n        const hoveredElement = tabRefs.current[hoveredIndex]\n        if (hoveredElement) {\n          const { offsetLeft, offsetWidth } = hoveredElement\n          setHoverStyle({\n            left: `${offsetLeft}px`,\n            width: `${offsetWidth}px`,\n          })\n        }\n      }\n    }, [hoveredIndex, showHoverEffect])\n\n    // Update active indicator position\n    const updateActiveIndicator = useCallback(() => {\n      if (showActiveIndicator && activeIndex >= 0) {\n        const activeElement = tabRefs.current[activeIndex]\n        if (activeElement) {\n          const { offsetLeft, offsetWidth } = activeElement\n          setActiveStyle({\n            left: `${offsetLeft}px`,\n            width: `${offsetWidth}px`,\n          })\n        }\n      }\n    }, [activeIndex, showActiveIndicator])\n\n    // Update active indicator on active tab change\n    useEffect(() => {\n      updateActiveIndicator()\n    }, [activeIndex, updateActiveIndicator])\n\n    // Initialize active indicator position\n    useEffect(() => {\n      requestAnimationFrame(updateActiveIndicator)\n    }, [updateActiveIndicator])\n\n    // Function to scroll tab to center\n    const scrollTabToCenter = (index: number) => {\n      const tabElement = tabRefs.current[index]\n      const scrollContainer = scrollContainerRef.current\n\n      if (tabElement && scrollContainer) {\n        const containerWidth = scrollContainer.offsetWidth\n        const tabWidth = tabElement.offsetWidth\n        const tabLeft = tabElement.offsetLeft\n\n        // Calculate position to center the tab\n        const scrollTarget = tabLeft - containerWidth / 2 + tabWidth / 2\n\n        // Smooth scroll to the target position\n        scrollContainer.scrollTo({\n          left: scrollTarget,\n          behavior: \"smooth\",\n        })\n      }\n    }\n\n    // Size classes\n    const sizeClasses = {\n      sm: \"h-[32px] text-sm\",\n      md: \"h-[40px] text-base\",\n      lg: \"h-[48px] text-lg\",\n    }\n\n    // Variant classes\n    const variantClasses = {\n      default: \"\",\n      pills: \"rounded-full\",\n      underlined: \"\",\n    }\n\n    // Active indicator classes\n    const activeIndicatorClasses = {\n      default: \"h-[4px] bg-primary dark:bg-primary\",\n      pills: \"hidden\",\n      underlined: \"h-[4px] bg-primary dark:bg-primary\",\n    }\n\n    // Hover indicator classes\n    const hoverIndicatorClasses = {\n      default: \"bg-muted dark:bg-muted rounded-[6px]\",\n      pills: \"bg-muted dark:bg-muted rounded-full\",\n      underlined: \"bg-muted dark:bg-muted rounded-[6px]\",\n    }\n\n    // Create a proper ref callback function\n    const setTabRef = useCallback(\n      (el: HTMLDivElement | null, index: number) => {\n        tabRefs.current[index] = el\n      },\n      []\n    )\n\n    // Save a reference to the scroll container when it's mounted\n    const handleScrollableRef = useCallback((node: HTMLDivElement | null) => {\n      if (node) {\n        // Find the actual scrollable div inside XScrollable\n        const scrollableDiv = node.querySelector(\n          'div[class*=\"overflow-x-auto\"]'\n        )\n        if (scrollableDiv) {\n          scrollContainerRef.current = scrollableDiv as HTMLDivElement\n        }\n      }\n    }, [])\n\n    // Center the active tab on initial render only\n    useEffect(() => {\n      if (activeIndex >= 0) {\n        // Use a small timeout to ensure the tabs are properly rendered\n        const timer = setTimeout(() => {\n          scrollTabToCenter(activeIndex)\n        }, 100)\n\n        return () => clearTimeout(timer)\n      }\n    }, []) // Empty dependency array means this only runs once on mount\n\n    return (\n      <div\n        ref={handleScrollableRef}\n        className={cn(\"relative\", className)}\n        role=\"tablist\"\n        aria-label={ariaLabel}\n        {...props}\n      >\n        <XScrollable showScrollbar={false}>\n          <div className={cn(\"relative\", showBottomBorder && \"pb-px\")}>\n            {/* Bottom border for the entire tab list */}\n            {showBottomBorder && (\n              <div\n                className={cn(\n                  \"absolute bottom-0 left-0 right-0 h-px bg-border dark:bg-border\",\n                  bottomBorderClassName\n                )}\n              />\n            )}\n\n            {/* Hover Indicator */}\n            {showHoverEffect && (\n              <div\n                className={cn(\n                  \"absolute transition-all duration-300 ease-out flex items-center z-0\",\n                  sizeClasses[size],\n                  hoverIndicatorClasses[variant],\n                  hoverIndicatorClassName\n                )}\n                style={{\n                  ...hoverStyle,\n                  opacity: hoveredIndex !== null ? 1 : 0,\n                  transition: \"all 300ms ease-out\",\n                }}\n                aria-hidden=\"true\"\n              />\n            )}\n\n            {/* Tabs */}\n            <div\n              ref={ref}\n              className={cn(\n                \"relative flex items-center\",\n                stretch ? \"w-full\" : \"\",\n                variant === \"default\" ? \"space-x-[6px]\" : \"space-x-[2px]\"\n              )}\n            >\n              {React.Children.map(children, (child, index) => {\n                if (!React.isValidElement(child)) return child\n\n                const props = (\n                  child as React.ReactElement<{\n                    value: string\n                    disabled?: boolean\n                    label?: string\n                    className?: string\n                    activeClassName?: string\n                    inactiveClassName?: string\n                    disabledClassName?: string\n                  }>\n                ).props\n\n                const { value, disabled, label } = props\n                const isActive = value === activeValue\n\n                return (\n                  <div\n                    key={value}\n                    ref={(el) => setTabRef(el, index)}\n                    className={cn(\n                      \"px-3 py-2 sm:mb-1.5 mb-2 cursor-pointer transition-colors duration-300\",\n                      sizeClasses[size],\n                      variant === \"pills\" && isActive\n                        ? \"bg-[#0e0f1114] dark:bg-[#ffffff1a] rounded-full\"\n                        : \"\",\n                      disabled ? \"opacity-50 cursor-not-allowed\" : \"\",\n                      stretch ? \"flex-1 text-center\" : \"\",\n                      isActive\n                        ? props.activeClassName ||\n                            \"text-foreground dark:text-foreground\"\n                        : props.inactiveClassName ||\n                            \"text-muted-foreground dark:text-muted-foreground\",\n                      disabled && props.disabledClassName,\n                      variantClasses[variant],\n                      props.className\n                    )}\n                    onMouseEnter={() => !disabled && setHoveredIndex(index)}\n                    onMouseLeave={() => setHoveredIndex(null)}\n                    onClick={() => {\n                      if (!disabled) {\n                        onValueChange?.(value)\n                        scrollTabToCenter(index)\n                      }\n                    }}\n                    role=\"tab\"\n                    aria-selected={isActive}\n                    aria-disabled={disabled}\n                    aria-controls={`tabpanel-${value}`}\n                    id={`tab-${value}`}\n                    tabIndex={isActive ? 0 : -1}\n                  >\n                    <div className=\"whitespace-nowrap flex items-center justify-center h-full\">\n                      {child}\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n\n            {/* Active Indicator */}\n            {showActiveIndicator && variant !== \"pills\" && activeIndex >= 0 && (\n              <div\n                className={cn(\n                  \"absolute transition-all duration-300 ease-out z-10\",\n                  activeIndicatorClasses[variant],\n                  activeIndicatorPosition === \"top\"\n                    ? \"top-[-1px]\"\n                    : \"bottom-[-1px]\",\n                  activeIndicatorClassName\n                )}\n                style={{\n                  ...activeStyle,\n                  transition: \"all 300ms ease-out z-50\",\n                  [activeIndicatorPosition]: `${activeIndicatorOffset}px`,\n                }}\n                aria-hidden=\"true\"\n              />\n            )}\n          </div>\n        </XScrollable>\n      </div>\n    )\n  }\n)\nTabsList.displayName = \"TabsList\"\n\n// TabsTrigger component\nconst TabsTrigger = forwardRef<\n  HTMLDivElement,\n  {\n    value: string\n    disabled?: boolean\n    label?: string\n    className?: string\n    activeClassName?: string\n    inactiveClassName?: string\n    disabledClassName?: string\n    activeValue?: string\n    onValueChange?: (value: string) => void\n    children?: ReactNode\n  }\n>(\n  (\n    {\n      value,\n      disabled = false,\n      label,\n      className,\n      activeClassName,\n      inactiveClassName,\n      disabledClassName,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    return (\n      <div ref={ref} className={className} {...props}>\n        {label || children}\n      </div>\n    )\n  }\n)\n\nTabsTrigger.displayName = \"TabsTrigger\"\n\n// TabsContent component\nconst TabsContent = forwardRef<\n  HTMLDivElement,\n  {\n    value: string\n    className?: string\n    activeValue?: string\n    onValueChange?: (value: string) => void\n    children: ReactNode\n  }\n>(\n  (\n    {\n      value,\n      className,\n      activeValue,\n      onValueChange, // Destructure this prop to prevent it from being passed to the div\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    if (value !== activeValue) return null\n\n    return (\n      <div\n        ref={ref}\n        role=\"tabpanel\"\n        id={`tabpanel-${value}`}\n        aria-labelledby={`tab-${value}`}\n        className={className}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n)\nTabsContent.displayName = \"TabsContent\"\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
      "type": "registry:component",
      "target": "/delta/tabs.tsx"
    }
  ]
}
