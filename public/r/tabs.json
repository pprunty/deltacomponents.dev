{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabs",
  "type": "registry:component",
  "title": "Tabs",
  "description": "A component for tabs",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "delta/components/tabs.tsx",
      "content": "'use client';\n\nimport React, {\n  useState,\n  useRef,\n  useEffect,\n  type ReactNode,\n  useCallback,\n  forwardRef,\n} from 'react';\nimport { cn } from '@/lib/utils';\nimport { XScrollable } from '@/delta/components/x-scrollable';\n\n// Base Tabs component (Root)\nconst Tabs = forwardRef<\n  HTMLDivElement,\n  {\n    defaultValue?: string;\n    value?: string;\n    onValueChange?: (value: string) => void;\n    className?: string;\n    children?: ReactNode;\n  }\n>(\n  (\n    { defaultValue, value, onValueChange, className, children, ...props },\n    ref,\n  ) => {\n    const [activeValue, setActiveValue] = useState(value || defaultValue || '');\n\n    useEffect(() => {\n      if (value !== undefined) {\n        setActiveValue(value);\n      }\n    }, [value]);\n\n    const handleValueChange = useCallback(\n      (newValue: string) => {\n        if (value === undefined) {\n          setActiveValue(newValue);\n        }\n        onValueChange?.(newValue);\n      },\n      [onValueChange, value],\n    );\n\n    return (\n      <div ref={ref} className={cn('tabs-container', className)} {...props}>\n        {React.Children.map(children, (child) => {\n          if (!React.isValidElement(child)) return child;\n\n          return React.cloneElement(child as React.ReactElement<{\n            activeValue?: string;\n            onValueChange?: (value: string) => void;\n            className?: string;\n            children?: ReactNode;\n            [key: string]: any;\n          }>, {\n            activeValue,\n            onValueChange: handleValueChange,\n          });\n        })}\n      </div>\n    );\n  },\n);\nTabs.displayName = 'Tabs';\n\n// TabsList component\nconst TabsList = forwardRef<\n  HTMLDivElement,\n  {\n    className?: string;\n    activeValue?: string;\n    onValueChange?: (value: string) => void;\n    children?: ReactNode;\n    showHoverEffect?: boolean;\n    showActiveIndicator?: boolean;\n    activeIndicatorPosition?: 'top' | 'bottom';\n    size?: 'sm' | 'md' | 'lg';\n    variant?: 'default' | 'pills' | 'underlined';\n    stretch?: boolean;\n    ariaLabel?: string;\n    showBottomBorder?: boolean;\n    bottomBorderClassName?: string;\n    activeIndicatorClassName?: string;\n    hoverIndicatorClassName?: string;\n  }\n>(\n  (\n    {\n      className,\n      activeValue,\n      onValueChange,\n      children,\n      showHoverEffect = true,\n      showActiveIndicator = true,\n      activeIndicatorPosition = 'bottom',\n      size = 'md',\n      variant = 'default',\n      stretch = false,\n      ariaLabel = 'Tabs',\n      showBottomBorder = false,\n      bottomBorderClassName,\n      activeIndicatorClassName,\n      hoverIndicatorClassName,\n      ...props\n    },\n    ref,\n  ) => {\n    const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n    const [hoverStyle, setHoverStyle] = useState({});\n    const [activeStyle, setActiveStyle] = useState({\n      left: '0px',\n      width: '0px',\n    });\n    const tabRefs = useRef<(HTMLDivElement | null)[]>([]);\n    const scrollContainerRef = useRef<HTMLDivElement | null>(null);\n\n    // Find active tab index based on value\n    const activeIndex = React.Children.toArray(children).findIndex(\n      (child) =>\n        React.isValidElement(child) &&\n        (child as React.ReactElement<{ value: string }>).props.value === activeValue,\n    );\n\n    // Update hover indicator position\n    useEffect(() => {\n      if (hoveredIndex !== null && showHoverEffect) {\n        const hoveredElement = tabRefs.current[hoveredIndex];\n        if (hoveredElement) {\n          const { offsetLeft, offsetWidth } = hoveredElement;\n          setHoverStyle({\n            left: `${offsetLeft}px`,\n            width: `${offsetWidth}px`,\n          });\n        }\n      }\n    }, [hoveredIndex, showHoverEffect]);\n\n    // Update active indicator position\n    const updateActiveIndicator = useCallback(() => {\n      if (showActiveIndicator && activeIndex >= 0) {\n        const activeElement = tabRefs.current[activeIndex];\n        if (activeElement) {\n          const { offsetLeft, offsetWidth } = activeElement;\n          setActiveStyle({\n            left: `${offsetLeft}px`,\n            width: `${offsetWidth}px`,\n          });\n        }\n      }\n    }, [activeIndex, showActiveIndicator]);\n\n    // Update active indicator on active tab change\n    useEffect(() => {\n      updateActiveIndicator();\n    }, [activeIndex, updateActiveIndicator]);\n\n    // Initialize active indicator position\n    useEffect(() => {\n      requestAnimationFrame(updateActiveIndicator);\n    }, [updateActiveIndicator]);\n\n    // Function to scroll tab to center\n    const scrollTabToCenter = (index: number) => {\n      const tabElement = tabRefs.current[index];\n      const scrollContainer = scrollContainerRef.current;\n\n      if (tabElement && scrollContainer) {\n        const containerWidth = scrollContainer.offsetWidth;\n        const tabWidth = tabElement.offsetWidth;\n        const tabLeft = tabElement.offsetLeft;\n\n        // Calculate position to center the tab\n        const scrollTarget = tabLeft - containerWidth / 2 + tabWidth / 2;\n\n        // Smooth scroll to the target position\n        scrollContainer.scrollTo({\n          left: scrollTarget,\n          behavior: 'smooth',\n        });\n      }\n    };\n\n    // Size classes\n    const sizeClasses = {\n      sm: 'h-[24px] text-xs',\n      md: 'h-[30px] text-sm',\n      lg: 'h-[36px] text-base',\n    };\n\n    // Variant classes\n    const variantClasses = {\n      default: '',\n      pills: 'rounded-full',\n      underlined: '',\n    };\n\n    // Active indicator classes\n    const activeIndicatorClasses = {\n      default: 'h-[4px] bg-foreground dark:bg-white',\n      pills: 'hidden',\n      underlined: 'h-[4px] bg-foreground dark:bg-white',\n    };\n\n    // Hover indicator classes\n    const hoverIndicatorClasses = {\n      default: 'bg-[#0e0f1114] dark:bg-[#ffffff1a] rounded-[6px]',\n      pills: 'bg-[#0e0f1114] dark:bg-[#ffffff1a] rounded-full',\n      underlined: 'bg-[#0e0f1114] dark:bg-[#ffffff1a] rounded-[6px]',\n    };\n\n    // Create a proper ref callback function\n    const setTabRef = useCallback(\n      (el: HTMLDivElement | null, index: number) => {\n        tabRefs.current[index] = el;\n      },\n      [],\n    );\n\n    // Save a reference to the scroll container when it's mounted\n    const handleScrollableRef = useCallback((node: HTMLDivElement | null) => {\n      if (node) {\n        // Find the actual scrollable div inside XScrollable\n        const scrollableDiv = node.querySelector(\n          'div[class*=\"overflow-x-auto\"]',\n        );\n        if (scrollableDiv) {\n          scrollContainerRef.current = scrollableDiv as HTMLDivElement;\n        }\n      }\n    }, []);\n\n    // Center the active tab on initial render\n    useEffect(() => {\n      if (activeIndex >= 0) {\n        // Use a small timeout to ensure the tabs are properly rendered\n        const timer = setTimeout(() => {\n          scrollTabToCenter(activeIndex);\n        }, 100);\n\n        return () => clearTimeout(timer);\n      }\n    }, [activeIndex]);\n\n    return (\n      <div\n        ref={handleScrollableRef}\n        className={cn('relative', className)}\n        role=\"tablist\"\n        aria-label={ariaLabel}\n        {...props}\n      >\n        <XScrollable showScrollbar={false}>\n          <div className={cn('relative', showBottomBorder && 'pb-px')}>\n            {/* Bottom border for the entire tab list */}\n            {showBottomBorder && (\n              <div\n                className={cn(\n                  'absolute bottom-0 left-0 right-0 h-px bg-border dark:bg-border',\n                  bottomBorderClassName,\n                )}\n              />\n            )}\n\n            {/* Hover Indicator */}\n            {showHoverEffect && (\n              <div\n                className={cn(\n                  'absolute transition-all duration-300 ease-out flex items-center z-0',\n                  sizeClasses[size],\n                  hoverIndicatorClasses[variant],\n                  hoverIndicatorClassName,\n                )}\n                style={{\n                  ...hoverStyle,\n                  opacity: hoveredIndex !== null ? 1 : 0,\n                }}\n                aria-hidden=\"true\"\n              />\n            )}\n\n            {/* Tabs */}\n            <div\n              ref={ref}\n              className={cn(\n                'relative flex items-center',\n                stretch ? 'w-full' : '',\n                variant === 'default' ? 'space-x-[6px]' : 'space-x-[2px]',\n              )}\n            >\n              {React.Children.map(children, (child, index) => {\n                if (!React.isValidElement(child)) return child;\n\n                const props = (child as React.ReactElement<{\n                  value: string;\n                  disabled?: boolean;\n                  label?: string;\n                  className?: string;\n                  activeClassName?: string;\n                  inactiveClassName?: string;\n                  disabledClassName?: string;\n                }>).props;\n\n                const { value, disabled, label } = props;\n                const isActive = value === activeValue;\n\n                return (\n                  <div\n                    key={value}\n                    ref={(el) => setTabRef(el, index)}\n                    className={cn(\n                      'px-3 py-2 sm:mb-1.5 mb-2 cursor-pointer transition-colors duration-300',\n                      sizeClasses[size],\n                      variant === 'pills' && isActive\n                        ? 'bg-[#0e0f1114] dark:bg-[#ffffff1a] rounded-full'\n                        : '',\n                      disabled ? 'opacity-50 cursor-not-allowed' : '',\n                      stretch ? 'flex-1 text-center' : '',\n                      isActive\n                        ? cn(\n                            'text-foreground dark:text-white',\n                            props.activeClassName,\n                          )\n                        : cn(\n                            'text-[#0e0f1199] dark:text-[#ffffff99]',\n                            props.inactiveClassName,\n                          ),\n                      disabled && props.disabledClassName,\n                      variantClasses[variant],\n                      props.className,\n                    )}\n                    onMouseEnter={() => !disabled && setHoveredIndex(index)}\n                    onMouseLeave={() => setHoveredIndex(null)}\n                    onClick={() => {\n                      if (!disabled) {\n                        onValueChange?.(value);\n                        scrollTabToCenter(index);\n                      }\n                    }}\n                    role=\"tab\"\n                    aria-selected={isActive}\n                    aria-disabled={disabled}\n                    aria-controls={`tabpanel-${value}`}\n                    id={`tab-${value}`}\n                    tabIndex={isActive ? 0 : -1}\n                  >\n                    <div className=\"whitespace-nowrap flex items-center justify-center h-full\">\n                      {child}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            {/* Active Indicator */}\n            {showActiveIndicator && variant !== 'pills' && activeIndex >= 0 && (\n              <div\n                className={cn(\n                  'absolute transition-all duration-300 ease-out z-10',\n                  activeIndicatorClasses[variant],\n                  activeIndicatorPosition === 'top'\n                    ? 'top-[-1px]'\n                    : 'bottom-[-1px]',\n                  activeIndicatorClassName,\n                )}\n                style={activeStyle}\n                aria-hidden=\"true\"\n              />\n            )}\n          </div>\n        </XScrollable>\n      </div>\n    );\n  },\n);\nTabsList.displayName = 'TabsList';\n\n// TabsTrigger component\nconst TabsTrigger = forwardRef<\n  HTMLDivElement,\n  {\n    value: string;\n    disabled?: boolean;\n    label?: string;\n    className?: string;\n    activeClassName?: string;\n    inactiveClassName?: string;\n    disabledClassName?: string;\n    activeValue?: string;\n    onValueChange?: (value: string) => void;\n    children?: ReactNode;\n  }\n>(\n  (\n    {\n      value,\n      disabled = false,\n      label,\n      className,\n      activeClassName,\n      inactiveClassName,\n      disabledClassName,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    return (\n      <div ref={ref} className={className} {...props}>\n        {label || children}\n      </div>\n    );\n  },\n);\n\nTabsTrigger.displayName = 'TabsTrigger';\n\n// TabsContent component\nconst TabsContent = forwardRef<\n  HTMLDivElement,\n  {\n    value: string;\n    className?: string;\n    activeValue?: string;\n    onValueChange?: (value: string) => void;\n    children: ReactNode;\n  }\n>(\n  (\n    {\n      value,\n      className,\n      activeValue,\n      onValueChange, // Destructure this prop to prevent it from being passed to the div\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    if (value !== activeValue) return null;\n\n    return (\n      <div\n        ref={ref}\n        role=\"tabpanel\"\n        id={`tabpanel-${value}`}\n        aria-labelledby={`tab-${value}`}\n        className={className}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  },\n);\nTabsContent.displayName = 'TabsContent';\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };\n",
      "type": "registry:component",
      "target": "delta/components/tabs.tsx"
    },
    {
      "path": "delta/components/tabs-demo.tsx",
      "content": "'use client';\n\nimport { useState } from 'react';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from './tabs';\n\nexport default function TabsDemo() {\n  return (\n    <div className=\"container mx-auto max-w-7xl px-4 py-8 space-y-12\">\n      <UnderlinedTabsDemo />\n      <NotUnderlinedTabsDemo />\n      <PillsTabsDemo />\n      <CustomPillsTabsDemo />\n    </div>\n  );\n}\n\nexport function UnderlinedTabsDemo() {\n  const tabs = [\n    { id: 'account', label: 'Account' },\n    { id: 'password', label: 'Password' },\n    { id: 'notifications', label: 'Notifications' },\n    { id: 'rewards', label: 'Rewards' },\n    { id: 'insights', label: 'Insights' },\n    { id: 'billing', label: 'Billing', disabled: true },\n  ];\n\n  return (\n    <div>\n      <h2 className=\"text-lg font-medium mb-4\">Underlined Tabs</h2>\n      <Tabs defaultValue=\"account\">\n        <TabsList showBottomBorder={true} variant=\"underlined\">\n          {tabs.map((tab) => (\n            <TabsTrigger key={tab.id} value={tab.id} disabled={tab.disabled}>\n              {tab.label}\n            </TabsTrigger>\n          ))}\n        </TabsList>\n\n        <TabsContent value=\"account\" className=\"mt-6 p-4\">\n          <h3 className=\"font-medium\">Account Settings</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage your account settings and preferences.\n          </p>\n        </TabsContent>\n        <TabsContent value=\"password\" className=\"mt-6 p-4\">\n          <h3 className=\"font-medium\">Password Settings</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Update your password and security preferences.\n          </p>\n        </TabsContent>\n        <TabsContent value=\"notifications\" className=\"mt-6 p-4\">\n          <h3 className=\"font-medium\">Notification Preferences</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Control when and how you receive notifications.\n          </p>\n        </TabsContent>\n        <TabsContent value=\"rewards\" className=\"mt-6 p-4\">\n          <h3 className=\"font-medium\">Rewards Program</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            View your rewards and redeem points.\n          </p>\n        </TabsContent>\n        <TabsContent value=\"insights\" className=\"mt-6 p-4\">\n          <h3 className=\"font-medium\">Usage Insights</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            View analytics and insights about your account usage.\n          </p>\n        </TabsContent>\n        <TabsContent value=\"billing\" className=\"mt-6 p-4\">\n          <h3 className=\"font-medium\">Billing Information</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage your billing information and subscription.\n          </p>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nexport function NotUnderlinedTabsDemo() {\n  const tabs = [\n    { id: 'account', label: 'Account' },\n    { id: 'password', label: 'Password' },\n    { id: 'notifications', label: 'Notifications' },\n    { id: 'rewards', label: 'Rewards' },\n    { id: 'insights', label: 'Insights' },\n    { id: 'billing', label: 'Billing', disabled: true },\n  ];\n\n  return (\n    <div>\n      <h2 className=\"text-lg font-medium mb-4\">Not Underlined Tabs</h2>\n      <Tabs defaultValue=\"account\">\n        <TabsList showBottomBorder={false}>\n          {tabs.map((tab) => (\n            <TabsTrigger key={tab.id} value={tab.id} disabled={tab.disabled}>\n              {tab.label}\n            </TabsTrigger>\n          ))}\n        </TabsList>\n\n        <TabsContent value=\"account\" className=\"mt-6 p-4\">\n          <h3 className=\"font-medium\">Account Settings</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage your account settings and preferences.\n          </p>\n        </TabsContent>\n        <TabsContent value=\"password\" className=\"mt-6 p-4\">\n          <h3 className=\"font-medium\">Password Settings</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Update your password and security preferences.\n          </p>\n        </TabsContent>\n        <TabsContent value=\"notifications\" className=\"mt-6 p-4\">\n          <h3 className=\"font-medium\">Notification Preferences</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Control when and how you receive notifications.\n          </p>\n        </TabsContent>\n        <TabsContent value=\"rewards\" className=\"mt-6 p-4\">\n          <h3 className=\"font-medium\">Rewards Program</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            View your rewards and redeem points.\n          </p>\n        </TabsContent>\n        <TabsContent value=\"insights\" className=\"mt-6 p-4\">\n          <h3 className=\"font-medium\">Usage Insights</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            View analytics and insights about your account usage.\n          </p>\n        </TabsContent>\n        <TabsContent value=\"billing\" className=\"mt-6 p-4\">\n          <h3 className=\"font-medium\">Billing Information</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage your billing information and subscription.\n          </p>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nexport function PillsTabsDemo() {\n  const tabs = [\n    { id: 'account', label: 'Account' },\n    { id: 'password', label: 'Password' },\n    { id: 'notifications', label: 'Notifications' },\n    { id: 'rewards', label: 'Rewards' },\n    { id: 'insights', label: 'Insights' },\n    { id: 'billing', label: 'Billing', disabled: true },\n  ];\n\n  return (\n    <div>\n      <h2 className=\"text-lg font-medium mb-4\">Pills Tabs</h2>\n      <Tabs defaultValue=\"account\">\n        <TabsList\n          variant=\"pills\"\n          showHoverEffect={true}\n          showActiveIndicator={false}\n          size=\"md\"\n        >\n          {tabs.map((tab) => (\n            <TabsTrigger key={tab.id} value={tab.id} disabled={tab.disabled}>\n              {tab.label}\n            </TabsTrigger>\n          ))}\n        </TabsList>\n\n        <TabsContent value=\"account\" className=\"mt-6 p-4 bg-card\">\n          <h3 className=\"font-medium\">Account Settings</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage your account settings and preferences.\n          </p>\n        </TabsContent>\n        <TabsContent value=\"password\" className=\"mt-6 p-4 bg-card\">\n          <h3 className=\"font-medium\">Password Settings</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Update your password and security preferences.\n          </p>\n        </TabsContent>\n        <TabsContent value=\"notifications\" className=\"mt-6 p-4 bg-card\">\n          <h3 className=\"font-medium\">Notification Preferences</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Control when and how you receive notifications.\n          </p>\n        </TabsContent>\n        <TabsContent value=\"rewards\" className=\"mt-6 p-4 bg-card\">\n          <h3 className=\"font-medium\">Rewards Program</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            View your rewards and redeem points.\n          </p>\n        </TabsContent>\n        <TabsContent value=\"insights\" className=\"mt-6 p-4 bg-card\">\n          <h3 className=\"font-medium\">Usage Insights</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            View analytics and insights about your account usage.\n          </p>\n        </TabsContent>\n        <TabsContent value=\"billing\" className=\"mt-6 p-4 bg-card\">\n          <h3 className=\"font-medium\">Billing Information</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage your billing information and subscription.\n          </p>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nexport function CustomPillsTabsDemo() {\n  const tabs = [\n    { id: 'discover', label: 'Discover' },\n    { id: 'podcasts', label: 'Podcasts' },\n    { id: 'artists', label: 'Artists' },\n    { id: 'albums', label: 'Albums' },\n    { id: 'playlists', label: 'Playlists' },\n  ];\n\n  return (\n    <div>\n      <h2 className=\"text-lg font-medium mb-4\">\n        Custom Spotify-Style Pills Tabs\n      </h2>\n      <Tabs defaultValue=\"discover\">\n        <TabsList\n          variant=\"pills\"\n          showHoverEffect={true}\n          showActiveIndicator={false}\n          size=\"md\"\n        >\n          {tabs.map((tab) => (\n            <TabsTrigger\n              key={tab.id}\n              value={tab.id}\n              className=\"text-gray-700 dark:text-gray-300 font-medium\"\n              activeClassName=\"bg-[#1cd760] dark:bg-[#1cd760] text-white dark:text-black font-medium\"\n            >\n              {tab.label}\n            </TabsTrigger>\n          ))}\n        </TabsList>\n\n        <TabsContent value=\"discover\" className=\"mt-6 p-4 bg-card\">\n          <h3 className=\"font-medium\">Discover New Music</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Find new music based on your listening habits.\n          </p>\n        </TabsContent>\n        <TabsContent value=\"podcasts\" className=\"mt-6 p-4 bg-card\">\n          <h3 className=\"font-medium\">Podcasts</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Browse popular podcasts and discover new shows.\n          </p>\n        </TabsContent>\n        <TabsContent value=\"artists\" className=\"mt-6 p-4 bg-card\">\n          <h3 className=\"font-medium\">Artists</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Browse your favorite artists and discover new ones.\n          </p>\n        </TabsContent>\n        <TabsContent value=\"albums\" className=\"mt-6 p-4 bg-card\">\n          <h3 className=\"font-medium\">Albums</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Browse your favorite albums and discover new releases.\n          </p>\n        </TabsContent>\n        <TabsContent value=\"playlists\" className=\"mt-6 p-4 bg-card\">\n          <h3 className=\"font-medium\">Playlists</h3>\n          <p className=\"text-muted-foreground mt-2\">\n            Browse your playlists and discover curated collections.\n          </p>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/components/tabs-demo.tsx"
    }
  ]
}