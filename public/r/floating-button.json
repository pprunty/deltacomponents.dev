{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "floating-button",
  "type": "registry:component",
  "title": "Floating Button",
  "description": "A component for floating-button",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/ui/floating-button.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip';\n\nconst floatingButtonVariants = cva(\n  'inline-flex items-center justify-center gap-2 transition-all duration-200 rounded-full shadow-sm hover:shadow-md active:opacity-95 active:scale-95',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n        secondary:\n          'bg-secondary text-secondary-foreground hover:bg-secondary/90',\n        outline:\n          'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        destructive:\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n      },\n      size: {\n        sm: 'text-xs',\n        default: 'text-sm',\n        lg: 'text-base',\n      },\n      shape: {\n        default: '',\n        circle: 'aspect-square',\n      },\n    },\n    compoundVariants: [\n      {\n        shape: 'default',\n        size: 'sm',\n        class: 'h-10 px-3 py-1.5',\n      },\n      {\n        shape: 'default',\n        size: 'default',\n        class: 'h-12 px-4 py-2',\n      },\n      {\n        shape: 'default',\n        size: 'lg',\n        class: 'h-16 px-5 py-2.5',\n      },\n      {\n        shape: 'circle',\n        size: 'sm',\n        class: 'h-8 w-8 p-0',\n      },\n      {\n        shape: 'circle',\n        size: 'default',\n        class: 'h-10 w-10 p-0',\n      },\n      {\n        shape: 'circle',\n        size: 'lg',\n        class: 'h-12 w-12 p-0',\n      },\n    ],\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n      shape: 'default',\n    },\n  },\n);\n\nexport type Position =\n  | 'top-left'\n  | 'top-right'\n  | 'bottom-left'\n  | 'bottom-right'\n  | 'bottom-center';\n\n// Define the offset type for reuse\nexport type OffsetValue = number | { x?: number; y?: number };\n\nexport interface FloatingButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof floatingButtonVariants> {\n  icon: React.ElementType;\n  text?: string;\n  iconProps?: React.ComponentPropsWithoutRef<'svg'>;\n  tooltip?: string;\n  tooltipSide?: 'top' | 'right' | 'bottom' | 'left';\n  tooltipAlign?: 'start' | 'center' | 'end';\n  hideOnMobile?: boolean;\n  position?: 'fixed' | 'absolute' | 'static';\n  placement?: Position;\n  mobilePosition?: Position;\n  desktopPosition?: Position;\n  offset?: OffsetValue;\n  mobileOffset?: OffsetValue;\n  desktopOffset?: OffsetValue;\n  zIndex?: number;\n}\n\nconst FloatingButton = React.forwardRef<HTMLButtonElement, FloatingButtonProps>(\n  (\n    {\n      className,\n      icon: Icon,\n      text,\n      variant = 'default',\n      size = 'default',\n      shape = 'default',\n      iconProps,\n      tooltip,\n      tooltipSide = 'top',\n      tooltipAlign = 'center',\n      hideOnMobile = false,\n      position = 'fixed',\n      placement = 'bottom-right',\n      offset = 16,\n      mobileOffset,\n      desktopOffset,\n      zIndex = 100,\n      mobilePosition,\n      desktopPosition,\n      ...props\n    },\n    ref,\n  ) => {\n    const [isMobile, setIsMobile] = React.useState(false);\n\n    React.useEffect(() => {\n      const checkMobile = () => {\n        setIsMobile(window.innerWidth < 768);\n      };\n\n      checkMobile();\n      window.addEventListener('resize', checkMobile);\n\n      return () => {\n        window.removeEventListener('resize', checkMobile);\n      };\n    }, []);\n\n    // Determine effective offset based on screen size\n    const effectiveOffset = React.useMemo(() => {\n      if (isMobile && mobileOffset !== undefined) {\n        return mobileOffset;\n      }\n      if (!isMobile && desktopOffset !== undefined) {\n        return desktopOffset;\n      }\n      return offset;\n    }, [isMobile, mobileOffset, desktopOffset, offset]);\n\n    // Calculate offset values\n    const offsetX =\n      typeof effectiveOffset === 'object'\n        ? (effectiveOffset.x ?? 16)\n        : effectiveOffset;\n    const offsetY =\n      typeof effectiveOffset === 'object'\n        ? (effectiveOffset.y ?? 16)\n        : effectiveOffset;\n\n    // Determine effective placement based on screen size\n    const effectivePlacement = React.useMemo(() => {\n      if (isMobile && mobilePosition) {\n        return mobilePosition;\n      }\n      if (!isMobile && desktopPosition) {\n        return desktopPosition;\n      }\n      return placement;\n    }, [isMobile, mobilePosition, desktopPosition, placement]);\n\n    // Generate position styles based on props\n    const positionStyles = React.useMemo(() => {\n      if (position === 'static') return {};\n\n      const styles: React.CSSProperties = {\n        position,\n        zIndex,\n      };\n\n      switch (effectivePlacement) {\n        case 'top-left':\n          styles.top = offsetY;\n          styles.left = offsetX;\n          break;\n        case 'top-right':\n          styles.top = offsetY;\n          styles.right = offsetX;\n          break;\n        case 'bottom-left':\n          styles.bottom = offsetY;\n          styles.left = offsetX;\n          break;\n        case 'bottom-right':\n          styles.bottom = offsetY;\n          styles.right = offsetX;\n          break;\n        case 'bottom-center':\n          styles.bottom = offsetY;\n          styles.left = '50%';\n          styles.transform = 'translateX(-50%)';\n          break;\n        default:\n          styles.bottom = offsetY;\n          styles.right = offsetX;\n      }\n\n      return styles;\n    }, [position, effectivePlacement, offsetX, offsetY, zIndex]);\n\n    // If hideOnMobile is true and we're on mobile, don't render the button\n    if (hideOnMobile && isMobile) {\n      return null;\n    }\n\n    // Default icon size based on button size\n    const iconSize = size === 'sm' ? 16 : size === 'default' ? 20 : 24;\n\n    // Default icon props\n    const defaultIconProps = {\n      size: iconSize,\n      'aria-hidden': true,\n      ...iconProps,\n    };\n\n    const button = (\n      <button\n        ref={ref}\n        className={cn(\n          floatingButtonVariants({ variant, size, shape, className }),\n        )}\n        style={positionStyles}\n        {...props}\n      >\n        <Icon {...defaultIconProps} />\n        {text && shape !== 'circle' && (\n          <span className=\"font-medium\">{text}</span>\n        )}\n      </button>\n    );\n\n    // Apply tooltip if needed\n    if (tooltip) {\n      return (\n        <TooltipProvider>\n          <Tooltip delayDuration={300}>\n            <TooltipTrigger asChild>{button}</TooltipTrigger>\n            <TooltipContent side={tooltipSide} align={tooltipAlign}>\n              {tooltip}\n            </TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n      );\n    }\n\n    return button;\n  },\n);\n\nFloatingButton.displayName = 'FloatingButton';\n\nexport default { FloatingButton, floatingButtonVariants };",
      "type": "registry:component",
      "target": "registry/ui/floating-button.tsx"
    },
    {
      "path": "registry/examples/floating-button-basic-demo.tsx",
      "content": "\"use client\"\n\nimport { Plus } from \"lucide-react\"\nimport FloatingButton from \"@/registry/ui/floating-button\"\n\nexport default function FloatingButtonBasicDemo() {\n  return (\n    <div className=\"flex items-center justify-center p-8 border rounded-lg relative h-48\">\n      <FloatingButton.FloatingButton\n        icon={Plus}\n        text=\"Add Item\"\n        position=\"absolute\"\n        placement=\"bottom-right\"\n        offset={16}\n      />\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "registry/examples/floating-button-basic-demo.tsx"
    },
    {
      "path": "content/docs/floating-button.mdx",
      "content": "export const metadata = {\n  title: 'FloatingButton | Delta Components',\n  description: 'A versatile floating button component with customizable position, tooltip support, and responsive behavior.',\n\n  // Keywords help with SEO\n  keywords: ['shadcn/ui', 'react', 'floating button', 'action button', 'fab', 'ui components', 'react components', 'delta components', 'nextjs components', 'tailwind components'],\n\n  // Canonical URL to prevent duplicate content issues\n  alternates: {\n    canonical: 'https://deltacomponents.dev/docs/floating-button',\n  },\n\n  // Category helps with structured data\n  category: 'component',\n\n  openGraph: {\n    title: 'FloatingButton Component | Delta Components',\n    description: 'A versatile floating button component with customizable position, tooltip support, and responsive behavior.',\n    type: 'article',\n    url: 'https://deltacomponents.dev/docs/floating-button',\n    images: [\n      {\n        url: 'https://deltacomponents.dev/og/floating-button.png',\n        width: 1200,\n        height: 630,\n        alt: 'FloatingButton Component Preview showing a floating action button with various positioning options'\n      }\n    ],\n    // Article specific OpenGraph metadata\n    article: {\n      authors: ['Patrick Prunty'],\n      tags: ['UI Components', 'React', 'Shadcn', 'Floating Button', 'FAB', 'Design'],\n      section: 'Components'\n    },\n    siteName: 'Delta Components'\n  },\n\n  twitter: {\n    card: 'summary_large_image',\n    title: 'FloatingButton Component | Delta Components',\n    description: 'A versatile floating button component with customizable position, tooltip support, and responsive behavior.',\n    images: ['https://deltacomponents.dev/og/floating-button.png'],\n    creator: '@pprunty_',\n    site: '@deltacomponents'\n  },\n\n  // Additional metadata for better SEO\n  robots: {\n    index: true,\n    follow: true,\n    nocache: false,\n    googleBot: {\n      index: true,\n      follow: true,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n      'max-video-preview': -1\n    }\n  }\n}\n\n# FloatingButton\n\nA versatile floating button component with customizable position, tooltip support, and responsive behavior. Perfect for primary actions like creating new items or navigating back to top.\n\n## Basic Usage\n\n<ComponentTabs name=\"floating-button-basic\" />\n\n## Installation\n\n```bash\nnpx shadcn@latest add \"floating-button\"\n```\n\n## Props\n\n<div className=\"my-6 w-full overflow-y-auto\">\n  <table className=\"w-full\">\n    <thead>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <th className=\"border px-4 py-2 text-left font-bold\">Prop</th>\n        <th className=\"border px-4 py-2 text-left font-bold\">Type</th>\n        <th className=\"border px-4 py-2 text-left font-bold\">Default</th>\n        <th className=\"border px-4 py-2 text-left font-bold\">Description</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`icon`</td>\n        <td className=\"border px-4 py-2 text-left\">`React.ElementType`</td>\n        <td className=\"border px-4 py-2 text-left\">-</td>\n        <td className=\"border px-4 py-2 text-left\">The icon component to render inside the button</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`text`</td>\n        <td className=\"border px-4 py-2 text-left\">`string`</td>\n        <td className=\"border px-4 py-2 text-left\">-</td>\n        <td className=\"border px-4 py-2 text-left\">Optional text to display next to the icon</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`variant`</td>\n        <td className=\"border px-4 py-2 text-left\">`'default' | 'secondary' | 'outline' | 'ghost' | 'destructive'`</td>\n        <td className=\"border px-4 py-2 text-left\">`'default'`</td>\n        <td className=\"border px-4 py-2 text-left\">The visual style variant of the button</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`size`</td>\n        <td className=\"border px-4 py-2 text-left\">`'sm' | 'default' | 'lg'`</td>\n        <td className=\"border px-4 py-2 text-left\">`'default'`</td>\n        <td className=\"border px-4 py-2 text-left\">The size of the button</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`shape`</td>\n        <td className=\"border px-4 py-2 text-left\">`'default' | 'circle'`</td>\n        <td className=\"border px-4 py-2 text-left\">`'default'`</td>\n        <td className=\"border px-4 py-2 text-left\">The shape of the button</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`tooltip`</td>\n        <td className=\"border px-4 py-2 text-left\">`string`</td>\n        <td className=\"border px-4 py-2 text-left\">-</td>\n        <td className=\"border px-4 py-2 text-left\">Optional tooltip text to display on hover</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`tooltipSide`</td>\n        <td className=\"border px-4 py-2 text-left\">`'top' | 'right' | 'bottom' | 'left'`</td>\n        <td className=\"border px-4 py-2 text-left\">`'top'`</td>\n        <td className=\"border px-4 py-2 text-left\">The side of the button where the tooltip appears</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`position`</td>\n        <td className=\"border px-4 py-2 text-left\">`'fixed' | 'absolute' | 'static'`</td>\n        <td className=\"border px-4 py-2 text-left\">`'fixed'`</td>\n        <td className=\"border px-4 py-2 text-left\">CSS position property</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`placement`</td>\n        <td className=\"border px-4 py-2 text-left\">`'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'bottom-center'`</td>\n        <td className=\"border px-4 py-2 text-left\">`'bottom-right'`</td>\n        <td className=\"border px-4 py-2 text-left\">The placement of the button</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`offset`</td>\n        <td className=\"border px-4 py-2 text-left\">`number | { x?: number; y?: number }`</td>\n        <td className=\"border px-4 py-2 text-left\">`16`</td>\n        <td className=\"border px-4 py-2 text-left\">Distance from the edge of the container</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`hideOnMobile`</td>\n        <td className=\"border px-4 py-2 text-left\">`boolean`</td>\n        <td className=\"border px-4 py-2 text-left\">`false`</td>\n        <td className=\"border px-4 py-2 text-left\">Whether to hide the button on mobile screens</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n## Examples\n\n### Basic Floating Button with Icon Only\n\n```tsx\nimport { Plus } from \"lucide-react\"\nimport { FloatingButton } from \"@/components/ui/floating-button\"\n\nexport default function BasicExample() {\n  return (\n    <FloatingButton.FloatingButton\n      icon={Plus}\n      shape=\"circle\"\n      tooltip=\"Add New Item\"\n    />\n  )\n}\n```\n\n### Floating Button with Text and Icon\n\n```tsx\nimport { ArrowUp } from \"lucide-react\"\nimport { FloatingButton } from \"@/components/ui/floating-button\"\n\nexport default function TextExample() {\n  return (\n    <FloatingButton.FloatingButton\n      icon={ArrowUp}\n      text=\"Back to Top\"\n      placement=\"bottom-center\"\n    />\n  )\n}\n```\n\n### Different Variants and Sizes\n\n```tsx\nimport { Heart, Send, Trash } from \"lucide-react\"\nimport { FloatingButton } from \"@/components/ui/floating-button\"\n\nexport default function VariantsExample() {\n  return (\n    <div className=\"space-y-4\">\n      <FloatingButton.FloatingButton\n        icon={Heart}\n        variant=\"secondary\"\n        size=\"sm\"\n        position=\"static\"\n      />\n      \n      <FloatingButton.FloatingButton\n        icon={Send}\n        variant=\"outline\"\n        position=\"static\"\n      />\n      \n      <FloatingButton.FloatingButton\n        icon={Trash}\n        variant=\"destructive\"\n        size=\"lg\"\n        position=\"static\"\n      />\n    </div>\n  )\n}\n```\n\n### Responsive Positioning\n\n```tsx\nimport { Plus } from \"lucide-react\"\nimport { FloatingButton } from \"@/components/ui/floating-button\"\n\nexport default function ResponsiveExample() {\n  return (\n    <FloatingButton.FloatingButton\n      icon={Plus}\n      text=\"Add Item\"\n      mobilePosition=\"bottom-center\"\n      desktopPosition=\"bottom-right\"\n      mobileOffset={8}\n      desktopOffset={16}\n    />\n  )\n}\n```\n\n## Accessibility\n\nThe FloatingButton component is designed with accessibility in mind:\n\n- Includes proper ARIA attributes\n- Supports keyboard navigation\n- Tooltips improve discoverability for icon-only buttons\n- Text alternatives can be provided for screen readers\n\nWhen using icon-only FloatingButtons, it's recommended to include a tooltip or aria-label to describe the action for assistive technology users.\n",
      "type": "registry:component",
      "target": "content/docs/floating-button.mdx"
    }
  ]
}