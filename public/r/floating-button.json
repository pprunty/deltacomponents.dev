{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "floating-button",
  "type": "registry:component",
  "title": "Floating Button",
  "description": "A component for floating-button",
  "dependencies": [],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "delta/components/floating-button.tsx",
      "content": "\"use client\";\n\nimport * as React from 'react';\nimport { cn } from '@/lib/utils';\n\nexport type Position =\n  | 'top-left'\n  | 'top-right'\n  | 'bottom-left'\n  | 'bottom-right'\n  | 'bottom-center';\n\n// Define the offset type for reuse\nexport type OffsetValue = number | { x?: number; y?: number };\n\nexport interface FloatProps {\n  children: React.ReactNode;\n  tooltip?: string;\n  tooltipSide?: 'top' | 'right' | 'bottom' | 'left';\n  tooltipAlign?: 'start' | 'center' | 'end';\n  onlyDesktop?: boolean;\n  onlyMobile?: boolean;\n  position?: 'fixed' | 'absolute' | 'static';\n  placement?: Position;\n  mobilePosition?: Position;\n  desktopPosition?: Position;\n  offset?: OffsetValue;\n  mobileOffset?: OffsetValue;\n  desktopOffset?: OffsetValue;\n  zIndex?: number;\n  opaqueOnScroll?: boolean;\n  className?: string;\n}\n\nconst Float = React.forwardRef<HTMLDivElement, FloatProps>(\n  (\n    {\n      children,\n      tooltip,\n      tooltipSide = 'top',\n      tooltipAlign = 'center',\n      onlyDesktop = false,\n      onlyMobile = false,\n      position = 'fixed',\n      placement = 'bottom-right',\n      offset = 16,\n      mobileOffset,\n      desktopOffset,\n      zIndex = 100,\n      mobilePosition,\n      desktopPosition,\n      opaqueOnScroll = false,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const [isMobile, setIsMobile] = React.useState(false);\n    const [isOpaque, setIsOpaque] = React.useState(false);\n\n    React.useEffect(() => {\n      const checkMobile = () => {\n        setIsMobile(window.innerWidth < 768);\n      };\n\n      checkMobile();\n      window.addEventListener('resize', checkMobile);\n\n      return () => {\n        window.removeEventListener('resize', checkMobile);\n      };\n    }, []);\n\n    React.useEffect(() => {\n      if (!opaqueOnScroll) return;\n\n      let lastScrollY = window.scrollY;\n      let ticking = false;\n\n      const handleScroll = () => {\n        if (!ticking) {\n          window.requestAnimationFrame(() => {\n            const currentScrollY = window.scrollY;\n            const scrollDirection = currentScrollY < lastScrollY ? 'up' : 'down';\n            setIsOpaque(scrollDirection === 'down' && currentScrollY > 100);\n            lastScrollY = currentScrollY;\n            ticking = false;\n          });\n          ticking = true;\n        }\n      };\n\n      window.addEventListener('scroll', handleScroll);\n      return () => {\n        window.removeEventListener('scroll', handleScroll);\n      };\n    }, [opaqueOnScroll]);\n\n    // Determine effective offset based on screen size\n    const effectiveOffset = React.useMemo(() => {\n      if (isMobile && mobileOffset !== undefined) {\n        return mobileOffset;\n      }\n      if (!isMobile && desktopOffset !== undefined) {\n        return desktopOffset;\n      }\n      return offset;\n    }, [isMobile, mobileOffset, desktopOffset, offset]);\n\n    // Calculate offset values\n    const offsetX =\n      typeof effectiveOffset === 'object'\n        ? (effectiveOffset.x ?? 16)\n        : effectiveOffset;\n    const offsetY =\n      typeof effectiveOffset === 'object'\n        ? (effectiveOffset.y ?? 16)\n        : effectiveOffset;\n\n    // Determine effective placement based on screen size\n    const effectivePlacement = React.useMemo(() => {\n      if (isMobile && mobilePosition) {\n        return mobilePosition;\n      }\n      if (!isMobile && desktopPosition) {\n        return desktopPosition;\n      }\n      return placement;\n    }, [isMobile, mobilePosition, desktopPosition, placement]);\n\n    // Generate position styles based on props\n    const positionStyles = React.useMemo(() => {\n      if (position === 'static') return {};\n\n      const styles: React.CSSProperties = {\n        position,\n        zIndex,\n        transition: 'opacity 0.3s ease-in-out',\n        ...(opaqueOnScroll && isOpaque ? { opacity: 0.9 } : {}),\n      };\n\n      switch (effectivePlacement) {\n        case 'top-left':\n          styles.top = offsetY;\n          styles.left = offsetX;\n          break;\n        case 'top-right':\n          styles.top = offsetY;\n          styles.right = offsetX;\n          break;\n        case 'bottom-left':\n          styles.bottom = offsetY;\n          styles.left = offsetX;\n          break;\n        case 'bottom-right':\n          styles.bottom = offsetY;\n          styles.right = offsetX;\n          break;\n        case 'bottom-center':\n          styles.bottom = offsetY;\n          styles.left = '50%';\n          styles.transform = 'translateX(-50%)';\n          break;\n        default:\n          styles.bottom = offsetY;\n          styles.right = offsetX;\n      }\n\n      return styles;\n    }, [position, effectivePlacement, offsetX, offsetY, zIndex, opaqueOnScroll, isOpaque]);\n\n    // Handle visibility based on device type\n    if ((onlyDesktop && isMobile) || (onlyMobile && !isMobile)) {\n      return null;\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'transition-opacity duration-300',\n          className\n        )}\n        style={positionStyles}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  },\n);\n\nFloat.displayName = 'Float';\n\nexport default Float;",
      "type": "registry:component",
      "target": "delta/components/floating-button.tsx"
    },
    {
      "path": "delta/examples/floating-button-basic-demo.tsx",
      "content": "\"use client\"\n\nimport { Plus } from \"lucide-react\"\nimport Float from \"@/delta/components/floating-button\"\nimport { Button } from \"@/delta/components/button\"\n\nexport default function BasicExample() {\n  return (\n    <div className=\"flex items-center justify-center p-8 border rounded-lg relative h-48\">\n      <Float\n        position=\"absolute\"\n        placement=\"bottom-right\"\n        offset={16}\n      >\n        <Button\n          variant=\"primary\"\n          size=\"sm\"\n          onClick={() => alert(\"Floating button clicked!\")}\n        >\n          <Plus size={20} />\n        </Button>\n      </Float>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "delta/examples/floating-button-basic-demo.tsx"
    },
    {
      "path": "content/docs/floating-button.mdx",
      "content": "export const metadata = {\n  title: 'Float | Delta Components',\n  description: 'A versatile positioning component that can float any content in fixed or absolute positions with responsive behavior.',\n\n  // Keywords help with SEO\n  keywords: ['shadcn/ui', 'react', 'float', 'positioning', 'ui components', 'react components', 'delta components', 'nextjs components', 'tailwind components'],\n\n  // Canonical URL to prevent duplicate content issues\n  alternates: {\n    canonical: 'https://deltacomponents.dev/docs/float',\n  },\n\n  // Category helps with structured data\n  category: 'component',\n\n  openGraph: {\n    title: 'Float Component | Delta Components',\n    description: 'A versatile positioning component that can float any content in fixed or absolute positions with responsive behavior.',\n    type: 'article',\n    url: 'https://deltacomponents.dev/docs/float',\n    images: [\n      {\n        url: 'https://deltacomponents.dev/og/float.png',\n        width: 1200,\n        height: 630,\n        alt: 'Float Component Preview showing various positioning options'\n      }\n    ],\n    // Article specific OpenGraph metadata\n    article: {\n      authors: ['Patrick Prunty'],\n      tags: ['UI Components', 'React', 'Shadcn', 'Positioning', 'Design'],\n      section: 'Components'\n    },\n    siteName: 'Delta Components'\n  },\n\n  twitter: {\n    card: 'summary_large_image',\n    title: 'Float Component | Delta Components',\n    description: 'A versatile positioning component that can float any content in fixed or absolute positions with responsive behavior.',\n    images: ['https://deltacomponents.dev/og/float.png'],\n    creator: '@pprunty_',\n    site: '@deltacomponents'\n  },\n\n  // Additional metadata for better SEO\n  robots: {\n    index: true,\n    follow: true,\n    nocache: false,\n    googleBot: {\n      index: true,\n      follow: true,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n      'max-video-preview': -1\n    }\n  }\n}\n\n# Float\n\nA versatile positioning component that can float any content in fixed or absolute positions with responsive behavior. Perfect for floating action buttons, notifications, or any other content that needs to be positioned relative to the viewport or a container.\n\n## Basic Usage\n\n<ComponentTabs name=\"floating-button-basic\" />\n\n<InstallationInstructions componentName=\"floating-button\" />\n\n## Props\n\n<Table>\n  <TableHeader>\n    <TableRow>\n      <TableHead>Prop</TableHead>\n      <TableHead>Type</TableHead>\n      <TableHead>Default</TableHead>\n      <TableHead>Description</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell>`position`</TableCell>\n      <TableCell>`'fixed' | 'absolute' | 'static'`</TableCell>\n      <TableCell>`'fixed'`</TableCell>\n      <TableCell>CSS position property</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`placement`</TableCell>\n      <TableCell>`'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'bottom-center'`</TableCell>\n      <TableCell>`'bottom-right'`</TableCell>\n      <TableCell>The placement of the content</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`offset`</TableCell>\n      <TableCell>`number | { x?: number; y?: number }`</TableCell>\n      <TableCell>`16`</TableCell>\n      <TableCell>Distance from the edge of the container</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`onlyDesktop`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether to show the content only on desktop screens</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`onlyMobile`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether to show the content only on mobile screens</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`opaqueOnScroll`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether to reduce opacity when scrolling down the page</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n\n## Examples\n\n### Basic Floating Button\n\n```tsx\nimport { Plus } from \"lucide-react\"\nimport Float from \"@/components/ui/float\"\nimport { Button } from \"@/components/ui/button\"\n\nexport default function BasicExample() {\n  return (\n    <Float\n      position=\"absolute\"\n      placement=\"bottom-right\"\n      offset={16}\n    >\n      <Button\n        variant=\"primary\"\n        size=\"sm\"\n        onClick={() => alert(\"Button clicked!\")}\n      >\n        <Plus size={20} />\n      </Button>\n    </Float>\n  )\n}\n```\n\n### Floating Notification\n\n```tsx\nimport Float from \"@/components/ui/float\"\n\nexport default function NotificationExample() {\n  return (\n    <Float\n      placement=\"top-right\"\n      offset={16}\n    >\n      <div className=\"bg-primary text-primary-foreground px-4 py-2 rounded-md shadow-lg\">\n        New message received!\n      </div>\n    </Float>\n  )\n}\n```\n\n### Responsive Positioning\n\n```tsx\nimport Float from \"@/components/ui/float\"\nimport { Button } from \"@/components/ui/button\"\n\nexport default function ResponsiveExample() {\n  return (\n    <Float\n      mobilePosition=\"bottom-center\"\n      desktopPosition=\"bottom-right\"\n      mobileOffset={8}\n      desktopOffset={16}\n    >\n      <Button variant=\"primary\">\n        Contact Us\n      </Button>\n    </Float>\n  )\n}\n```\n\n### Opacity Changes on Scroll\n\n```tsx\nimport Float from \"@/components/ui/float\"\nimport { Button } from \"@/components/ui/button\"\n\nexport default function OpaqueOnScrollExample() {\n  return (\n    <Float\n      placement=\"bottom-right\"\n      opaqueOnScroll={true}\n    >\n      <Button variant=\"primary\">\n        Back to Top\n      </Button>\n    </Float>\n  )\n}\n```\n\n## Accessibility\n\nThe Float component is designed with accessibility in mind:\n\n- Maintains proper focus management\n- Supports keyboard navigation\n- Preserves semantic structure of its children\n- Works with screen readers\n\nWhen using the Float component, ensure that the content you're floating is itself accessible. For example, when floating buttons, make sure they have proper ARIA labels and keyboard support.\n",
      "type": "registry:component",
      "target": "content/docs/floating-button.mdx"
    }
  ]
}