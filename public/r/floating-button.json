{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "floating-button",
  "type": "registry:component",
  "title": "Floating Button",
  "description": "A customizable floating button component with positioning, tooltip, and responsive behavior.",
  "dependencies": [
    "@radix-ui/react-tooltip"
  ],
  "registryDependencies": [
    "tooltip"
  ],
  "files": [
    {
      "path": "delta/components/floating-button.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\"\n\nconst floatingButtonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 transition-all duration-200 rounded-full shadow-sm hover:shadow-md active:opacity-90 active:scale-95\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/90\",\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n      },\n      size: {\n        sm: \"text-xs\",\n        default: \"text-sm\",\n        lg: \"text-base\",\n      },\n      shape: {\n        default: \"\",\n        circle: \"aspect-square\",\n      },\n    },\n    compoundVariants: [\n      {\n        shape: \"default\",\n        size: \"sm\",\n        class: \"h-10 px-3 py-1.5\",\n      },\n      {\n        shape: \"default\",\n        size: \"default\",\n        class: \"h-13 px-3 py-3\",\n      },\n      {\n        shape: \"default\",\n        size: \"lg\",\n        class: \"h-16 px-5 py-2.5\",\n      },\n      {\n        shape: \"circle\",\n        size: \"sm\",\n        class: \"h-8 w-8 p-0\",\n      },\n      {\n        shape: \"circle\",\n        size: \"default\",\n        class: \"h-10 w-10 p-0\",\n      },\n      {\n        shape: \"circle\",\n        size: \"lg\",\n        class: \"h-12 w-12 p-0\",\n      },\n    ],\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n      shape: \"default\",\n    },\n  },\n)\n\nexport type Position = \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\" | \"bottom-center\"\n\n// Define the offset type for reuse\nexport type OffsetValue = number | { x?: number; y?: number }\n\nexport interface FloatingButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof floatingButtonVariants> {\n  icon: React.ElementType\n  text?: string\n  iconProps?: React.ComponentPropsWithoutRef<\"svg\">\n  tooltip?: string\n  tooltipSide?: \"top\" | \"right\" | \"bottom\" | \"left\"\n  tooltipAlign?: \"start\" | \"center\" | \"end\"\n  hideOnMobile?: boolean\n  position?: \"fixed\" | \"absolute\" | \"static\"\n  placement?: Position\n  mobilePosition?: Position\n  desktopPosition?: Position\n  offset?: OffsetValue\n  mobileOffset?: OffsetValue\n  desktopOffset?: OffsetValue\n  zIndex?: number\n}\n\nconst FloatingButton = React.forwardRef<HTMLButtonElement, FloatingButtonProps>(\n  (\n    {\n      className,\n      icon: Icon,\n      text,\n      variant = \"default\",\n      size = \"default\",\n      shape = \"default\",\n      iconProps,\n      tooltip,\n      tooltipSide = \"top\",\n      tooltipAlign = \"center\",\n      hideOnMobile = false,\n      position = \"fixed\",\n      placement = \"bottom-right\",\n      offset = 16,\n      mobileOffset,\n      desktopOffset,\n      zIndex = 100,\n      mobilePosition,\n      desktopPosition,\n      ...props\n    },\n    ref,\n  ) => {\n    const [isMobile, setIsMobile] = React.useState(false)\n\n    React.useEffect(() => {\n      const checkMobile = () => {\n        setIsMobile(window.innerWidth < 768)\n      }\n\n      checkMobile()\n      window.addEventListener(\"resize\", checkMobile)\n\n      return () => {\n        window.removeEventListener(\"resize\", checkMobile)\n      }\n    }, [])\n\n    // Determine effective offset based on screen size\n    const effectiveOffset = React.useMemo(() => {\n      if (isMobile && mobileOffset !== undefined) {\n        return mobileOffset\n      }\n      if (!isMobile && desktopOffset !== undefined) {\n        return desktopOffset\n      }\n      return offset\n    }, [isMobile, mobileOffset, desktopOffset, offset])\n\n    // Calculate offset values\n    const offsetX = typeof effectiveOffset === \"object\" ? (effectiveOffset.x ?? 16) : effectiveOffset\n    const offsetY = typeof effectiveOffset === \"object\" ? (effectiveOffset.y ?? 16) : effectiveOffset\n\n    // Determine effective placement based on screen size\n    const effectivePlacement = React.useMemo(() => {\n      if (isMobile && mobilePosition) {\n        return mobilePosition\n      }\n      if (!isMobile && desktopPosition) {\n        return desktopPosition\n      }\n      return placement\n    }, [isMobile, mobilePosition, desktopPosition, placement])\n\n    // Generate position styles based on props\n    const positionStyles = React.useMemo(() => {\n      if (position === \"static\") return {}\n\n      const styles: React.CSSProperties = {\n        position,\n        zIndex,\n      }\n\n      switch (effectivePlacement) {\n        case \"top-left\":\n          styles.top = offsetY\n          styles.left = offsetX\n          break\n        case \"top-right\":\n          styles.top = offsetY\n          styles.right = offsetX\n          break\n        case \"bottom-left\":\n          styles.bottom = offsetY\n          styles.left = offsetX\n          break\n        case \"bottom-right\":\n          styles.bottom = offsetY\n          styles.right = offsetX\n          break\n        case \"bottom-center\":\n          styles.bottom = offsetY\n          styles.left = \"50%\"\n          styles.transform = \"translateX(-50%)\"\n          break\n        default:\n          styles.bottom = offsetY\n          styles.right = offsetX\n      }\n\n      return styles\n    }, [position, effectivePlacement, offsetX, offsetY, zIndex])\n\n    // If hideOnMobile is true and we're on mobile, don't render the button\n    if (hideOnMobile && isMobile) {\n      return null\n    }\n\n    // Default icon size based on button size\n    const iconSize = size === \"sm\" ? 16 : size === \"default\" ? 20 : 24\n\n    // Default icon props\n    const defaultIconProps = {\n      size: iconSize,\n      \"aria-hidden\": true,\n      ...iconProps,\n    }\n\n    const button = (\n      <button\n        ref={ref}\n        className={cn(floatingButtonVariants({ variant, size, shape, className }))}\n        style={positionStyles}\n        {...props}\n      >\n        <Icon {...defaultIconProps} />\n        {text && shape !== \"circle\" && <span className=\"font-semibold\">{text}</span>}\n      </button>\n    )\n\n    // Apply tooltip if needed\n    if (tooltip) {\n      return (\n        <TooltipProvider>\n          <Tooltip delayDuration={300}>\n            <TooltipTrigger asChild>{button}</TooltipTrigger>\n            <TooltipContent side={tooltipSide} align={tooltipAlign}>\n              {tooltip}\n            </TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n      )\n    }\n\n    return button\n  },\n)\n\nFloatingButton.displayName = \"FloatingButton\"\n\nexport { FloatingButton, floatingButtonVariants }",
      "type": "registry:component",
      "target": "delta/components/floating-button.tsx"
    },
    {
      "path": "delta/components/floating-button-demo.tsx",
      "content": "\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { ChatCircle, ArrowUp, Question } from \"@phosphor-icons/react\"\nimport { FloatingButton } from \"./floating-button\"\n\nexport default function FloatingButtonDemo() {\n  return (\n    <div className=\"container mx-auto max-w-7xl px-4 py-8 space-y-8\">\n      <BottomLeftButtonsDemo />\n      <ScrollToTopDemo />\n      <DemoContent />\n    </div>\n  )\n}\n\nexport function BottomLeftButtonsDemo() {\n  return (\n    <>\n      <FloatingButton\n        icon={Question}\n        variant={\"outline\"}\n        placement=\"bottom-left\"\n        offset={{ x: 16, y: 16 }}\n        tooltip=\"Need help?\"\n        aria-label=\"Help\"\n      />\n\n      <FloatingButton\n        icon={ChatCircle}\n        text=\"Chat with us\"\n        placement=\"bottom-left\"\n        offset={{ x: 80, y: 16 }}\n        aria-label=\"Chat with us\"\n      />\n    </>\n  )\n}\n\nexport function ScrollToTopDemo() {\n  const [showScrollButton, setShowScrollButton] = useState(false)\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setShowScrollButton(window.scrollY > 300)\n    }\n\n    window.addEventListener(\"scroll\", handleScroll)\n    return () => window.removeEventListener(\"scroll\", handleScroll)\n  }, [])\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\",\n    })\n  }\n\n  if (!showScrollButton) return null\n\n  return (\n  <FloatingButton\n    icon={ArrowUp}\n    variant=\"outline\"\n    shape=\"circle\"\n    placement=\"bottom-right\"\n    tooltip=\"Scroll to top\"\n    onClick={scrollToTop}\n    aria-label=\"Scroll to top\"\n    desktopOffset={{ x: 60, y: 16 }}\n    mobileOffset={{ x: 16, y: 16 }}\n  />\n  )\n}\n\n// Adding some content to enable scrolling for demo purposes\nfunction DemoContent() {\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"p-6 bg-muted rounded-lg\">\n        <h2 className=\"text-xl font-bold mb-4\">Floating Button Demo</h2>\n        <p>Scroll down to see the scroll-to-top button appear in the bottom right.</p>\n        <p className=\"mt-2\">Notice the help button and chat button in the bottom left.</p>\n        <p className=\"mt-2\">The desktopOffset and mobileOffset props can be used to offset the floating button for bottom bars\n        on mobile, or sidebars on desktop</p>\n      </div>\n\n      {Array.from({ length: 10 }).map((_, i) => (\n        <div key={i} className=\"p-6 bg-card rounded-lg shadow-sm\">\n          <h3 className=\"text-lg font-medium mb-3\">Section {i + 1}</h3>\n          <p className=\"text-muted-foreground\">\n            This is a placeholder section to create scrollable content. As you scroll down, the floating \"Scroll to top\"\n            button will appear in the bottom right corner.\n          </p>\n        </div>\n      ))}\n    </div>\n  )\n}\n\n",
      "type": "registry:component",
      "target": "delta/components/floating-button-demo.tsx"
    }
  ]
}