{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "retro-video-player",
  "type": "registry:component",
  "files": [
    {
      "path": "registry/components/retro-video-player.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Minus, SpeakerHigh, SpeakerX } from \"@phosphor-icons/react\"\nimport { CornersOut } from \"@phosphor-icons/react\"\nimport { Rnd } from \"react-rnd\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface RetroVideoPlayerProps {\n  title?: string\n  src: string\n  defaultWidth?: number\n  defaultHeight?: number\n  minWidth?: number\n  minHeight?: number\n  className?: string\n  videoClassName?: string\n  headerClassName?: string\n  contentClassName?: string\n  defaultOpen?: boolean\n  onClose?: () => void\n  showControls?: boolean\n  autoPlay?: boolean\n  muted?: boolean\n}\n\nexport function RetroVideoPlayer({\n  title = \"Parallel Cam\",\n  src,\n  defaultWidth = 350,\n  defaultHeight = 500,\n  minWidth = 250,\n  minHeight = 350,\n  className,\n  videoClassName,\n  headerClassName,\n  contentClassName,\n  defaultOpen = true,\n  onClose,\n  showControls = false,\n  autoPlay = true,\n  muted: initialMuted,\n}: RetroVideoPlayerProps) {\n  // Set default muted state based on if explicit value was provided\n  const muted = initialMuted !== undefined ? initialMuted : false;\n  \n  const videoRef = React.useRef<HTMLVideoElement>(null)\n  const containerRef = React.useRef<HTMLDivElement>(null)\n  const [isPlaying, setIsPlaying] = React.useState(autoPlay)\n  const [isMuted, setIsMuted] = React.useState(muted)\n  const [isFullscreen, setIsFullscreen] = React.useState(false)\n  const [isDragging, setIsDragging] = React.useState(false)\n\n  const handleClose = () => {\n    if (onClose) {\n      onClose();\n    }\n  };\n\n  const togglePlayPause = (e?: React.MouseEvent | React.TouchEvent) => {\n    if (e) {\n      e.stopPropagation(); // Prevent event bubbling\n    }\n    \n    if (!videoRef.current) return;\n    \n    if (videoRef.current.paused) {\n      // Try to play with audio\n      const playPromise = videoRef.current.play();\n      \n      // Handle autoplay restrictions\n      if (playPromise !== undefined) {\n        playPromise.catch(error => {\n          // Auto-play was prevented - try again with muted\n          if (error.name === \"NotAllowedError\") {\n            videoRef.current!.muted = true;\n            setIsMuted(true);\n            videoRef.current!.play().catch(e => console.error(\"Failed to play even with muted\", e));\n          }\n        });\n      }\n      \n      setIsPlaying(true);\n    } else {\n      videoRef.current.pause();\n      setIsPlaying(false);\n    }\n  };\n  \n  const toggleMute = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation(); // Prevent triggering play/pause\n    \n    if (!videoRef.current) return;\n    \n    const newMutedState = !videoRef.current.muted;\n    videoRef.current.muted = newMutedState;\n    setIsMuted(newMutedState);\n  };\n\n  const toggleFullscreen = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation(); // Prevent triggering play/pause\n    \n    if (!containerRef.current) return;\n    \n    if (!isFullscreen) {\n      if (containerRef.current.requestFullscreen) {\n        containerRef.current.requestFullscreen();\n      }\n      setIsFullscreen(true);\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      }\n      setIsFullscreen(false);\n    }\n  };\n\n  // Ensure proper unmounting\n  React.useEffect(() => {\n    return () => {\n      if (videoRef.current) {\n        videoRef.current.pause();\n        videoRef.current.src = '';\n        videoRef.current.load();\n      }\n    };\n  }, []);\n  \n  // Handle autoplay with sound (try unmute after user interaction)\n  React.useEffect(() => {\n    if (autoPlay && !muted && videoRef.current) {\n      const handleUserInteraction = () => {\n        if (videoRef.current && videoRef.current.muted) {\n          // Try to unmute after user interaction\n          videoRef.current.muted = false;\n          setIsMuted(false);\n        }\n        \n        // Remove listeners after first interaction\n        document.removeEventListener('click', handleUserInteraction);\n        document.removeEventListener('touchstart', handleUserInteraction);\n      };\n      \n      document.addEventListener('click', handleUserInteraction);\n      document.addEventListener('touchstart', handleUserInteraction);\n      \n      return () => {\n        document.removeEventListener('click', handleUserInteraction);\n        document.removeEventListener('touchstart', handleUserInteraction);\n      };\n    }\n  }, [autoPlay, muted]);\n  \n  // Update playing state when video state changes\n  React.useEffect(() => {\n    const video = videoRef.current;\n    if (!video) return;\n    \n    const handlePlay = () => setIsPlaying(true);\n    const handlePause = () => setIsPlaying(false);\n    \n    video.addEventListener('play', handlePlay);\n    video.addEventListener('pause', handlePause);\n    \n    return () => {\n      video.removeEventListener('play', handlePlay);\n      video.removeEventListener('pause', handlePause);\n    };\n  }, []);\n\n  // Monitor fullscreen changes\n  React.useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n    \n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n    };\n  }, []);\n\n  return (\n    <Rnd\n      default={{\n        x: 0,\n        y: 0,\n        width: defaultWidth,\n        height: defaultHeight,\n      }}\n      minWidth={minWidth}\n      minHeight={minHeight}\n      className={cn(\n        \"overflow-hidden border border-primary bg-background z-[9999]\",\n        isDragging ? \"shadow-[3px_3px_0px_0px_rgba(0,0,0,0.3)]\" : \"\",\n        \"transition-shadow duration-200\",\n        className,\n      )}\n      onDragStart={() => setIsDragging(true)}\n      onDragStop={() => setIsDragging(false)}\n      disableDragging={isFullscreen}\n      enableResizing={!isFullscreen}\n    >\n      <div ref={containerRef} className=\"flex h-full w-full flex-col\">\n        <div\n          className={cn(\n            \"flex h-6 items-center justify-between border-b border-primary bg-muted/40 px-1 cursor-grab\",\n            \"hover:bg-muted transition-colors duration-200\",\n            headerClassName,\n          )}\n        >\n          <div className=\"flex-1\"></div>\n          <div \n            className=\"text-[13px] font-semibold text-foreground text-center\"\n          >\n            {title}\n          </div>\n          <div className=\"flex items-center space-x-1.5 flex-1 justify-end\">\n            {/* Sound toggle button */}\n            <button \n              className={cn(\n                \"border border-primary p-[3px] transition-colors duration-150 touch-manipulation cursor-pointer\",\n                \"text-muted-foreground\",\n              )}\n              onClick={toggleMute}\n              onTouchStart={(e) => e.stopPropagation()}\n              onTouchEnd={(e) => {\n                e.preventDefault();\n                toggleMute(e);\n              }}\n              style={{ borderRadius: 0, borderWidth: '0.5px' }}\n              aria-label={isMuted ? \"Unmute\" : \"Mute\"}\n            >\n                <div className=\"w-2 h-2 flex items-center justify-center\">\n                {isMuted ? <SpeakerX weight=\"fill\" className=\"h-2 w-2\" /> : <SpeakerHigh weight=\"fill\" className=\"h-2 w-2\" />}\n              </div>\n            </button>\n            \n            {/* Close button - visible on both mobile and desktop */}\n            {onClose && (\n              <button \n                className={cn(\n                  \"border border-primary p-[3px] transition-colors duration-150 touch-manipulation cursor-pointer\",\n                  \"text-muted-foreground\",\n                )}\n                onClick={handleClose}\n                onTouchStart={(e) => e.stopPropagation()}\n                onTouchEnd={(e) => {\n                  e.preventDefault();\n                  handleClose();\n                }}\n                style={{ borderRadius: 0, borderWidth: '0.5px' }}\n                aria-label=\"Close\"\n              >\n                <div className=\"w-2 h-2 flex items-center justify-center\">\n                  <Minus weight=\"bold\" className=\"h-2 w-2\" />\n                </div>\n              </button>\n            )}\n          </div>\n        </div>\n\n        <div className={cn(\"flex-1 relative cursor-default\", contentClassName)}>\n          <div \n            className=\"relative h-full w-full touch-manipulation\"\n            onClick={!showControls ? togglePlayPause : undefined}\n            onTouchEnd={!showControls ? (e) => {\n              e.preventDefault();\n              togglePlayPause();\n            } : undefined}\n          >\n            <video\n              ref={videoRef}\n              src={src}\n              className={cn(\n                \"h-full w-full object-cover\",\n                videoClassName,\n              )}\n              controls={showControls}\n              autoPlay={autoPlay}\n              muted={isMuted}\n              playsInline\n              loop\n            />\n            \n            {/* Fullscreen overlay button - always visible */}\n            <button\n              className=\"absolute bottom-3 right-3 p-1.5 transition-all duration-200 touch-manipulation opacity-100 cursor-pointer\"\n              onClick={(e) => {\n                e.stopPropagation();\n                toggleFullscreen(e);\n              }}\n              onTouchStart={(e) => e.stopPropagation()}\n              onTouchEnd={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                toggleFullscreen(e);\n              }}\n              aria-label=\"Fullscreen\"\n            >\n              <CornersOut weight=\"bold\" className=\"h-6 w-6 text-white drop-shadow-sm\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </Rnd>\n  )\n}\n",
      "type": "registry:component"
    }
  ]
}