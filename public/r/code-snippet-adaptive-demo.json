{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-snippet-adaptive-demo",
  "type": "registry:block",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "registryDependencies": [
    "https://deltacomponents.dev/r/code-snippet.json"
  ],
  "files": [
    {
      "path": "registry/examples/code-snippet-adaptive-demo.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport { PrismTheme } from \"prism-react-renderer\"\n\nimport { CodeSnippet } from \"@/registry/media/code-snippet\"\n\n// Light theme - clean and professional\nconst lightTheme: PrismTheme = {\n  plain: {\n    color: \"#24292f\",\n    backgroundColor: \"#ffffff\"\n  },\n  styles: [\n    {\n      types: [\"comment\"],\n      style: {\n        color: \"#656d76\",\n        fontStyle: \"italic\"\n      }\n    },\n    {\n      types: [\"keyword\", \"operator\"],\n      style: {\n        color: \"#cf222e\",\n        fontWeight: \"600\"\n      }\n    },\n    {\n      types: [\"string\", \"char\"],\n      style: {\n        color: \"#0a3069\"\n      }\n    },\n    {\n      types: [\"number\"],\n      style: {\n        color: \"#0550ae\"\n      }\n    },\n    {\n      types: [\"function\", \"method\"],\n      style: {\n        color: \"#8250df\"\n      }\n    },\n    {\n      types: [\"class-name\", \"type\"],\n      style: {\n        color: \"#953800\",\n        fontWeight: \"500\"\n      }\n    },\n    {\n      types: [\"punctuation\", \"symbol\"],\n      style: {\n        color: \"#24292f\"\n      }\n    },\n    {\n      types: [\"tag\"],\n      style: {\n        color: \"#116329\"\n      }\n    },\n    {\n      types: [\"attr-name\"],\n      style: {\n        color: \"#0550ae\"\n      }\n    },\n    {\n      types: [\"attr-value\"],\n      style: {\n        color: \"#0a3069\"\n      }\n    }\n  ]\n}\n\n// Dark theme - modern and vibrant\nconst darkTheme: PrismTheme = {\n  plain: {\n    color: \"#e6edf3\",\n    backgroundColor: \"#0d1117\"\n  },\n  styles: [\n    {\n      types: [\"comment\"],\n      style: {\n        color: \"#7d8590\",\n        fontStyle: \"italic\"\n      }\n    },\n    {\n      types: [\"keyword\", \"operator\"],\n      style: {\n        color: \"#ff7b72\",\n        fontWeight: \"600\"\n      }\n    },\n    {\n      types: [\"string\", \"char\"],\n      style: {\n        color: \"#a5d6ff\"\n      }\n    },\n    {\n      types: [\"number\"],\n      style: {\n        color: \"#79c0ff\"\n      }\n    },\n    {\n      types: [\"function\", \"method\"],\n      style: {\n        color: \"#d2a8ff\"\n      }\n    },\n    {\n      types: [\"class-name\", \"type\"],\n      style: {\n        color: \"#ffa657\",\n        fontWeight: \"500\"\n      }\n    },\n    {\n      types: [\"punctuation\", \"symbol\"],\n      style: {\n        color: \"#e6edf3\"\n      }\n    },\n    {\n      types: [\"tag\"],\n      style: {\n        color: \"#7ee787\"\n      }\n    },\n    {\n      types: [\"attr-name\"],\n      style: {\n        color: \"#79c0ff\"\n      }\n    },\n    {\n      types: [\"attr-value\"],\n      style: {\n        color: \"#a5d6ff\"\n      }\n    }\n  ]\n}\n\nexport default function CodeSnippetAdaptiveDemo() {\n  const reactCode = `import React, { useState, useEffect } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\n\ninterface TodoItem {\n  id: string\n  text: string\n  completed: boolean\n  createdAt: Date\n}\n\nconst TodoApp: React.FC = () => {\n  const [todos, setTodos] = useState<TodoItem[]>([])\n  const [inputValue, setInputValue] = useState('')\n  const [filter, setFilter] = useState<'all' | 'active' | 'completed'>('all')\n\n  useEffect(() => {\n    const savedTodos = localStorage.getItem('todos')\n    if (savedTodos) {\n      setTodos(JSON.parse(savedTodos))\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos))\n  }, [todos])\n\n  const addTodo = (e: React.FormEvent) => {\n    e.preventDefault()\n    if (inputValue.trim()) {\n      const newTodo: TodoItem = {\n        id: crypto.randomUUID(),\n        text: inputValue.trim(),\n        completed: false,\n        createdAt: new Date()\n      }\n      setTodos(prev => [...prev, newTodo])\n      setInputValue('')\n    }\n  }\n\n  const toggleTodo = (id: string) => {\n    setTodos(prev => \n      prev.map(todo => \n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\n      )\n    )\n  }\n\n  const deleteTodo = (id: string) => {\n    setTodos(prev => prev.filter(todo => todo.id !== id))\n  }\n\n  const filteredTodos = todos.filter(todo => {\n    if (filter === 'active') return !todo.completed\n    if (filter === 'completed') return todo.completed\n    return true\n  })\n\n  return (\n    <div className=\"max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg\">\n      <h1 className=\"text-2xl font-bold text-gray-800 mb-6\">\n        Todo App\n      </h1>\n      \n      <form onSubmit={addTodo} className=\"mb-6\">\n        <div className=\"flex gap-2\">\n          <input\n            type=\"text\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            placeholder=\"Add a new todo...\"\n            className=\"flex-1 px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n          <button\n            type=\"submit\"\n            className=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors\"\n          >\n            Add\n          </button>\n        </div>\n      </form>\n\n      <div className=\"flex gap-2 mb-4\">\n        {(['all', 'active', 'completed'] as const).map(filterType => (\n          <button\n            key={filterType}\n            onClick={() => setFilter(filterType)}\n            className={\\`px-3 py-1 rounded-md text-sm transition-colors \\${\n              filter === filterType\n                ? 'bg-blue-500 text-white'\n                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n            }\\`}\n          >\n            {filterType.charAt(0).toUpperCase() + filterType.slice(1)}\n          </button>\n        ))}\n      </div>\n\n      <AnimatePresence>\n        {filteredTodos.map(todo => (\n          <motion.div\n            key={todo.id}\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-md mb-2\"\n          >\n            <input\n              type=\"checkbox\"\n              checked={todo.completed}\n              onChange={() => toggleTodo(todo.id)}\n              className=\"rounded\"\n            />\n            <span\n              className={\\`flex-1 \\${\n                todo.completed ? 'line-through text-gray-500' : 'text-gray-800'\n              }\\`}\n            >\n              {todo.text}\n            </span>\n            <button\n              onClick={() => deleteTodo(todo.id)}\n              className=\"text-red-500 hover:text-red-700 transition-colors\"\n            >\n              Delete\n            </button>\n          </motion.div>\n        ))}\n      </AnimatePresence>\n\n      {todos.length === 0 && (\n        <p className=\"text-gray-500 text-center py-8\">\n          No todos yet. Add one above!\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default TodoApp`\n\n  return (\n    <div className=\"w-full py-4\">\n      <div className=\"mb-4 text-sm text-muted-foreground\">\n        This code snippet automatically adapts to your system's dark/light mode. \n        Try toggling the theme switcher to see it change!\n      </div>\n      \n      <CodeSnippet\n        title=\"TodoApp.tsx\"\n        code={reactCode}\n        language=\"typescript\"\n        adaptiveTheme={{\n          light: lightTheme,\n          dark: darkTheme\n        }}\n        showLineNumbers={true}\n      />\n    </div>\n  )\n}",
      "type": "registry:block",
      "target": "/components/delta/examples/code-snippet-adaptive-demo.tsx"
    }
  ]
}