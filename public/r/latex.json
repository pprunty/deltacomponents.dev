{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "latex",
  "type": "registry:component",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "dependencies": [
    "react-katex",
    "katex"
  ],
  "files": [
    {
      "path": "registry/media/latex.tsx",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport { useEffect, useState } from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface LatexProps {\n  /**\n   * The LaTeX mathematical expression to render\n   */\n  math: string\n  /**\n   * Whether to render as a block-level element (centered) or inline\n   * @default false\n   */\n  block?: boolean\n  /**\n   * Size scaling for the rendered math\n   * @default \"medium\"\n   */\n  size?: \"small\" | \"medium\" | \"large\" | \"x-large\"\n  /**\n   * Additional CSS classes\n   */\n  className?: string\n}\n\n/**\n * LaTeX component for rendering mathematical expressions\n *\n * Note: This component requires KaTeX CSS. Add the following to your global CSS:\n * @import \"katex/dist/katex.min.css\";\n *\n * @example\n * ```tsx\n * <Latex math=\"E = mc^2\" />\n * <Latex math=\"\\int_0^1 x^2 dx\" block size=\"large\" />\n * ```\n */\nexport default function Latex({\n  math,\n  block = false,\n  size = \"medium\",\n  className,\n}: LatexProps) {\n  const [renderedMath, setRenderedMath] = useState<string>(\"\")\n  const [isLoading, setIsLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  // Map size names to scale values\n  const sizeMap = {\n    small: 1,\n    medium: 1.2,\n    large: 1.5,\n    \"x-large\": 2,\n  }\n\n  const scale = sizeMap[size]\n\n  const style = {\n    fontSize: `${scale}em`,\n  }\n\n  useEffect(() => {\n    const renderMath = async () => {\n      try {\n        setIsLoading(true)\n        setError(null)\n\n        // Dynamic import to avoid SSR issues\n        const { default: katex } = await import(\"katex\")\n\n        const html = katex.renderToString(math, {\n          displayMode: block,\n          throwOnError: false,\n          output: \"html\",\n          strict: false,\n        })\n\n        setRenderedMath(html)\n      } catch (err) {\n        console.error(\"LaTeX rendering error:\", err)\n        setError(`Invalid LaTeX: ${math}`)\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    renderMath()\n  }, [math, block])\n\n  if (isLoading) {\n    return block ? (\n      <div style={style} className={cn(\"text-center my-4\", className)}>\n        Loading...\n      </div>\n    ) : (\n      <span style={style} className={cn(\"inline-block\", className)}>\n        Loading...\n      </span>\n    )\n  }\n\n  if (error) {\n    return block ? (\n      <div\n        style={style}\n        className={cn(\"text-center my-4 text-red-500\", className)}\n      >\n        [{error}]\n      </div>\n    ) : (\n      <span\n        style={style}\n        className={cn(\"inline-block text-red-500\", className)}\n      >\n        [{error}]\n      </span>\n    )\n  }\n\n  return block ? (\n    <div\n      style={style}\n      className={cn(\"text-center my-4\", className)}\n      dangerouslySetInnerHTML={{ __html: renderedMath }}\n    />\n  ) : (\n    <span\n      style={style}\n      className={cn(\"inline-block\", className)}\n      dangerouslySetInnerHTML={{ __html: renderedMath }}\n    />\n  )\n}\n\n/**\n * Enhanced inline math component with large size preset\n */\nexport const LargeInlineMath: React.FC<{\n  math: string\n  className?: string\n}> = ({ math, className }) => {\n  return <Latex math={math} size=\"large\" className={className} />\n}\n\n/**\n * Enhanced block math component with large size preset\n */\nexport const LargeBlockMath: React.FC<{ math: string; className?: string }> = ({\n  math,\n  className,\n}) => {\n  return <Latex math={math} block size=\"large\" className={className} />\n}\n\n// Export the main component as named export for consistency\nexport { Latex }\n",
      "type": "registry:component",
      "target": "/components/delta/latex.tsx"
    }
  ]
}