{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "file-input-preview-demo",
  "type": "registry:block",
  "registryDependencies": ["https://deltacomponents.dev/r/file-input.json"],
  "files": [
    {
      "path": "registry/examples/file-input-preview-demo.tsx",
      "content": "\"use client\"\n\nimport React from \"react\";\nimport { FileInput } from \"@/registry/inputs/file-input\";\n\nexport default function FileInputPreviewDemo() {\n  // Create mock files to demonstrate different file type icons\n  const createMockFile = (name: string, type: string, size: number): File => {\n    const blob = new Blob(['mock content'], { type });\n    const file = new File([blob], name, { type });\n    // Override the size property\n    Object.defineProperty(file, 'size', {\n      value: size,\n      writable: false\n    });\n    return file;\n  };\n\n  const mockFiles = [\n    createMockFile(\"Financial Report 2023.xlsx\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", 2.5 * 1024 * 1024),\n    createMockFile(\"Project Proposal.docx\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", 1.2 * 1024 * 1024),\n    createMockFile(\"User Manual.pdf\", \"application/pdf\", 5.8 * 1024 * 1024),\n    createMockFile(\"Demo Video.mp4\", \"video/mp4\", 15.6 * 1024 * 1024)\n  ];\n\n  // Custom FileInput component that accepts initial files\n  const FileInputWithPreview: React.FC<any> = (props) => {\n    const [files, setFiles] = React.useState<File[]>(mockFiles);\n\n    // File type to icon mapping (matching the component's logic)\n    const getFileIcon = (file: File) => {\n      const extension = file.name.split(\".\").pop()?.toLowerCase();\n      \n      const fileTypeIconMap: Record<string, string> = {\n        pdf: \"/vectors/pdf.svg\",\n        doc: \"/vectors/word.svg\",\n        docx: \"/vectors/word.svg\",\n        xls: \"/vectors/xlsx.svg\",\n        xlsx: \"/vectors/xlsx.svg\",\n        mp4: \"/vectors/mp4.svg\",\n      };\n\n      if (extension && fileTypeIconMap[extension]) {\n        return (\n          <img\n            src={fileTypeIconMap[extension]}\n            alt={`${extension} file`}\n            className=\"h-10 w-10\"\n          />\n        );\n      }\n\n      return <img src=\"/vectors/file.svg\" alt=\"file\" className=\"h-10 w-10\" />;\n    };\n\n    const formatFileSize = (bytes: number) => {\n      if (bytes === 0) return \"0 Bytes\";\n      const k = 1024;\n      const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      return (\n        Number.parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i]\n      );\n    };\n\n    return (\n      <div className=\"space-y-4\">\n        <FileInput\n          label=\"Upload Documents\"\n          name=\"documents\"\n          multiple={true}\n          maxFiles={10}\n          accept=\".pdf,.docx,.xlsx,.mp4,.txt\"\n          description=\"Upload additional files to see more previews\"\n          hint=\"Drag and drop files or click to browse\"\n          showIcons={true}\n          showPreviews={true}\n        />\n\n        {/* Pre-uploaded files section - positioned under the file input */}\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <h4 className=\"text-sm font-medium text-foreground\">Previously Uploaded Files</h4>\n            <span className=\"text-xs text-muted-foreground\">{files.length} files</span>\n          </div>\n          \n          <div className=\"space-y-2\">\n            {files.map((file, index) => (\n              <div\n                key={`${file.name}-${index}`}\n                className=\"flex items-center justify-between p-2 bg-muted/50 border border-border rounded\"\n              >\n                <div className=\"flex items-center gap-2 overflow-hidden min-w-0\">\n                  <div className=\"flex-shrink-0 text-muted-foreground\">\n                    {getFileIcon(file)}\n                  </div>\n\n                  <div className=\"min-w-0 flex-1\">\n                    <p className=\"text-md font-medium truncate\" title={file.name}>\n                      {file.name}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {formatFileSize(file.size)}\n                    </p>\n                  </div>\n                </div>\n\n                <button\n                  type=\"button\"\n                  className=\"h-8 w-8 rounded-full flex-shrink-0 flex items-center justify-center hover:bg-muted transition-colors\"\n                  onClick={() => {\n                    const newFiles = files.filter((_, i) => i !== index);\n                    setFiles(newFiles);\n                  }}\n                  aria-label={`Remove ${file.name}`}\n                >\n                  <svg className=\"h-4 w-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                  </svg>\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"w-full max-w-md mx-auto p-4\">\n      <FileInputWithPreview />\n    </div>\n  );\n}\n",
      "type": "registry:block"
    }
  ]
}
