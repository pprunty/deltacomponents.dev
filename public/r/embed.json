{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "embed",
  "type": "registry:component",
  "files": [
    {
      "path": "registry/components/embed.tsx",
      "content": "'use client';\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Loader2, RefreshCw, ExternalLink } from 'lucide-react';\n\ninterface EmbedProps {\n  src: string;\n  title?: string;\n  height?: number | string;\n  width?: number | string;\n  allowFullScreen?: boolean;\n  sandbox?: string;\n  className?: string;\n  loading?: 'eager' | 'lazy';\n  allow?: string;\n}\n\nexport function Embed({\n  src,\n  title = 'Embedded content',\n  height = 500,\n  width = '100%',\n  allowFullScreen = true,\n  sandbox = 'allow-scripts allow-same-origin allow-forms allow-popups',\n  className = '',\n  loading = 'lazy',\n  allow = 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture',\n}: EmbedProps) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [refreshKey, setRefreshKey] = useState(0);\n  const iframeRef = useRef<HTMLIFrameElement>(null);\n\n  // Extract domain name for the banner\n  const getDomainName = (url: string) => {\n    try {\n      const domain = new URL(url).hostname.replace('www.', '');\n      return domain;\n    } catch (error) {\n      return url;\n    }\n  };\n\n  const siteDomain = getDomainName(src);\n\n  // Handle iframe load events\n  useEffect(() => {\n    const iframe = iframeRef.current;\n    if (!iframe) return;\n\n    const handleLoad = () => {\n      setIsLoading(false);\n      setHasError(false);\n    };\n\n    const handleError = () => {\n      setIsLoading(false);\n      setHasError(true);\n    };\n\n    iframe.addEventListener('load', handleLoad);\n    iframe.addEventListener('error', handleError);\n\n    return () => {\n      iframe.removeEventListener('load', handleLoad);\n      iframe.removeEventListener('error', handleError);\n    };\n  }, [refreshKey]);\n\n  // Set a loading timeout (if iframe takes too long)\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      if (isLoading) setIsLoading(false);\n    }, 10000); // 10 seconds timeout\n\n    return () => clearTimeout(timeout);\n  }, [isLoading, refreshKey]);\n\n  // Handle refresh button click\n  const handleRefresh = () => {\n    setIsLoading(true);\n    setHasError(false);\n    setRefreshKey((prev) => prev + 1);\n  };\n\n  return (\n    <div className=\"relative w-full mb-8 overflow-hidden rounded-lg border border-border\">\n      {/* Site Banner */}\n      <div className=\"flex items-center justify-between px-3 py-1 bg-muted text-muted-foreground text-sm border-b border-border\">\n        <div className=\"flex items-center gap-2\">\n          <img\n            src={`https://www.google.com/s2/favicons?domain=${siteDomain}&sz=32`}\n            alt={`${siteDomain} favicon`}\n            width={18}\n            height={18}\n            className=\"rounded-[4px]\"\n          />\n          <span>{siteDomain}</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <button\n            onClick={handleRefresh}\n            className=\"p-1 rounded-[4px] cursor-pointer hover:bg-background transition-colors\"\n            title=\"Refresh embed\"\n            aria-label=\"Refresh embed\"\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n          </button>\n          <a\n            href={src}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"p-1 rounded-[4px] no-after cursor-pointer hover:bg-background transition-colors\"\n            title=\"Open in new tab\"\n            aria-label=\"Open in new tab\"\n          >\n            <ExternalLink className=\"h-4 w-4\" />\n          </a>\n        </div>\n      </div>\n\n      {/* Loading Spinner */}\n      {isLoading && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-background/80 z-10\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n          <span className=\"ml-2 text-sm text-muted-foreground\">\n            Loading embed...\n          </span>\n        </div>\n      )}\n\n      {/* Error State */}\n      {hasError && (\n        <div className=\"absolute inset-0 flex flex-col items-center justify-center bg-background/90 z-10 p-4\">\n          <p className=\"text-destructive font-medium\">\n            Failed to load embedded content\n          </p>\n          <p className=\"text-sm text-muted-foreground mt-2 text-center\">\n            {src.length > 50 ? `${src.substring(0, 50)}...` : src}\n          </p>\n          <div className=\"flex gap-2 mt-4\">\n            <button\n              onClick={handleRefresh}\n              className=\"px-4 py-2 bg-muted hover:bg-muted/80 text-muted-foreground rounded-md text-sm flex items-center gap-1\"\n            >\n              <RefreshCw className=\"h-4 w-4\" /> Retry\n            </button>\n            <a\n              href={src}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"px-4 py-2 bg-primary text-primary-foreground rounded-md text-sm flex items-center gap-1\"\n            >\n              <ExternalLink className=\"h-4 w-4\" /> Open in new tab\n            </a>\n          </div>\n        </div>\n      )}\n\n      {/* Iframe */}\n      <iframe\n        key={refreshKey}\n        ref={iframeRef}\n        src={src}\n        title={title}\n        height={height}\n        width={width}\n        allowFullScreen={allowFullScreen}\n        sandbox={sandbox}\n        loading={loading}\n        allow={allow}\n        className={`border-0 ${className}`}\n        style={{\n          opacity: isLoading ? 0 : 1,\n          transition: 'opacity 0.3s ease-in-out',\n        }}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}
