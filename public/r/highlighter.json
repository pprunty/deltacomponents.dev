{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "highlighter",
  "type": "registry:component",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "dependencies": ["motion"],
  "files": [
    {
      "path": "registry/landing-page/highlighter.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { motion, useInView } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst highlighterVariants = cva(\"bg-transparent relative\", {\n  variants: {\n    variant: {\n      default: \"text-foreground\",\n      success: \"text-foreground\",\n      info: \"text-foreground\",\n      warning: \"text-foreground\",\n      destructive: \"text-foreground\",\n    },\n    thickness: {\n      thin: \"\",\n      default: \"\",\n      thick: \"\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    thickness: \"default\",\n  },\n})\n\nexport interface HighlighterProps\n  extends React.HTMLAttributes<HTMLElement>,\n    VariantProps<typeof highlighterVariants> {\n  asChild?: boolean\n  shadowColor?: string\n  darkShadowColor?: string\n  animate?: boolean\n  text: string\n}\n\nconst Highlighter = React.forwardRef<HTMLElement, HighlighterProps>(\n  (\n    {\n      className,\n      variant,\n      thickness,\n      asChild = false,\n      shadowColor,\n      darkShadowColor,\n      style,\n      animate = false,\n      children,\n      text,\n      ...props\n    },\n    ref\n  ) => {\n    const highlighterRef = React.useRef<HTMLElement | null>(null)\n    const isInView = useInView(highlighterRef, { once: true, amount: 0.5 })\n\n    // Determine shadow values based on variant and custom colors\n    const getShadowValue = (isDefault = true) => {\n      if (shadowColor) {\n        return isDefault ? shadowColor : darkShadowColor || shadowColor\n      }\n\n      switch (variant) {\n        case \"default\":\n          return isDefault ? \"rgb(240,171,252)\" : \"rgba(245,140,245,0.8)\"\n        case \"success\":\n          return isDefault ? \"rgba(132,204,22,0.5)\" : \"rgba(132,204,22,0.4)\"\n        case \"info\":\n          return isDefault ? \"rgba(56,189,248,0.5)\" : \"rgba(56,189,248,0.4)\"\n        case \"warning\":\n          return isDefault ? \"rgba(250,204,21,0.5)\" : \"rgba(250,204,21,0.4)\"\n        case \"destructive\":\n          return isDefault ? \"rgba(239,68,68,0.5)\" : \"rgba(239,68,68,0.4)\"\n        default:\n          return isDefault ? \"rgb(240,171,252)\" : \"rgba(245,140,245,0.8)\"\n      }\n    }\n\n    // Determine thickness value\n    const getThicknessValue = () => {\n      switch (thickness) {\n        case \"thin\":\n          return \"0.3em\"\n        case \"thick\":\n          return \"0.7em\"\n        default:\n          return \"0.5em\"\n      }\n    }\n\n    // Create custom styles\n    const customStyle = {\n      ...style,\n      \"--highlight-shadow-color\": getShadowValue(true),\n      \"--highlight-dark-shadow-color\": getShadowValue(false),\n      \"--highlight-thickness\": getThicknessValue(),\n    } as React.CSSProperties\n\n    // Animation variants\n    const highlightVariants = {\n      hidden: { width: \"0%\" },\n      visible: {\n        width: \"100%\",\n        transition: {\n          duration: 0.5,\n          ease: [0.4, 0, 0.2, 1] as const,\n        },\n      },\n    }\n\n    // Static shadow class (no animation)\n    const staticShadowClass = !animate\n      ? \"shadow-[inset_0_-var(--highlight-thickness)_0_0_var(--highlight-shadow-color)] dark:shadow-[inset_0_-var(--highlight-thickness)_0_0_var(--highlight-dark-shadow-color)]\"\n      : \"\"\n\n    if (asChild) {\n      // When using as a fragment, just return the children with no wrapping\n      return <React.Fragment>{children}</React.Fragment>\n    }\n\n    // When using as a mark element\n    return (\n      <mark\n        ref={(node) => {\n          // Handle both the forwarded ref and our local ref\n          if (typeof ref === \"function\") {\n            ref(node as HTMLElement)\n          } else if (ref) {\n            ref.current = node as HTMLElement\n          }\n          highlighterRef.current = node as HTMLElement\n        }}\n        className={cn(\n          highlighterVariants({ variant, thickness, className }),\n          staticShadowClass,\n          \"relative\"\n        )}\n        style={customStyle}\n        {...props}\n      >\n        <span className=\"relative z-10\">{text}</span>\n\n        {animate ? (\n          <motion.span\n            className=\"absolute bottom-0 left-0 h-[var(--highlight-thickness)] bg-[var(--highlight-shadow-color)] dark:bg-[var(--highlight-dark-shadow-color)] pointer-events-none z-0 will-change-transform will-change-width transform-gpu\"\n            initial=\"hidden\"\n            animate={isInView ? \"visible\" : \"hidden\"}\n            variants={highlightVariants}\n          />\n        ) : (\n          // Add a static span for non-animated highlights to ensure consistent rendering\n          <span className=\"absolute bottom-0 left-0 h-[var(--highlight-thickness)] w-full bg-[var(--highlight-shadow-color)] dark:bg-[var(--highlight-dark-shadow-color)] pointer-events-none z-0\" />\n        )}\n      </mark>\n    )\n  }\n)\nHighlighter.displayName = \"Highlighter\"\n\nexport { Highlighter, highlighterVariants }\n",
      "type": "registry:component",
      "target": "/components/delta/landing-page/highlighter.tsx"
    }
  ]
}
