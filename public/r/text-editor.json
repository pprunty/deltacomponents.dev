{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text-editor",
  "type": "registry:component",
  "title": "Text Editor",
  "description": "A minimal text editor component with formatting options",
  "dependencies": [
    "@tiptap/react",
    "@tiptap/starter-kit",
    "@tiptap/extension-link",
    "@tiptap/extension-bullet-list",
    "@tiptap/extension-ordered-list",
    "@tiptap/extension-list-item",
    "@phosphor-icons/react"
  ],
  "registryDependencies": [
    "button",
    "utils"
  ],
  "files": [
    {
      "path": "delta/components/text-editor.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport {\n  useEditor,\n  EditorContent,\n  type Editor as EditorType,\n} from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport Link from '@tiptap/extension-link';\nimport BulletList from '@tiptap/extension-bullet-list';\nimport OrderedList from '@tiptap/extension-ordered-list';\nimport ListItem from '@tiptap/extension-list-item';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport {\n  ListBullets,\n  ListNumbers,\n  Link as LinkIcon,\n  TextB,\n  TextItalic,\n} from '@phosphor-icons/react';\n\nexport interface TextEditorProps {\n  /**\n   * The initial content of the editor\n   */\n  initialContent?: string;\n  /**\n   * Callback function that is called when the editor content changes\n   */\n  onChange?: (html: string) => void;\n  /**\n   * Additional CSS class names to apply to the editor container\n   */\n  className?: string;\n  /**\n   * Whether the editor is disabled\n   */\n  disabled?: boolean;\n  /**\n   * The placeholder text to display when the editor is empty\n   */\n  placeholder?: string;\n  /**\n   * The maximum height of the editor\n   */\n  maxHeight?: string;\n  /**\n   * Whether to show the toolbar\n   * @default true\n   */\n  showToolbar?: boolean;\n  /**\n   * Additional CSS class names to apply to the toolbar\n   */\n  toolbarClassName?: string;\n  /**\n   * Additional CSS class names to apply to the editor content\n   */\n  contentClassName?: string;\n  /**\n   * Controls which formatting options are available in the toolbar\n   * @default { bold: true, italic: true, bulletList: true, orderedList: true, link: true }\n   */\n  controls?: {\n    bold?: boolean;\n    italic?: boolean;\n    bulletList?: boolean;\n    orderedList?: boolean;\n    link?: boolean;\n  };\n}\n\nexport function TextEditor({\n  initialContent = '',\n  onChange,\n  className,\n  disabled = false,\n  placeholder = 'Start typing...',\n  maxHeight = 'none',\n  showToolbar = true,\n  toolbarClassName,\n  contentClassName,\n  controls = {\n    bold: true,\n    italic: true,\n    bulletList: true,\n    orderedList: true,\n    link: true,\n  },\n}: TextEditorProps) {\n  const editor = useEditor({\n    extensions: [\n      StarterKit,\n      BulletList.configure({\n        HTMLAttributes: {\n          class: 'list-disc pl-4',\n        },\n      }),\n      OrderedList.configure({\n        HTMLAttributes: {\n          class: 'list-decimal pl-4',\n        },\n      }),\n      ListItem,\n      Link.configure({\n        openOnClick: false,\n        HTMLAttributes: {\n          class: 'text-primary underline underline-offset-4',\n        },\n      }),\n    ],\n    content: initialContent,\n    editable: !disabled,\n    onUpdate: ({ editor }) => {\n      onChange?.(editor.getHTML());\n    },\n    editorProps: {\n      attributes: {\n        class: 'outline-none',\n        placeholder,\n      },\n    },\n  });\n\n  return (\n    <div\n      className={cn(\n        'rounded-md border bg-background text-foreground',\n        className,\n      )}\n    >\n      {showToolbar && (\n        <Toolbar\n          editor={editor}\n          className={toolbarClassName}\n          controls={controls}\n        />\n      )}\n      <EditorContent\n        editor={editor}\n        className={cn(\n          'prose prose-sm dark:prose-invert max-w-none p-4',\n          'prose-p:my-1 prose-ul:my-1 prose-ol:my-1 prose-li:my-0.5',\n          {\n            'opacity-50 cursor-not-allowed': disabled,\n          },\n          contentClassName,\n        )}\n        style={{ maxHeight }}\n      />\n    </div>\n  );\n}\n\ninterface ToolbarProps {\n  editor: EditorType | null;\n  className?: string;\n  controls?: TextEditorProps['controls'];\n}\n\nfunction Toolbar({ editor, className, controls }: ToolbarProps) {\n  const setLinkRef = React.useRef((url: string = '') => {\n    editor\n      ?.chain()\n      .focus()\n      .extendMarkRange('link')\n      .setLink({ href: url })\n      .run();\n  });\n\n  const unsetLinkRef = React.useRef(() => {\n    editor?.chain().focus().extendMarkRange('link').unsetLink().run();\n  });\n\n  const handleSetLink = React.useCallback(() => {\n    if (!editor) return;\n\n    const previousUrl = editor.getAttributes('link').href;\n    const url = window.prompt('URL', previousUrl);\n\n    // cancelled\n    if (url === null) {\n      return;\n    }\n\n    // empty\n    if (url === '') {\n      unsetLinkRef.current();\n      return;\n    }\n\n    // update link\n    setLinkRef.current(url);\n  }, [editor]);\n\n  if (!editor) {\n    return null;\n  }\n\n  return (\n    <div\n      className={cn(\n        'flex items-center gap-1 border-b bg-muted/40 px-2 py-1',\n        className,\n      )}\n    >\n      {controls?.bold !== false && (\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => editor.chain().focus().toggleBold().run()}\n          className={cn('h-8 w-8', {\n            'bg-accent text-accent-foreground': editor.isActive('bold'),\n          })}\n          aria-label=\"Bold\"\n        >\n          <TextB className=\"h-4 w-4\" weight=\"bold\" />\n        </Button>\n      )}\n      {controls?.italic !== false && (\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => editor.chain().focus().toggleItalic().run()}\n          className={cn('h-8 w-8', {\n            'bg-accent text-accent-foreground': editor.isActive('italic'),\n          })}\n          aria-label=\"Italic\"\n        >\n          <TextItalic className=\"h-4 w-4\" weight=\"bold\" />\n        </Button>\n      )}\n      {controls?.bulletList !== false && (\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => editor.chain().focus().toggleBulletList().run()}\n          className={cn('h-8 w-8', {\n            'bg-accent text-accent-foreground': editor.isActive('bulletList'),\n          })}\n          aria-label=\"Bullet List\"\n        >\n          <ListBullets className=\"h-4 w-4\" weight=\"bold\" />\n        </Button>\n      )}\n      {controls?.orderedList !== false && (\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => editor.chain().focus().toggleOrderedList().run()}\n          className={cn('h-8 w-8', {\n            'bg-accent text-accent-foreground': editor.isActive('orderedList'),\n          })}\n          aria-label=\"Ordered List\"\n        >\n          <ListNumbers className=\"h-4 w-4\" weight=\"bold\" />\n        </Button>\n      )}\n      {controls?.link !== false && (\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={handleSetLink}\n          className={cn('h-8 w-8', {\n            'bg-accent text-accent-foreground': editor.isActive('link'),\n          })}\n          aria-label=\"Link\"\n        >\n          <LinkIcon className=\"h-4 w-4\" weight=\"bold\" />\n        </Button>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/components/text-editor.tsx"
    },
    {
      "path": "delta/examples/text-editor-basic-demo.tsx",
      "content": "'use client';\n\nimport { useState } from 'react';\nimport { TextEditor } from '@/delta/components/text-editor';\n\nexport default function TextEditorBasicDemo() {\n  const [content, setContent] = useState<string>(`\n    <h1><strong>Welcome to Delta Components</strong></h1>\n    \n    <p>Here is an example of some text created using delta's text editor:</p>\n\n    <ul>\n      <li>This text is in <em>italics</em></li>\n      <li>This text is in <strong>bold</strong></li>\n      <li>This text is <strong><em>bold and italic</em></strong></li>\n    </ul>\n  `);\n\n  return (\n    <div className=\"w-full max-w-2xl mx-auto\">\n      <TextEditor initialContent={content} onChange={setContent} />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/examples/text-editor-basic-demo.tsx"
    },
    {
      "path": "content/docs/text-editor.mdx",
      "content": "# TextEditor\n\nA rich text editor component built with TipTap, featuring text formatting, lists, links, and customizable styling.\n\n## Basic Usage\n\n<ComponentTabs name=\"text-editor-basic\" />\n\n<InstallationInstructions componentName=\"text-editor\" />\n\n## Features\n\n- **Rich Text Editing**: Full support for rich text formatting including:\n  - **Bold** text (Ctrl/Cmd + B)\n  - **Italic** text (Ctrl/Cmd + I)\n  - **Lists** (bullet and ordered)\n  - **Links** with custom styling\n- **Customizable**: Adjust styling, placeholder text, and toolbar visibility\n- **Accessibility**: Built with accessibility in mind\n- **Responsive**: Works well on all screen sizes\n- **Dark Mode Support**: Automatically adapts to your theme\n\n## Props\n\n<Table>\n  <TableHeader>\n    <TableRow>\n      <TableHead>Name</TableHead>\n      <TableHead>Type</TableHead>\n      <TableHead>Default</TableHead>\n      <TableHead>Description</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell>`onChange`</TableCell>\n      <TableCell>`(html: string) => void`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Callback when content changes</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`disabled`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether the editor is disabled</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`placeholder`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>`\"Start typing...\"`</TableCell>\n      <TableCell>Placeholder text when empty</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`maxHeight`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>`\"none\"`</TableCell>\n      <TableCell>Maximum height of the editor</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`showToolbar`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`true`</TableCell>\n      <TableCell>Whether to show the toolbar</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`className`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Additional CSS classes for the editor container</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`toolbarClassName`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Additional CSS classes for the toolbar</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`contentClassName`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Additional CSS classes for the editor content</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`controls`</TableCell>\n      <TableCell>`{ bold?: boolean, italic?: boolean, bulletList?: boolean, orderedList?: boolean, link?: boolean }`</TableCell>\n      <TableCell>`{ bold: true, italic: true, bulletList: true, orderedList: true, link: true }`</TableCell>\n      <TableCell>Controls which formatting options are available in the toolbar</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n\n## Usage Examples\n\n### Basic Text Editor\n\n```tsx\nimport { TextEditor } from \"@/components/ui/text-editor\"\n\nexport default function TextEditorDemo() {\n  return <TextEditor />\n}\n```\n\n### With Initial Content\n\n```tsx\nimport { TextEditor } from \"@/components/ui/text-editor\"\n\nexport default function TextEditorDemo() {\n  return (\n    <TextEditor \n      initialContent={`\n        <h2>Welcome to Delta Components</h2>\n        <p>A collection of modern, accessible, and customizable React components built on top of shadcn/ui.</p>\n        \n        <h3>Key Features</h3>\n        <ul>\n          <li><strong>Modern Design</strong>: Clean and contemporary UI components</li>\n          <li><em>Accessibility First</em>: Built with WCAG guidelines in mind</li>\n          <li><strong><em>Customizable</em></strong>: Easy to style and extend</li>\n        </ul>\n        \n        <p>Learn more at <a href=\"https://deltacomponents.dev\">deltacomponents.dev</a></p>\n      `}\n      onChange={(html) => console.log(html)}\n    />\n  )\n}\n```\n\n### Custom Controls\n\n```tsx\nimport { TextEditor } from \"@/components/ui/text-editor\"\n\nexport default function TextEditorDemo() {\n  return (\n    <TextEditor \n      controls={{\n        bold: true,\n        italic: true,\n        bulletList: false,\n        orderedList: false,\n        link: true\n      }}\n    />\n  )\n}\n```\n\n### Minimal Controls\n\n```tsx\nimport { TextEditor } from \"@/components/ui/text-editor\"\n\nexport default function TextEditorDemo() {\n  return (\n    <TextEditor \n      controls={{\n        bold: true,\n        italic: true,\n        bulletList: false,\n        orderedList: false,\n        link: false\n      }}\n    />\n  )\n}\n```\n\n### Custom Styling\n\n```tsx\nimport { TextEditor } from \"@/components/ui/text-editor\"\n\nexport default function TextEditorDemo() {\n  return (\n    <TextEditor \n      className=\"border-2 border-primary\"\n      toolbarClassName=\"bg-primary/10\"\n      contentClassName=\"prose-lg\"\n      maxHeight=\"400px\"\n    />\n  )\n}\n```\n\n## Keyboard Shortcuts\n\nThe text editor supports the following keyboard shortcuts:\n\n- **Bold**: `Ctrl/Cmd + B`\n- **Italic**: `Ctrl/Cmd + I`\n- **Bullet List**: `Ctrl/Cmd + Shift + 8`\n- **Ordered List**: `Ctrl/Cmd + Shift + 7`\n- **Link**: `Ctrl/Cmd + K`\n\n## Accessibility\n\nThe TextEditor component follows accessibility best practices:\n\n- Proper ARIA attributes for the editor and toolbar\n- Keyboard navigation support\n- Focus management\n- Screen reader compatibility\n- High contrast support\n",
      "type": "registry:component",
      "target": "content/docs/text-editor.mdx"
    }
  ]
}