{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "font-transform",
  "type": "registry:component",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "files": [
    {
      "path": "registry/animations/font-transform.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { motion } from \"framer-motion\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport \"./font-transform.css\"\n\n// Font classes matching the exact order and selection from the older version\nconst fontClasses = [\n  // Professional fonts (matching the older version order)\n  \"font-inter\",\n  \"font-roboto\",\n  \"font-poppins\",\n  \"font-montserrat\",\n  \"font-playfair\",\n  \"font-merriweather\",\n  \"font-jetbrains\",\n  \"font-source-code\",\n  \"font-ibm-plex\",\n\n  // Abstract/distinctive fonts (matching the older version order)\n  \"font-orbitron\",\n  \"font-righteous\",\n  \"font-fredoka\",\n  \"font-bungee\",\n  \"font-monoton\",\n  \"font-creepster\",\n  \"font-fascinate\",\n  \"font-griffy\",\n  \"font-megrim\",\n  \"font-wallpoet\",\n  \"font-zeyada\",\n  \"font-shrikhand\",\n  \"font-vampiro\",\n  \"font-butcherman\",\n  \"font-nosifer\",\n  \"font-eater\",\n  \"font-lacquer\",\n  \"font-pirata\",\n  \"font-snowburst\",\n  \"font-chela\",\n]\n\ninterface FontTransformProps {\n  children: string\n  className?: string\n  hoverDuration?: number\n}\n\nconst FontTransform = React.forwardRef<HTMLDivElement, FontTransformProps>(\n  ({ children, className, hoverDuration = 2000, ...props }, ref) => {\n    const characters = children.split(\"\")\n    const [characterStates, setCharacterStates] = React.useState<\n      Array<{ isTransformed: boolean; fontClass: string }>\n    >(() => characters.map(() => ({ isTransformed: false, fontClass: \"\" })))\n    const timeoutRefs = React.useRef<(NodeJS.Timeout | null)[]>([])\n\n    // Initialize timeout refs array\n    React.useEffect(() => {\n      timeoutRefs.current = new Array(characters.length).fill(null)\n    }, [characters.length])\n\n    const handleCharacterHover = (index: number) => {\n      // Clear any existing timeout for this character\n      if (timeoutRefs.current[index]) {\n        clearTimeout(timeoutRefs.current[index]!)\n      }\n\n      // Get a random font that's different from the current one\n      const currentFontClass = characterStates[index].fontClass\n      let randomFont\n      do {\n        randomFont = fontClasses[Math.floor(Math.random() * fontClasses.length)]\n      } while (randomFont === currentFontClass && fontClasses.length > 1)\n\n      // Update character state\n      setCharacterStates((prev) => {\n        const newStates = [...prev]\n        newStates[index] = { isTransformed: true, fontClass: randomFont }\n        return newStates\n      })\n\n      // Set timeout to revert font after specified duration\n      timeoutRefs.current[index] = setTimeout(() => {\n        setCharacterStates((prev) => {\n          const newStates = [...prev]\n          newStates[index] = { isTransformed: false, fontClass: \"\" }\n          return newStates\n        })\n        timeoutRefs.current[index] = null\n      }, hoverDuration)\n    }\n\n    return (\n      <motion.div\n        ref={ref}\n        className={cn(\n          \"inline-flex flex-wrap items-baseline leading-relaxed\",\n          className\n        )}\n        style={{\n          textAlign: \"justify\",\n          textJustify: \"inter-character\",\n        }}\n        layout\n        transition={{\n          layout: {\n            type: \"spring\",\n            stiffness: 400,\n            damping: 30,\n            duration: 0.3,\n          },\n        }}\n        {...props}\n      >\n        {characters.map((char, index) => {\n          const state = characterStates[index]\n\n          return (\n            <motion.span\n              key={index}\n              className={cn(\n                \"inline-block cursor-default relative\",\n                char === \" \" ? \"w-[0.25em]\" : \"\",\n                state.isTransformed ? state.fontClass : \"\"\n              )}\n              layout\n              initial={{ scale: 1 }}\n              animate={{\n                scale: state.isTransformed ? 1.1 : 1,\n              }}\n              transition={{\n                layout: {\n                  type: \"spring\",\n                  stiffness: 400,\n                  damping: 30,\n                  duration: 0.3,\n                },\n                scale: {\n                  type: \"spring\",\n                  stiffness: 300,\n                  damping: 20,\n                  duration: 0.3,\n                },\n              }}\n              style={{\n                minWidth: char === \" \" ? \"0.25em\" : \"auto\",\n                display: \"inline-block\",\n                textAlign: \"center\",\n              }}\n              onMouseEnter={() => handleCharacterHover(index)}\n              whileHover={{\n                scale: state.isTransformed ? 1.15 : 1.05,\n                transition: { duration: 0.1 },\n              }}\n            >\n              {char === \" \" ? \"\\u00A0\" : char}\n            </motion.span>\n          )\n        })}\n      </motion.div>\n    )\n  }\n)\n\nFontTransform.displayName = \"FontTransform\"\n\nexport { FontTransform }\n",
      "type": "registry:component",
      "target": "/components/delta/animations/font-transform.tsx"
    },
    {
      "path": "registry/animations/font-transform.css",
      "content": "/* Google Fonts for Font Transform Component */\n@import url(\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;700&family=Roboto:wght@300;400;500;700&family=Poppins:wght@300;400;500;600;700&family=Montserrat:wght@300;400;500;600;700&family=Playfair+Display:wght@400;700&family=Merriweather:wght@300;400;700&family=JetBrains+Mono:wght@400;500;700&family=Source+Code+Pro:wght@400;500;700&family=IBM+Plex+Sans:wght@300;400;500;600&family=Orbitron:wght@400;700&family=Righteous&family=Fredoka:wght@400&family=Bungee&family=Monoton&family=Creepster&family=Fascinate&family=Griffy&family=Megrim&family=Wallpoet&family=Zeyada&family=Shrikhand&family=Vampiro+One&family=Butcherman&family=Nosifer&family=Eater&family=Lacquer&family=Pirata+One&family=Snowburst+One&family=Chela+One&display=swap\");\n\n/* Custom font classes for the font-transform component */\n/* Professional fonts */\n.font-inter {\n  font-family: \"Inter\", sans-serif;\n}\n.font-roboto {\n  font-family: \"Roboto\", sans-serif;\n}\n.font-poppins {\n  font-family: \"Poppins\", sans-serif;\n}\n.font-montserrat {\n  font-family: \"Montserrat\", sans-serif;\n}\n.font-playfair {\n  font-family: \"Playfair Display\", serif;\n}\n.font-merriweather {\n  font-family: \"Merriweather\", serif;\n}\n.font-jetbrains {\n  font-family: \"JetBrains Mono\", monospace;\n}\n.font-source-code {\n  font-family: \"Source Code Pro\", monospace;\n}\n.font-ibm-plex {\n  font-family: \"IBM Plex Sans\", sans-serif;\n}\n\n/* Abstract/distinctive fonts */\n.font-orbitron {\n  font-family: \"Orbitron\", sans-serif;\n}\n.font-righteous {\n  font-family: \"Righteous\", cursive;\n}\n.font-fredoka {\n  font-family: \"Fredoka\", sans-serif;\n}\n.font-bungee {\n  font-family: \"Bungee\", cursive;\n}\n.font-monoton {\n  font-family: \"Monoton\", cursive;\n}\n.font-creepster {\n  font-family: \"Creepster\", cursive;\n}\n.font-fascinate {\n  font-family: \"Fascinate\", cursive;\n}\n.font-griffy {\n  font-family: \"Griffy\", cursive;\n}\n.font-megrim {\n  font-family: \"Megrim\", cursive;\n}\n.font-wallpoet {\n  font-family: \"Wallpoet\", cursive;\n}\n.font-zeyada {\n  font-family: \"Zeyada\", cursive;\n}\n.font-shrikhand {\n  font-family: \"Shrikhand\", cursive;\n}\n.font-vampiro {\n  font-family: \"Vampiro One\", cursive;\n}\n.font-butcherman {\n  font-family: \"Butcherman\", cursive;\n}\n.font-nosifer {\n  font-family: \"Nosifer\", cursive;\n}\n.font-eater {\n  font-family: \"Eater\", cursive;\n}\n.font-lacquer {\n  font-family: \"Lacquer\", cursive;\n}\n.font-pirata {\n  font-family: \"Pirata One\", cursive;\n}\n.font-snowburst {\n  font-family: \"Snowburst One\", cursive;\n}\n.font-chela {\n  font-family: \"Chela One\", cursive;\n}\n",
      "type": "registry:component",
      "target": "/components/delta/animations/font-transform.css"
    }
  ]
}