{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "font-transform",
  "type": "registry:component",
  "files": [
    {
      "path": "registry/animations/font-transform.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Bungee } from \"next/font/google\"\nimport { Butcherman } from \"next/font/google\"\nimport { Chela_One } from \"next/font/google\"\nimport { Creepster } from \"next/font/google\"\nimport { Eater } from \"next/font/google\"\nimport { Fascinate } from \"next/font/google\"\nimport { Fredoka as Fredoka_One } from \"next/font/google\"\nimport { Griffy } from \"next/font/google\"\nimport { IBM_Plex_Sans } from \"next/font/google\"\nimport { Inter } from \"next/font/google\"\nimport { JetBrains_Mono } from \"next/font/google\"\nimport { Lacquer } from \"next/font/google\"\nimport { Megrim } from \"next/font/google\"\nimport { Merriweather } from \"next/font/google\"\nimport { Monoton } from \"next/font/google\"\nimport { Montserrat } from \"next/font/google\"\nimport { Nosifer } from \"next/font/google\"\nimport { Orbitron } from \"next/font/google\"\nimport { Pirata_One } from \"next/font/google\"\nimport { Playfair_Display } from \"next/font/google\"\nimport { Poppins } from \"next/font/google\"\nimport { Righteous } from \"next/font/google\"\nimport { Roboto } from \"next/font/google\"\nimport { Shrikhand } from \"next/font/google\"\nimport { Snowburst_One } from \"next/font/google\"\nimport { Source_Code_Pro } from \"next/font/google\"\nimport { Vampiro_One } from \"next/font/google\"\nimport { Wallpoet } from \"next/font/google\"\nimport { Zeyada } from \"next/font/google\"\nimport { motion } from \"framer-motion\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Initialize professional fonts\nconst inter = Inter({ subsets: [\"latin\"] })\nconst roboto = Roboto({\n  weight: [\"300\", \"400\", \"500\", \"700\"],\n  subsets: [\"latin\"],\n})\nconst poppins = Poppins({\n  weight: [\"300\", \"400\", \"500\", \"600\", \"700\"],\n  subsets: [\"latin\"],\n})\nconst montserrat = Montserrat({ subsets: [\"latin\"] })\nconst playfairDisplay = Playfair_Display({ subsets: [\"latin\"] })\nconst merriweather = Merriweather({\n  weight: [\"300\", \"400\", \"700\"],\n  subsets: [\"latin\"],\n})\nconst jetbrainsMono = JetBrains_Mono({ subsets: [\"latin\"] })\nconst sourceCodePro = Source_Code_Pro({ subsets: [\"latin\"] })\nconst ibmPlexSans = IBM_Plex_Sans({\n  weight: [\"300\", \"400\", \"500\", \"600\"],\n  subsets: [\"latin\"],\n})\n\n// Initialize abstract/distinctive fonts\nconst orbitron = Orbitron({ subsets: [\"latin\"] })\nconst righteous = Righteous({ weight: \"400\", subsets: [\"latin\"] })\nconst fredokaOne = Fredoka_One({ weight: \"400\", subsets: [\"latin\"] })\nconst bungee = Bungee({ weight: \"400\", subsets: [\"latin\"] })\nconst monoton = Monoton({ weight: \"400\", subsets: [\"latin\"] })\nconst creepster = Creepster({ weight: \"400\", subsets: [\"latin\"] })\nconst fascinate = Fascinate({ weight: \"400\", subsets: [\"latin\"] })\nconst griffy = Griffy({ weight: \"400\", subsets: [\"latin\"] })\nconst megrim = Megrim({ weight: \"400\", subsets: [\"latin\"] })\nconst wallpoet = Wallpoet({ weight: \"400\", subsets: [\"latin\"] })\nconst zeyada = Zeyada({ weight: \"400\", subsets: [\"latin\"] })\nconst shrikhand = Shrikhand({ weight: \"400\", subsets: [\"latin\"] })\nconst vampiroOne = Vampiro_One({ weight: \"400\", subsets: [\"latin\"] })\nconst butcherman = Butcherman({ weight: \"400\", subsets: [\"latin\"] })\nconst nosifer = Nosifer({ weight: \"400\", subsets: [\"latin\"] })\nconst eater = Eater({ weight: \"400\", subsets: [\"latin\"] })\nconst lacquer = Lacquer({ weight: \"400\", subsets: [\"latin\"] })\nconst pirataOne = Pirata_One({ weight: \"400\", subsets: [\"latin\"] })\nconst snowburstOne = Snowburst_One({ weight: \"400\", subsets: [\"latin\"] })\nconst chelaOne = Chela_One({ weight: \"400\", subsets: [\"latin\"] })\n\n// Create font mapping array with mix of professional and abstract fonts\nconst fontClasses = [\n  // Professional fonts\n  inter.className,\n  roboto.className,\n  poppins.className,\n  montserrat.className,\n  playfairDisplay.className,\n  merriweather.className,\n  jetbrainsMono.className,\n  sourceCodePro.className,\n  ibmPlexSans.className,\n\n  // Abstract/distinctive fonts\n  orbitron.className,\n  righteous.className,\n  fredokaOne.className,\n  bungee.className,\n  monoton.className,\n  creepster.className,\n  fascinate.className,\n  griffy.className,\n  megrim.className,\n  wallpoet.className,\n  zeyada.className,\n  shrikhand.className,\n  vampiroOne.className,\n  butcherman.className,\n  nosifer.className,\n  eater.className,\n  lacquer.className,\n  pirataOne.className,\n  snowburstOne.className,\n  chelaOne.className,\n]\n\ninterface FontTransformProps {\n  children: string\n  className?: string\n  hoverDuration?: number\n}\n\nconst FontTransform = React.forwardRef<HTMLDivElement, FontTransformProps>(\n  ({ children, className, hoverDuration = 2000, ...props }, ref) => {\n    const characters = children.split(\"\")\n    const [characterStates, setCharacterStates] = React.useState<\n      Array<{ isTransformed: boolean; fontClass: string }>\n    >(() => characters.map(() => ({ isTransformed: false, fontClass: \"\" })))\n    const timeoutRefs = React.useRef<(NodeJS.Timeout | null)[]>([])\n\n    // Initialize timeout refs array\n    React.useEffect(() => {\n      timeoutRefs.current = new Array(characters.length).fill(null)\n    }, [characters.length])\n\n    const handleCharacterHover = (index: number) => {\n      // Clear any existing timeout for this character\n      if (timeoutRefs.current[index]) {\n        clearTimeout(timeoutRefs.current[index]!)\n      }\n\n      // Get a random font that's different from the current one\n      const currentFontClass = characterStates[index].fontClass\n      let randomFont\n      do {\n        randomFont = fontClasses[Math.floor(Math.random() * fontClasses.length)]\n      } while (randomFont === currentFontClass && fontClasses.length > 1)\n\n      // Update character state\n      setCharacterStates((prev) => {\n        const newStates = [...prev]\n        newStates[index] = { isTransformed: true, fontClass: randomFont }\n        return newStates\n      })\n\n      // Set timeout to revert font after specified duration\n      timeoutRefs.current[index] = setTimeout(() => {\n        setCharacterStates((prev) => {\n          const newStates = [...prev]\n          newStates[index] = { isTransformed: false, fontClass: \"\" }\n          return newStates\n        })\n        timeoutRefs.current[index] = null\n      }, hoverDuration)\n    }\n\n    return (\n      <motion.div\n        ref={ref}\n        className={cn(\n          \"inline-flex flex-wrap items-baseline leading-relaxed\",\n          className\n        )}\n        style={{\n          textAlign: \"justify\",\n          textJustify: \"inter-character\",\n        }}\n        layout\n        transition={{\n          layout: {\n            type: \"spring\",\n            stiffness: 400,\n            damping: 30,\n            duration: 0.3,\n          },\n        }}\n        {...props}\n      >\n        {characters.map((char, index) => {\n          const state = characterStates[index]\n\n          return (\n            <motion.span\n              key={index}\n              className={cn(\n                \"inline-block cursor-default relative\",\n                char === \" \" ? \"w-[0.25em]\" : \"\",\n                state.isTransformed ? state.fontClass : \"\"\n              )}\n              layout\n              initial={{ scale: 1 }}\n              animate={{\n                scale: state.isTransformed ? 1.1 : 1,\n              }}\n              transition={{\n                layout: {\n                  type: \"spring\",\n                  stiffness: 400,\n                  damping: 30,\n                  duration: 0.3,\n                },\n                scale: {\n                  type: \"spring\",\n                  stiffness: 300,\n                  damping: 20,\n                  duration: 0.3,\n                },\n              }}\n              style={{\n                minWidth: char === \" \" ? \"0.25em\" : \"auto\",\n                display: \"inline-block\",\n                textAlign: \"center\",\n              }}\n              onMouseEnter={() => handleCharacterHover(index)}\n              whileHover={{\n                scale: state.isTransformed ? 1.15 : 1.05,\n                transition: { duration: 0.1 },\n              }}\n            >\n              {char === \" \" ? \"\\u00A0\" : char}\n            </motion.span>\n          )\n        })}\n      </motion.div>\n    )\n  }\n)\n\nFontTransform.displayName = \"FontTransform\"\n\nexport { FontTransform }\n",
      "type": "registry:component"
    }
  ]
}
