{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tags-input",
  "type": "registry:component",
  "title": "Tags Input",
  "description": "A component for tags-input",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "delta/components/tags-input.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { X as PhosphorX } from \"@phosphor-icons/react\"\nimport { cn } from \"@/lib/utils\"\nimport type { z } from \"zod\"\n\nexport type TagTriggerKey = \"Enter\" | \"Space\" | \"Comma\"\n\nexport interface TagsInputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, \"onChange\"> {\n  /** The label for the input field */\n  label: string\n  /** The name of the input field (used for form submission) */\n  name: string\n  /** Optional description text to display below the label */\n  description?: string\n  /** Optional hint text to display below the input */\n  hint?: string\n  /** Error message to display (typically from Zod validation) */\n  error?: string\n  /** Whether the field is required */\n  required?: boolean\n  /** Whether the field is in a loading/pending state */\n  pending?: boolean\n  /** Container className for the entire component */\n  containerClassName?: string\n  /** Label className for customizing the label */\n  labelClassName?: string\n  /** Label variant - 'default' or 'muted' */\n  labelVariant?: \"default\" | \"muted\"\n  /** Input variant - 'default' or 'pill' */\n  variant?: \"default\" | \"pill\"\n  /** Whether to show a colored border (only applies to pill variant) */\n  coloredBorder?: boolean\n  /** Default value for the tags */\n  defaultValue?: string[]\n  /** Current value for the tags (controlled component) */\n  value?: string[]\n  /** Callback when tags change */\n  onChange?: (tags: string[]) => void\n  /** Key that triggers tag addition - defaults to Enter */\n  triggerKey?: TagTriggerKey\n  /** Zod schema for validation (optional - can be handled at the form level) */\n  schema?: z.ZodType<string[]>\n  /** Callback when validation occurs */\n  onValidate?: (isValid: boolean, value: string[], error?: string) => void\n}\n\nexport function TagsInput({\n  label,\n  name,\n  description,\n  hint,\n  error,\n  required = false,\n  pending = false,\n  defaultValue,\n  containerClassName,\n  labelClassName,\n  labelVariant = \"default\",\n  variant = \"default\",\n  coloredBorder = false,\n  triggerKey = \"Enter\",\n  schema,\n  onValidate,\n  className,\n  id = name,\n  value,\n  onChange,\n  ...props\n}: TagsInputProps) {\n  const [inputValue, setInputValue] = React.useState(\"\")\n  const [localTags, setLocalTags] = React.useState<string[]>(value || defaultValue || [])\n  const [localError, setLocalError] = React.useState<string | undefined>(error)\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n  const hasError = !!localError || !!error\n  const errorId = `error-${id}`\n  const hintId = `hint-${id}`\n\n  // Determine if component is controlled or uncontrolled\n  const isControlled = value !== undefined\n\n  // Update local tags when value prop changes (for controlled component)\n  React.useEffect(() => {\n    if (isControlled && JSON.stringify(value) !== JSON.stringify(localTags)) {\n      setLocalTags(value || [])\n    }\n  }, [value, isControlled, localTags])\n\n  // Update local error when prop changes\n  React.useEffect(() => {\n    setLocalError(error)\n  }, [error])\n\n  // Handle validation with the provided schema\n  const validateTags = React.useCallback(\n    (tags: string[]) => {\n      if (!schema) return\n\n      const result = schema.safeParse(tags)\n      if (!result.success) {\n        const errorMessage = result.error.errors[0]?.message || \"Invalid input\"\n        setLocalError(errorMessage)\n        onValidate?.(false, tags, errorMessage)\n      } else {\n        setLocalError(undefined)\n        onValidate?.(true, tags)\n      }\n    },\n    [schema, onValidate],\n  )\n\n  const updateTags = (newTags: string[]) => {\n    if (isControlled) {\n      // For controlled component, just call onChange\n      onChange?.(newTags)\n    } else {\n      // For uncontrolled, update internal state\n      setLocalTags(newTags)\n      onChange?.(newTags)\n    }\n\n    // Validate if schema is provided\n    if (schema) {\n      validateTags(newTags)\n    }\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value\n    // Only handle comma as a special case in the onChange handler\n    if (triggerKey === \"Comma\" && value.endsWith(\",\")) {\n      const newTag = value.slice(0, -1).trim()\n      if (newTag && !localTags.includes(newTag)) {\n        const newTags = [...localTags, newTag]\n        updateTags(newTags)\n        setInputValue(\"\")\n      } else {\n        setInputValue(\"\")\n      }\n    } else {\n      setInputValue(value)\n    }\n  }\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    // Handle the selected trigger key\n    if (\n      (triggerKey === \"Enter\" && e.key === \"Enter\") ||\n      (triggerKey === \"Space\" && e.key === \" \") ||\n      (triggerKey === \"Comma\" && e.key === \",\")\n    ) {\n      e.preventDefault()\n      const newTag = inputValue.trim()\n      if (newTag && !localTags.includes(newTag)) {\n        const newTags = [...localTags, newTag]\n        updateTags(newTags)\n      }\n      setInputValue(\"\")\n    } else if (e.key === \"Backspace\" && !inputValue && localTags.length > 0) {\n      // Always allow backspace to remove the last tag when input is empty\n      const newTags = localTags.slice(0, -1)\n      updateTags(newTags)\n    }\n  }\n\n  const removeTag = (tagToRemove: string) => {\n    const newTags = localTags.filter((tag) => tag !== tagToRemove)\n    updateTags(newTags)\n  }\n\n  const handleBlur = () => {\n    // Add tag on blur if there's input\n    const newTag = inputValue.trim()\n    if (newTag && !localTags.includes(newTag)) {\n      const newTags = [...localTags, newTag]\n      updateTags(newTags)\n      setInputValue(\"\")\n    }\n\n    // Validate on blur\n    if (schema) {\n      validateTags(localTags)\n    }\n  }\n\n  // Get the trigger key display text for the placeholder\n  const getTriggerKeyText = () => {\n    switch (triggerKey) {\n      case \"Enter\":\n        return \"Enter\"\n      case \"Space\":\n        return \"Space\"\n      case \"Comma\":\n        return \"comma\"\n      default:\n        return \"Enter\"\n    }\n  }\n\n  return (\n    <div className={cn(\"group/field grid gap-2\", containerClassName)} data-invalid={hasError}>\n      <label\n        htmlFor={id}\n        className={cn(\n          \"text-sm font-normal leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-data-[invalid=true]/field:text-destructive\",\n          labelVariant === \"muted\" && \"text-muted-foreground\",\n          labelClassName,\n        )}\n      >\n        {label}\n        {required && <span aria-hidden=\"true\"> *</span>}\n      </label>\n\n      {description && <p className=\"text-xs text-muted-foreground\">{description}</p>}\n\n      {/* Input container - styled like TextInput */}\n      <input\n        ref={inputRef}\n        type=\"text\"\n        id={id}\n        name={name}\n        value={inputValue}\n        onChange={handleInputChange}\n        onKeyDown={handleKeyDown}\n        onBlur={handleBlur}\n        disabled={pending || props.disabled}\n        aria-invalid={hasError}\n        aria-errormessage={hasError ? errorId : undefined}\n        aria-describedby={hint ? hintId : undefined}\n        aria-required={required}\n        className={cn(\n          // Default variant styling\n          'h-[46px] md:text-md text-md focus-visible:outline-none focus-visible:ring-2 bg-background focus-visible:ring-[#4E90F9] dark:ring-offset-black ring-offset-white',\n          variant === \"default\" &&\n            \"shadow-[0px_2px_2px_rgba(0,0,0,0.03),_0px_4px_7px_rgba(0,0,0,0.02)] border border-input rounded-md px-3\",\n\n          // Pill variant styling\n          variant === \"pill\" && \"bg-muted border-0 rounded-lg h-12 px-4 focus:ring-offset-2\",\n          variant === \"pill\" && coloredBorder && \"border-2 border-primary\",\n          variant === \"pill\" && \"placeholder:text-muted-foreground\",\n\n          // Error styling for both variants\n          \"group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive\",\n          className,\n        )}\n        placeholder={props.placeholder || `Type and press ${getTriggerKeyText()} to add tags`}\n        {...props}\n      />\n\n      {/* Tags container - completely separate from input */}\n      {localTags.length > 0 && (\n        <div className=\"flex flex-wrap gap-2 mt-1\">\n          {localTags.map((tag) => (\n            <div\n              key={tag}\n              className={cn(\n                \"flex items-center gap-1 px-2 py-1 text-sm bg-secondary\",\n                variant === \"pill\" ? \"rounded-lg\" : \"rounded-md\",\n              )}\n            >\n              <span>{tag}</span>\n              <button\n                type=\"button\"\n                onClick={() => removeTag(tag)}\n                className=\"text-muted-foreground hover:text-foreground\"\n                disabled={pending || props.disabled}\n                aria-label={`Remove ${tag}`}\n              >\n                <PhosphorX className=\"h-3 w-3\" weight=\"bold\" />\n              </button>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {hint && !hasError && (\n        <p id={hintId} className=\"text-xs text-muted-foreground mt-1\">\n          {hint}\n        </p>\n      )}\n\n      {hasError && (\n        <p id={errorId} className=\"text-destructive text-xs\">\n          {localError || error}\n        </p>\n      )}\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "delta/components/tags-input.tsx"
    },
    {
      "path": "delta/examples/tags-input-basic-demo.tsx",
      "content": "\"use client\"\n\nimport {TagsInput} from \"@/delta/components/tags-input\"\n\nexport default function TagsInputBasicDemo() {\n  return (\n    <div className=\"max-w-md mx-auto\">\n      <TagsInput\n        label=\"Tags\"\n        name=\"tags\"\n        placeholder=\"Add tags...\"\n        description=\"Add tags by pressing enter\"\n        hint=\"Press backspace to remove the last tag\"\n      />\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "delta/examples/tags-input-basic-demo.tsx"
    },
    {
      "path": "content/docs/tags-input.mdx",
      "content": "export const metadata = {\n  title: 'TagsInput | Delta Components',\n  description: 'A versatile tags input component that allows users to add and remove tags with keyboard support. Features include validation, error handling, and various styling options.',\n\n  // Keywords help with SEO\n  keywords: ['shadcn/ui', 'react', 'tags input', 'form components', 'react components', 'delta components', 'nextjs components', 'tailwind components', 'form validation'],\n\n  // Canonical URL to prevent duplicate content issues\n  alternates: {\n    canonical: 'https://deltacomponents.dev/docs/tags-input',\n  },\n\n  // Category helps with structured data\n  category: 'component',\n\n  openGraph: {\n    title: 'TagsInput Component | Delta Components',\n    description: 'A versatile tags input component that allows users to add and remove tags with keyboard support. Features include validation, error handling, and various styling options.',\n    type: 'article',\n    url: 'https://deltacomponents.dev/docs/tags-input',\n    images: [\n      {\n        url: 'https://deltacomponents.dev/og/tags-input.png',\n        width: 1200,\n        height: 630,\n        alt: 'Tags Input Component Preview showing different variants and states'\n      }\n    ],\n    // Article specific OpenGraph metadata\n    article: {\n      authors: ['Patrick Prunty'],\n      tags: ['UI Components', 'React', 'Form', 'Input', 'Validation'],\n      section: 'Components'\n    },\n    siteName: 'Delta Components'\n  }\n}\n\n# TagsInput\n\nA versatile tags input component that allows users to add and remove tags with keyboard support. Features include validation, error handling, and various styling options.\n\n## Basic Usage\n\n<ComponentTabs name=\"tags-input-basic\" />\n\n<InstallationInstructions componentName=\"tags-input\" />\n\n## Features\n\n- **Keyboard Support**: Add tags using Enter, Space, or Comma keys\n- **Tag Removal**: Remove tags by clicking the X button or using Backspace\n- **Validation Support**: Built-in error handling and validation with Zod\n- **Customizable**: Supports custom styling and variants\n- **Accessibility**: Fully accessible with proper ARIA attributes\n- **Flexible Input**: Supports both controlled and uncontrolled usage\n- **Form Integration**: Works seamlessly with Smart Form component\n- **Loading State**: Supports pending/loading state\n- **Label Variants**: Supports default and muted label styles\n- **Colored Border**: Optional colored border for pill variant\n\n## Props\n\n<Table>\n  <TableHeader>\n    <TableRow>\n      <TableHead>Prop</TableHead>\n      <TableHead>Type</TableHead>\n      <TableHead>Default</TableHead>\n      <TableHead>Description</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell>`name`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>The name of the input field (used for form submission)</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`description`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Optional description text to display below the label</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`hint`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Optional hint text to display below the input</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`error`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Error message to display (typically from Zod validation)</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`required`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether the field is required</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`pending`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether the field is in a loading/pending state</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`containerClassName`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Container className for the entire component</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`labelClassName`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Label className for customizing the label</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`labelVariant`</TableCell>\n      <TableCell>`'default' | 'muted'`</TableCell>\n      <TableCell>`'default'`</TableCell>\n      <TableCell>Label variant - 'default' or 'muted'</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`variant`</TableCell>\n      <TableCell>`'default' | 'pill'`</TableCell>\n      <TableCell>`'default'`</TableCell>\n      <TableCell>Input variant - 'default' or 'pill'</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`coloredBorder`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether to show a colored border (only applies to pill variant)</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`defaultValue`</TableCell>\n      <TableCell>`string[]`</TableCell>\n      <TableCell>`[]`</TableCell>\n      <TableCell>Default value for the tags</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`value`</TableCell>\n      <TableCell>`string[]`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Current value for the tags (controlled component)</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`onChange`</TableCell>\n      <TableCell>`(tags: string[]) => void`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Callback when tags change</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`triggerKey`</TableCell>\n      <TableCell>`'Enter' | 'Space' | 'Comma'`</TableCell>\n      <TableCell>`'Enter'`</TableCell>\n      <TableCell>Key that triggers tag addition</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`schema`</TableCell>\n      <TableCell>`z.ZodType<string[]>`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Zod schema for validation (optional - can be handled at the form level)</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`onValidate`</TableCell>\n      <TableCell>`(isValid: boolean, value: string[], error?: string) => void`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Callback when validation occurs</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n\n## Examples\n\n### Basic Usage\n\n```tsx\nimport { TagsInput } from \"@/components/ui/tags-input\"\n\nexport default function Example() {\n  return (\n    <TagsInput\n      label=\"Tags\"\n      name=\"tags\"\n      placeholder=\"Add tags...\"\n    />\n  )\n}\n```\n\n### With Validation\n\n```tsx\nimport { TagsInput } from \"@/components/ui/tags-input\"\nimport { z } from \"zod\"\n\nconst schema = z.array(z.string())\n  .min(1, \"At least one tag is required\")\n  .max(5, \"Maximum 5 tags allowed\")\n\nexport default function ValidationExample() {\n  return (\n    <TagsInput\n      label=\"Tags\"\n      name=\"tags\"\n      schema={schema}\n      hint=\"Add up to 5 tags\"\n    />\n  )\n}\n```\n\n### Pill Variant with Colored Border\n\n```tsx\nimport { TagsInput } from \"@/components/ui/tags-input\"\n\nexport default function Example() {\n  return (\n    <TagsInput\n      label=\"Tags\"\n      name=\"tags\"\n      variant=\"pill\"\n      coloredBorder={true}\n      placeholder=\"Add tags...\"\n    />\n  )\n}\n```\n\n### With Loading State\n\n```tsx\nimport { TagsInput } from \"@/components/ui/tags-input\"\nimport { useState } from \"react\"\n\nexport default function LoadingExample() {\n  const [pending, setPending] = useState(false)\n  \n  return (\n    <TagsInput\n      label=\"Tags\"\n      name=\"tags\"\n      pending={pending}\n      placeholder=\"Add tags...\"\n    />\n  )\n}\n```\n\n### With Smart Form\n\n```tsx\nimport { SmartForm } from \"@/components/ui/smart-form\"\nimport { z } from \"zod\"\n\nconst schema = z.object({\n  tags: z.array(z.string())\n    .min(1, \"At least one tag is required\")\n    .max(5, \"Maximum 5 tags allowed\")\n})\n\nconst fields = [\n  {\n    type: \"tags\",\n    name: \"tags\",\n    label: \"Tags\",\n    description: \"Add tags by pressing space, comma, or enter\",\n    hint: \"Press backspace to remove the last tag\",\n    variant: \"pill\",\n    triggerKey: \"Enter\",\n    required: true\n  }\n]\n\nexport default function SmartFormExample() {\n  return (\n    <SmartForm\n      fields={fields}\n      schema={schema}\n      onSubmit={(data) => console.log(data)}\n    />\n  )\n}\n```\n\n## Accessibility\n\nThe TagsInput component is built with accessibility in mind:\n\n- Proper labeling and ARIA attributes\n- Support for required field indicators\n- Error messages are properly associated with the input\n- Keyboard navigation support\n- Clear focus states for keyboard users\n- Proper button roles for tag removal\n- Support for screen readers\n- Proper color contrast ratios\n- Disabled state handling\n- Loading state indicators\n",
      "type": "registry:component",
      "target": "content/docs/tags-input.mdx"
    }
  ]
}
