{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bottom-bar",
  "type": "registry:component",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "dependencies": ["@phosphor-icons/react", "clsx", "framer-motion"],
  "files": [
    {
      "path": "registry/layout/bottom-bar.tsx",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport { memo, useCallback, useState } from \"react\"\nimport type { FC } from \"react\"\nimport Link from \"next/link\"\nimport { usePathname } from \"next/navigation\"\nimport type { IconProps } from \"@phosphor-icons/react\"\nimport { Plus } from \"@phosphor-icons/react\"\nimport clsx from \"clsx\"\nimport { AnimatePresence, motion } from \"framer-motion\"\n\n// Route interface\ninterface Route {\n  href: string\n  label: string\n  icon: React.ForwardRefExoticComponent<IconProps>\n}\n\n// Animation styles defined inline for maintainability\nconst animationStyles = `\n  @keyframes icon-pulse {\n    0% { transform: scale(1); }\n    50% { transform: scale(1.1); }\n    100% { transform: scale(1); }\n  }\n  .icon-pulse { animation: icon-pulse 0.3s ease-in-out; }\n  .icon-container { transition: transform 0.2s ease-in-out; }\n`\n\ninterface BarItemProps {\n  href: string\n  label: string\n  Icon?: React.ForwardRefExoticComponent<IconProps>\n  isActive: boolean\n  showLabels: boolean\n  onItemClick: () => void\n  animationKey: number\n}\n\nconst BarItem = memo(\n  ({\n    href,\n    label,\n    Icon,\n    isActive,\n    showLabels,\n    onItemClick,\n    animationKey,\n  }: BarItemProps) => {\n    return (\n      <li className=\"flex-1\">\n        <Link\n          href={href}\n          className={clsx(\n            \"flex flex-col items-center justify-center w-full h-full px-1\",\n            showLabels ? \"py-2\" : \"py-4\"\n          )}\n          onClick={(e) => {\n            if (isActive) {\n              e.preventDefault()\n              window.scrollTo({\n                top: 0,\n                behavior: \"smooth\",\n              })\n            }\n            onItemClick()\n          }}\n        >\n          <motion.div\n            key={animationKey}\n            className=\"flex flex-col items-center\"\n            initial={{ scale: 1 }}\n            animate={isActive ? { scale: [1, 1.1, 1] } : { scale: 1 }}\n            transition={{ duration: 0.3, ease: \"easeInOut\" }}\n          >\n            {Icon && (\n              <motion.div\n                className=\"icon-container\"\n                whileTap={{ scale: 0.95 }}\n                transition={{ duration: 0.1 }}\n              >\n                <Icon\n                  weight={isActive ? \"fill\" : \"regular\"}\n                  className={clsx(\n                    \"w-7 h-7\",\n                    isActive ? \"text-primary\" : \"text-muted-foreground\"\n                  )}\n                />\n              </motion.div>\n            )}\n            {showLabels && (\n              <motion.span\n                className={clsx(\n                  \"text-[10px] leading-tight text-center mt-1.5\",\n                  isActive ? \"text-primary\" : \"text-muted-foreground\"\n                )}\n                initial={{ opacity: 0.8 }}\n                animate={{ opacity: isActive ? 1 : 0.8 }}\n                transition={{ duration: 0.2 }}\n              >\n                {label}\n              </motion.span>\n            )}\n          </motion.div>\n        </Link>\n      </li>\n    )\n  }\n)\n\nBarItem.displayName = \"BarItem\"\n\n// Update CenterButtonConfig\ninterface CenterButtonConfig {\n  onClick: () => void\n  label?: string\n}\n\n// Update CenterButtonProps\ninterface CenterButtonProps {\n  onClick: () => void\n  label?: string\n  showLabels: boolean\n  animationKey: number\n}\n\n// Update CenterButton component\nconst CenterButton = memo(\n  ({ onClick, label, showLabels, animationKey }: CenterButtonProps) => {\n    return (\n      <li className=\"flex-none -mt-5 z-10\">\n        <button\n          onClick={onClick}\n          className=\"flex flex-col items-center justify-center\"\n          aria-label={label || \"Add\"}\n        >\n          <motion.div\n            key={animationKey}\n            className=\"flex flex-col items-center\"\n            initial={{ scale: 1 }}\n            animate={{ scale: [1, 1.1, 1] }}\n            transition={{ duration: 0.3, ease: \"easeInOut\" }}\n          >\n            <motion.div\n              className=\"p-3.5 rounded-full bg-primary shadow-lg transition-colors\"\n              whileHover={{\n                scale: 1.05,\n                backgroundColor: \"var(--primary-hover, var(--primary))\",\n              }}\n              whileTap={{ scale: 0.95 }}\n              transition={{ duration: 0.1 }}\n            >\n              <Plus weight=\"bold\" className=\"w-6 h-6 text-primary-foreground\" />\n            </motion.div>\n            {showLabels && label && (\n              <motion.span\n                className=\"text-[10px] leading-tight text-center mt-1.5 text-primary\"\n                initial={{ opacity: 0.8 }}\n                animate={{ opacity: 1 }}\n                transition={{ duration: 0.2 }}\n              >\n                {label}\n              </motion.span>\n            )}\n          </motion.div>\n        </button>\n      </li>\n    )\n  }\n)\n\nCenterButton.displayName = \"CenterButton\"\n\ninterface BottomBarProps {\n  routes?: Route[]\n  showLabels?: boolean\n  centerButton?: CenterButtonConfig\n  showBorderTop?: boolean\n}\n\nconst BottomBar: FC<BottomBarProps> = memo(function BottomBar({\n  routes = [],\n  showLabels = false,\n  centerButton,\n  showBorderTop = true,\n}) {\n  const pathname = usePathname()\n  const [animationKeys, setAnimationKeys] = useState<Record<string, number>>({})\n\n  const handleItemClick = useCallback((href: string) => {\n    setAnimationKeys((prev) => ({\n      ...prev,\n      [href]: (prev[href] || 0) + 1,\n    }))\n  }, [])\n\n  const handleCenterButtonClick = useCallback(() => {\n    setAnimationKeys((prev) => ({\n      ...prev,\n      centerButton: (prev.centerButton || 0) + 1,\n    }))\n    centerButton?.onClick()\n  }, [centerButton])\n\n  // Split routes into two halves for layout with center button\n  const halfLength = Math.ceil(routes.length / 2)\n  const firstHalf = routes.slice(0, halfLength)\n  const secondHalf = routes.slice(halfLength)\n\n  return (\n    <>\n      {/* Inline styles for maintainability */}\n      <style jsx>{animationStyles}</style>\n\n      <motion.nav\n        className={clsx(\n          \"block md:hidden fixed py-1 bottom-0 left-0 right-0 z-50 backdrop-blur backdrop-blur-lg supports-[backdrop-filter]:bg-background/85\",\n          showBorderTop && \"border-t border-border\"\n        )}\n        initial={{ y: 100, opacity: 0 }}\n        animate={{ y: 0, opacity: 1 }}\n        transition={{ duration: 0.3, ease: \"easeOut\" }}\n      >\n        <ul className=\"flex justify-around items-center relative\">\n          {centerButton ? (\n            <>\n              {/* First half of navigation items */}\n              {firstHalf.map(({ href, label, icon: Icon }) => (\n                <BarItem\n                  key={href}\n                  href={href}\n                  label={label}\n                  Icon={Icon}\n                  isActive={pathname === href}\n                  showLabels={showLabels}\n                  onItemClick={() => handleItemClick(href)}\n                  animationKey={animationKeys[href] || 0}\n                />\n              ))}\n\n              {/* Center button */}\n              <CenterButton\n                onClick={handleCenterButtonClick}\n                label={centerButton.label}\n                showLabels={showLabels}\n                animationKey={animationKeys.centerButton || 0}\n              />\n\n              {/* Second half of navigation items */}\n              {secondHalf.map(({ href, label, icon: Icon }) => (\n                <BarItem\n                  key={href}\n                  href={href}\n                  label={label}\n                  Icon={Icon}\n                  isActive={pathname === href}\n                  showLabels={showLabels}\n                  onItemClick={() => handleItemClick(href)}\n                  animationKey={animationKeys[href] || 0}\n                />\n              ))}\n            </>\n          ) : (\n            // Original layout without center button\n            routes.map(({ href, label, icon: Icon }) => (\n              <BarItem\n                key={href}\n                href={href}\n                label={label}\n                Icon={Icon}\n                isActive={pathname === href}\n                showLabels={showLabels}\n                onItemClick={() => handleItemClick(href)}\n                animationKey={animationKeys[href] || 0}\n              />\n            ))\n          )}\n        </ul>\n      </motion.nav>\n    </>\n  )\n})\n\nBottomBar.displayName = \"BottomBar\"\n\nexport default BottomBar\n",
      "type": "registry:component",
      "target": "/components/delta/layout/bottom-bar.tsx"
    }
  ]
}
