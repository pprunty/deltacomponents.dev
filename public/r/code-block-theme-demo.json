{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-block-theme-demo",
  "type": "registry:block",
  "registryDependencies": ["https://deltacomponents.dev/r/code-block.json"],
  "files": [
    {
      "path": "registry/examples/code-block-theme-demo.tsx",
      "content": "\"use client\"\n\nimport React, { useState } from \"react\";\nimport CodeBlock, { ThemeOption } from \"@/registry/media/code-block\";\n\nexport default function CodeBlockThemeDemo() {\n  const [selectedTheme, setSelectedTheme] = useState<ThemeOption>(\"vitesse\");\n  \n  const tsCode = `// TypeScript example with generics\nfunction identity<T>(arg: T): T {\n  return arg;\n}\n\n// Usage with type inference\nconst output = identity(\"myString\");\n// const output: string\n\n// Usage with explicit type parameter\nconst numOutput = identity<number>(42);\n// const numOutput: number\n\ninterface User {\n  id: number;\n  name: string;\n}\n\n// Function with multiple type parameters\nfunction process<T, U>(value: T, handler: (x: T) => U): U {\n  return handler(value);\n}\n\nconst user: User = { id: 1, name: \"Alice\" };\nconst userName = process(user, (u) => u.name);\n// const userName: string`;\n\n  const handleThemeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedTheme(e.target.value as ThemeOption);\n  };\n\n  return (\n    <div>\n      <div style={{ marginBottom: '16px' }}>\n        <label htmlFor=\"theme-select\">\n          Theme:\n        </label>\n        {' '}\n        <select\n          id=\"theme-select\"\n          value={selectedTheme}\n          onChange={handleThemeChange}\n        >\n          <option value=\"vitesse\">Vitesse</option>\n          <option value=\"github\">GitHub</option>\n          <option value=\"gruvbox\">Gruvbox</option>\n          <option value=\"plastic\">Plastic</option>\n          <option value=\"default\">Default</option>\n        </select>\n      </div>\n      \n      <CodeBlock\n        code={tsCode}\n        language=\"typescript\"\n        theme={selectedTheme}\n        showLineNumbers\n        showCopyButton\n        highlightLines={[2, 3, 4, 15, 16, 17, 18]}\n        border\n      />\n    </div>\n  );\n}\n",
      "type": "registry:block"
    }
  ]
}
