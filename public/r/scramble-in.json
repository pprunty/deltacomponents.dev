{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "scramble-in",
  "type": "registry:component",
  "title": "Scramble In",
  "description": "A component for scramble-in",
  "dependencies": [],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "delta/components/scramble-in.tsx",
      "content": "'use client';\n\nimport {\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'react';\n\nimport { cn } from '@/lib/utils';\n\ninterface ScrambleInProps {\n  text: string;\n  scrambleSpeed?: number;\n  scrambledLetterCount?: number;\n  characters?: string;\n  className?: string;\n  scrambledClassName?: string;\n  autoStart?: boolean;\n  useIntersectionObserver?: boolean;\n  retriggerOnIntersection?: boolean;\n  intersectionThreshold?: number;\n  intersectionRootMargin?: string;\n  onStart?: () => void;\n  onComplete?: () => void;\n}\n\nexport interface ScrambleInHandle {\n  start: () => void;\n  reset: () => void;\n}\n\nconst ScrambleIn = forwardRef<ScrambleInHandle, ScrambleInProps>(\n  (\n    {\n      text,\n      scrambleSpeed = 50,\n      scrambledLetterCount = 2,\n      characters = 'abcdefghijklmnopqrstuvwxyz!@#$%^&*()_+',\n      className = '',\n      scrambledClassName = '',\n      autoStart = true,\n      useIntersectionObserver = false,\n      retriggerOnIntersection = false,\n      intersectionThreshold = 0.3,\n      intersectionRootMargin = '0px',\n      onStart,\n      onComplete,\n    },\n    ref,\n  ) => {\n    const [displayText, setDisplayText] = useState('');\n    const [isAnimating, setIsAnimating] = useState(false);\n    const [visibleLetterCount, setVisibleLetterCount] = useState(0);\n    const [scrambleOffset, setScrambleOffset] = useState(0);\n    const containerRef = useRef<HTMLSpanElement>(null);\n    const hasCompletedOnce = useRef(false);\n\n    const startAnimation = useCallback(() => {\n      setIsAnimating(true);\n      setVisibleLetterCount(0);\n      setScrambleOffset(0);\n      onStart?.();\n    }, [onStart]);\n\n    const reset = useCallback(() => {\n      setIsAnimating(false);\n      setVisibleLetterCount(0);\n      setScrambleOffset(0);\n      setDisplayText('');\n      hasCompletedOnce.current = false;\n    }, []);\n\n    useImperativeHandle(ref, () => ({\n      start: startAnimation,\n      reset,\n    }));\n\n    // Handle Intersection Observer\n    useEffect(() => {\n      if (!useIntersectionObserver || !containerRef.current) return;\n\n      const observerOptions = {\n        root: null,\n        rootMargin: intersectionRootMargin,\n        threshold: intersectionThreshold,\n      };\n\n      const handleIntersection = (entries: IntersectionObserverEntry[]) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            if (!hasCompletedOnce.current || retriggerOnIntersection) {\n              startAnimation();\n            }\n\n            // If not set to retrigger, unobserve after first animation\n            if (!retriggerOnIntersection) {\n              observer.unobserve(entry.target);\n            }\n          }\n        });\n      };\n\n      const observer = new IntersectionObserver(\n        handleIntersection,\n        observerOptions,\n      );\n      observer.observe(containerRef.current);\n\n      return () => {\n        if (containerRef.current) {\n          observer.unobserve(containerRef.current);\n        }\n      };\n    }, [\n      useIntersectionObserver,\n      retriggerOnIntersection,\n      intersectionThreshold,\n      intersectionRootMargin,\n      startAnimation,\n    ]);\n\n    // Standard autoStart if not using intersection observer\n    useEffect(() => {\n      if (autoStart && !useIntersectionObserver) {\n        startAnimation();\n      }\n    }, [autoStart, useIntersectionObserver, startAnimation]);\n\n    useEffect(() => {\n      let interval: NodeJS.Timeout;\n\n      if (isAnimating) {\n        interval = setInterval(() => {\n          // Increase visible text length\n          if (visibleLetterCount < text.length) {\n            setVisibleLetterCount((prev) => prev + 1);\n          }\n          // Start sliding scrambled text out\n          else if (scrambleOffset < scrambledLetterCount) {\n            setScrambleOffset((prev) => prev + 1);\n          }\n          // Complete animation\n          else {\n            clearInterval(interval);\n            setIsAnimating(false);\n            hasCompletedOnce.current = true;\n            onComplete?.();\n          }\n\n          // Calculate how many scrambled letters we can show\n          const remainingSpace = Math.max(0, text.length - visibleLetterCount);\n          const currentScrambleCount = Math.min(\n            remainingSpace,\n            scrambledLetterCount,\n          );\n\n          // Generate scrambled text\n          const scrambledPart = Array(currentScrambleCount)\n            .fill(0)\n            .map(\n              () => characters[Math.floor(Math.random() * characters.length)],\n            )\n            .join('');\n\n          setDisplayText(text.slice(0, visibleLetterCount) + scrambledPart);\n        }, scrambleSpeed);\n      }\n\n      return () => {\n        if (interval) clearInterval(interval);\n      };\n    }, [\n      isAnimating,\n      text,\n      visibleLetterCount,\n      scrambleOffset,\n      scrambledLetterCount,\n      characters,\n      scrambleSpeed,\n      onComplete,\n    ]);\n\n    const renderText = () => {\n      const revealed = displayText.slice(0, visibleLetterCount);\n      const scrambled = displayText.slice(visibleLetterCount);\n\n      return (\n        <>\n          <span className={className}>{revealed}</span>\n          <span className={scrambledClassName}>{scrambled}</span>\n        </>\n      );\n    };\n\n    return (\n      <>\n        <span className=\"sr-only\">{text}</span>\n        <span\n          ref={containerRef}\n          className=\"inline-block whitespace-pre-wrap\"\n          aria-hidden=\"true\"\n        >\n          {renderText()}\n        </span>\n      </>\n    );\n  },\n);\n\nScrambleIn.displayName = 'ScrambleIn';\nexport default ScrambleIn;\n",
      "type": "registry:component",
      "target": "delta/components/scramble-in.tsx"
    },
    {
      "path": "delta/examples/scramble-in-basic-demo.tsx",
      "content": "'use client';\n\nimport ScrambleIn from '@/delta/components/scramble-in';\n\nexport default function ScrambleInBasicDemo() {\n  return (\n    <div className=\"flex items-center justify-center p-4\">\n      <ScrambleIn\n        text=\"Welcome to Delta Components\"\n        className=\"text-3xl font-bold\"\n        scrambledClassName=\"text-3xl font-bold\"\n        scrambleSpeed={50}\n        scrambledLetterCount={3}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/examples/scramble-in-basic-demo.tsx"
    },
    {
      "path": "content/docs/scramble-in.mdx",
      "content": "# ScrambleIn\n\nA text animation component that reveals text with a scramble effect.\n\n## Basic Usage\n\n<ComponentTabs name=\"scramble-in-basic\" />\n\n<InstallationInstructions componentName=\"scramble-in\" />\n\n## Props\n\n<Table>\n  <TableHeader>\n    <TableRow>\n      <TableHead>Name</TableHead>\n      <TableHead>Type</TableHead>\n      <TableHead>Default</TableHead>\n      <TableHead>Description</TableHead>\n    </TableRow>\n  </TableHeader>\n  <TableBody>\n    <TableRow>\n      <TableCell>`scrambleSpeed`</TableCell>\n      <TableCell>`number`</TableCell>\n      <TableCell>`50`</TableCell>\n      <TableCell>Speed of the scramble animation in milliseconds</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`scrambledLetterCount`</TableCell>\n      <TableCell>`number`</TableCell>\n      <TableCell>`2`</TableCell>\n      <TableCell>Number of letters to scramble at a time</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`characters`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>`'abcdefghijklmnopqrstuvwxyz!@#$%^&*()_+'`</TableCell>\n      <TableCell>Characters to use for scrambling</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`className`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Additional CSS classes for the revealed text</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`scrambledClassName`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Additional CSS classes for the scrambled text</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`autoStart`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`true`</TableCell>\n      <TableCell>Whether to start the animation automatically</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`useIntersectionObserver`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether to use Intersection Observer for animation trigger</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`retriggerOnIntersection`</TableCell>\n      <TableCell>`boolean`</TableCell>\n      <TableCell>`false`</TableCell>\n      <TableCell>Whether to retrigger animation on subsequent intersections</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`intersectionThreshold`</TableCell>\n      <TableCell>`number`</TableCell>\n      <TableCell>`0.3`</TableCell>\n      <TableCell>Threshold for intersection observer</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`intersectionRootMargin`</TableCell>\n      <TableCell>`string`</TableCell>\n      <TableCell>`'0px'`</TableCell>\n      <TableCell>Root margin for intersection observer</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`onStart`</TableCell>\n      <TableCell>`() => void`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Callback when animation starts</TableCell>\n    </TableRow>\n    <TableRow>\n      <TableCell>`onComplete`</TableCell>\n      <TableCell>`() => void`</TableCell>\n      <TableCell>-</TableCell>\n      <TableCell>Callback when animation completes</TableCell>\n    </TableRow>\n  </TableBody>\n</Table>\n\n## Intersection Observer Demo\n\nThe ScrambleIn component can be configured to trigger the animation when the text comes into view using the Intersection Observer API. This is perfect for scroll-based animations and page transitions.\n\n<ComponentTabs name=\"scramble-in-observer\" />\n\n## Features\n\n- Customizable animation speed\n- Configurable scramble effect\n- Intersection Observer support\n- Custom character sets\n- Callback support\n- Accessibility features\n\n## Usage\n\n```tsx\nimport ScrambleIn from \"@/delta/components/scramble-in\"\n\nexport default function ScrambleInDemo() {\n  return (\n    <ScrambleIn \n      text=\"Welcome to Delta Components\"\n      className=\"text-3xl font-bold\"\n      scrambledClassName=\"text-3xl font-bold\"\n      scrambleSpeed={50}\n      scrambledLetterCount={3}\n    />\n  )\n}\n```\n\n## Custom Styling\n\nYou can customize the text styles using Tailwind CSS classes:\n\n```tsx\n<ScrambleIn \n  text=\"Custom Style\"\n  className=\"text-4xl font-black text-blue-500\"\n  scrambledClassName=\"text-4xl font-black text-blue-500\"\n/>\n```\n\n## Accessibility\n\nThe ScrambleIn component includes proper ARIA attributes and maintains accessibility by:\n- Providing screen reader text\n- Preserving semantic meaning\n- Supporting keyboard navigation\n- Maintaining proper contrast\n",
      "type": "registry:component",
      "target": "content/docs/scramble-in.mdx"
    },
    {
      "path": "delta/examples/scramble-in-observer-demo.tsx",
      "content": "'use client';\n\nimport ScrambleIn from '@/delta/components/scramble-in';\n\nexport default function ScrambleInObserverDemo() {\n  return (\n    <div className=\"flex items-center justify-center p-4\">\n      <ScrambleIn\n        text=\"Scramble on Scroll\"\n        className=\"text-2xl font-bold\"\n        scrambledClassName=\"text-2xl font-bold\"\n        scrambleSpeed={30}\n        scrambledLetterCount={4}\n        useIntersectionObserver={true}\n        retriggerOnIntersection={true}\n        intersectionThreshold={0.5}\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/examples/scramble-in-observer-demo.tsx"
    }
  ]
}