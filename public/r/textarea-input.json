{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "textarea-input",
  "type": "registry:component",
  "author": "patrick prunty <https://www.patrickprunty.com>",
  "dependencies": [
    "zod"
  ],
  "files": [
    {
      "path": "registry/inputs/textarea-input.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport type { z } from \"zod\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Textarea } from \"@/components/ui/textarea\"\n\nexport interface TextareaInputProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  /** The label for the textarea field */\n  label: string\n  /** The name of the textarea field (used for form submission) */\n  name: string\n  /** Optional description text to display below the label */\n  description?: string\n  /** Optional hint text to display below the textarea */\n  hint?: string\n  /** Error message to display (typically from Zod validation) */\n  error?: string\n  /** Whether the field is required */\n  required?: boolean\n  /** Whether the field is in a loading/pending state */\n  pending?: boolean\n  /** Default value for the textarea */\n  defaultValue?: string\n  /** Container className for the entire component */\n  containerClassName?: string\n  /** Label className for customizing the label */\n  labelClassName?: string\n  /** Label variant - 'default' or 'muted' */\n  labelVariant?: \"default\" | \"muted\"\n  /** Textarea variant - 'default' or 'pill' */\n  variant?: \"default\" | \"pill\"\n  /** Whether to show a colored border (only applies to pill variant) */\n  coloredBorder?: boolean\n  /** Size of the textarea - 'sm', 'md', or 'lg' */\n  size?: \"sm\" | \"md\" | \"lg\"\n  /** Zod schema for validation (optional - can be handled at the form level) */\n  schema?: z.ZodType<string>\n  /** Callback when validation occurs */\n  onValidate?: (isValid: boolean, value: string, error?: string) => void\n  /** Whether to show active character count (e.g., \"432/500\") */\n  showActiveCount?: boolean\n}\n\n/**\n * TextareaInput component that integrates with Zod validation\n */\nexport function TextareaInput({\n  label,\n  name,\n  description,\n  hint,\n  error,\n  required = false,\n  pending = false,\n  defaultValue,\n  containerClassName,\n  labelClassName,\n  labelVariant = \"default\",\n  variant = \"default\",\n  coloredBorder = false,\n  size = \"md\",\n  schema,\n  onValidate,\n  showActiveCount = false,\n  className,\n  id = name,\n  value,\n  maxLength,\n  ...props\n}: TextareaInputProps) {\n  const [localError, setLocalError] = React.useState<string | undefined>(error)\n\n  // Helper to stringify value\n  const valueToString = (\n    val: string | number | readonly string[] | undefined\n  ): string => {\n    if (val == null) return \"\"\n    if (typeof val === \"string\") return val\n    if (typeof val === \"number\") return String(val)\n    if (Array.isArray(val)) return val.join(\"\")\n    return String(val)\n  }\n\n  const [currentValue, setCurrentValue] = React.useState<string>(\n    valueToString(value) || valueToString(defaultValue) || \"\"\n  )\n  const hasError = !!localError || !!error\n  const errorId = `error-${id}`\n  const hintId = `hint-${id}`\n\n  const isControlled = value !== undefined\n  const isMaxLengthReached =\n    maxLength !== undefined && currentValue.length >= maxLength\n\n  React.useEffect(() => {\n    setLocalError(error)\n  }, [error])\n\n  React.useEffect(() => {\n    if (isControlled && value !== undefined) {\n      setCurrentValue(valueToString(value))\n    }\n  }, [isControlled, value])\n\n  const validateTextarea = React.useCallback(\n    (val: string) => {\n      if (!schema) return\n      const result = schema.safeParse(val)\n      if (!result.success) {\n        const msg = result.error.errors[0]?.message || \"Invalid input\"\n        setLocalError(msg)\n        onValidate?.(false, val, msg)\n      } else {\n        setLocalError(undefined)\n        onValidate?.(true, val)\n      }\n    },\n    [schema, onValidate]\n  )\n\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const newValue = e.target.value\n    setCurrentValue(newValue)\n    schema && validateTextarea(newValue)\n    props.onChange?.(e)\n  }\n\n  const handleBlur = (e: React.FocusEvent<HTMLTextAreaElement>) => {\n    schema && validateTextarea(e.target.value)\n    props.onBlur?.(e)\n  }\n\n  const getHintText = () => {\n    if (maxLength !== undefined) {\n      const remaining = maxLength - currentValue.length\n      if (remaining <= 0) {\n        return `Maximum ${maxLength} characters reached`\n      }\n      if (showActiveCount) {\n        return `${currentValue.length}/${maxLength} characters`\n      }\n      return (\n        hint ||\n        `${remaining} character${remaining === 1 ? \"\" : \"s\"} remaining (${currentValue.length}/${maxLength})`\n      )\n    }\n    return hint\n  }\n\n  return (\n    <div\n      className={cn(\"group/field grid gap-2\", containerClassName)}\n      data-invalid={hasError}\n    >\n      <label\n        htmlFor={id}\n        className={cn(\n          \"text-sm font-normal leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-data-[invalid=true]/field:text-destructive\",\n          labelVariant === \"muted\" && \"text-muted-foreground\",\n          labelClassName\n        )}\n      >\n        {label}\n        {required && <span aria-hidden=\"true\"> *</span>}\n      </label>\n\n      {description && (\n        <p className=\"text-xs text-muted-foreground\">{description}</p>\n      )}\n\n      <Textarea\n        id={id}\n        name={name}\n        size={size}\n        maxLength={maxLength}\n        disabled={pending || props.disabled}\n        aria-invalid={hasError}\n        aria-errormessage={hasError ? errorId : undefined}\n        aria-describedby={hint ? hintId : undefined}\n        aria-required={required}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        {...(isControlled ? { value } : { defaultValue })}\n        {...props}\n        className={cn(\n          // Base\n          \"md:text-md text-md bg-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary dark:ring-offset-black ring-offset-white\",\n\n          // Default variant: add border and focus-border\n          variant === \"default\" &&\n            \"border border-input shadow-[0px_1px_1px_rgba(0,0,0,0.03),_0px_3px_6px_rgba(0,0,0,0.02)] focus-visible:border-primary focus-visible:ring-primary/20\",\n\n          // Pill variant\n          variant === \"pill\" &&\n            \"bg-muted border-0 rounded-lg px-4 py-3 focus-visible:ring-offset-background shadow-none\",\n          variant === \"pill\" && coloredBorder && \"border-2 border-primary\",\n          variant === \"pill\" && \"placeholder:text-muted-foreground\",\n\n          // Error override\n          \"group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive\",\n\n          // Hide scrollbar\n          \"scrollbar-hide\",\n\n          className\n        )}\n      />\n\n      {getHintText() && !hasError && (\n        <p\n          id={hintId}\n          className={cn(\n            \"text-xs mt-1\",\n            isMaxLengthReached\n              ? \"text-orange-600 dark:text-orange-400\"\n              : \"text-muted-foreground\"\n          )}\n        >\n          {getHintText()}\n        </p>\n      )}\n\n      {hasError && (\n        <p id={errorId} className=\"text-destructive text-xs\">\n          {localError || error}\n        </p>\n      )}\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "/components/delta/textarea-input.tsx"
    }
  ]
}