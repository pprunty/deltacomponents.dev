{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "textarea-input",
  "type": "registry:component",
  "title": "Textarea Input",
  "description": "A textarea component with validation, error handling, and various styling options",
  "dependencies": [
    "zod"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "path": "delta/forms/textarea-input.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { Textarea } from '@/components/ui/textarea';\nimport { cn } from '@/lib/utils';\nimport type { z } from 'zod';\n\nexport interface TextareaInputProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  /** The label for the textarea field */\n  label: string;\n  /** The name of the textarea field (used for form submission) */\n  name: string;\n  /** Optional description text to display below the label */\n  description?: string;\n  /** Optional hint text to display below the textarea */\n  hint?: string;\n  /** Error message to display (typically from Zod validation) */\n  error?: string;\n  /** Whether the field is required */\n  required?: boolean;\n  /** Whether the field is in a loading/pending state */\n  pending?: boolean;\n  /** Default value for the textarea */\n  defaultValue?: string;\n  /** Container className for the entire component */\n  containerClassName?: string;\n  /** Label className for customizing the label */\n  labelClassName?: string;\n  /** Label variant - 'default' or 'muted' */\n  labelVariant?: 'default' | 'muted';\n  /** Textarea variant - 'default' or 'pill' */\n  variant?: 'default' | 'pill';\n  /** Whether to show a colored border (only applies to pill variant) */\n  coloredBorder?: boolean;\n  /** Zod schema for validation (optional - can be handled at the form level) */\n  schema?: z.ZodType<string>;\n  /** Callback when validation occurs */\n  onValidate?: (isValid: boolean, value: string, error?: string) => void;\n}\n\n/**\n * TextareaInput component that integrates with Zod validation\n */\nexport function TextareaInput({\n  label,\n  name,\n  description,\n  hint,\n  error,\n  required = false,\n  pending = false,\n  defaultValue,\n  containerClassName,\n  labelClassName,\n  labelVariant = 'default',\n  variant = 'default',\n  coloredBorder = false,\n  schema,\n  onValidate,\n  className,\n  id = name,\n  value,\n  ...props\n}: TextareaInputProps) {\n  const [localError, setLocalError] = React.useState<string | undefined>(error);\n  const hasError = !!localError || !!error;\n  const errorId = `error-${id}`;\n  const hintId = `hint-${id}`;\n\n  // Determine if component is controlled or uncontrolled\n  const isControlled = value !== undefined;\n\n  // Update local error when prop changes\n  React.useEffect(() => {\n    setLocalError(error);\n  }, [error]);\n\n  // Handle validation with the provided schema\n  const validateTextarea = React.useCallback(\n    (value: string) => {\n      if (!schema) return;\n\n      const result = schema.safeParse(value);\n      if (!result.success) {\n        const errorMessage = result.error.errors[0]?.message || 'Invalid input';\n        setLocalError(errorMessage);\n        onValidate?.(false, value, errorMessage);\n      } else {\n        setLocalError(undefined);\n        onValidate?.(true, value);\n      }\n    },\n    [schema, onValidate],\n  );\n\n  // Handle textarea change\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const newValue = e.target.value;\n\n    // If we have a schema, validate on change\n    if (schema) {\n      validateTextarea(newValue);\n    }\n\n    // Call the original onChange if provided\n    props.onChange?.(e);\n  };\n\n  // Handle blur event for validation\n  const handleBlur = (e: React.FocusEvent<HTMLTextAreaElement>) => {\n    if (schema) {\n      validateTextarea(e.target.value);\n    }\n\n    // Call the original onBlur if provided\n    props.onBlur?.(e);\n  };\n\n  return (\n    <div\n      className={cn('group/field grid gap-2', containerClassName)}\n      data-invalid={hasError}\n    >\n      <label\n        htmlFor={id}\n        className={cn(\n          'text-sm font-semibold leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-data-[invalid=true]/field:text-destructive',\n          labelVariant === 'muted' && 'text-muted-foreground',\n          labelClassName,\n        )}\n      >\n        {label}\n        {required && <span aria-hidden=\"true\"> *</span>}\n      </label>\n\n      {description && (\n        <p className=\"text-xs text-muted-foreground\">{description}</p>\n      )}\n\n      <Textarea\n        id={id}\n        name={name}\n        disabled={pending || props.disabled}\n        aria-invalid={hasError}\n        aria-errormessage={hasError ? errorId : undefined}\n        aria-describedby={hint ? hintId : undefined}\n        aria-required={required}\n        className={cn(\n          // Default variant styling\n          variant === 'default' &&\n            'shadow-[0px_1px_1px_rgba(0,0,0,0.03),_0px_3px_6px_rgba(0,0,0,0.02)]',\n\n          // Pill variant styling - less rounded\n          variant === 'pill' && 'bg-muted border-0 rounded-lg px-4 py-3',\n          variant === 'pill' && coloredBorder && 'border-2 border-primary',\n          variant === 'pill' && 'placeholder:text-muted-foreground',\n\n          // Error styling for both variants\n          'group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive',\n          className,\n        )}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        // Only pass one of value or defaultValue, not both\n        {...(isControlled ? { value } : { defaultValue })}\n        {...props}\n      />\n\n      {hint && !hasError && (\n        <p id={hintId} className=\"text-xs text-muted-foreground mt-1\">\n          {hint}\n        </p>\n      )}\n\n      {hasError && (\n        <p id={errorId} className=\"text-destructive text-xs\">\n          {localError || error}\n        </p>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/forms/textarea-input.tsx"
    },
    {
      "path": "delta/forms/textarea-input-demo.tsx",
      "content": "'use client';\n\nimport { TextareaInput } from './textarea-input';\nimport { z } from 'zod';\n\nexport default function TextareaInputDemo() {\n  return (\n    <div className=\"container mx-auto max-w-7xl px-4 py-8 space-y-8\">\n      <DefaultTextareaInputDemo />\n      <PillTextareaInputDemo />\n      <ValidationTextareaInputDemo />\n      <MutedLabelTextareaInputDemo />\n      <RequiredTextareaInputDemo />\n      <DisabledTextareaInputDemo />\n      <HintTextareaInputDemo />\n      <RowsTextareaInputDemo />\n    </div>\n  );\n}\n\nexport function DefaultTextareaInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Default Textarea Input</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <TextareaInput\n          label=\"Message\"\n          name=\"message\"\n          placeholder=\"Enter your message\"\n        />\n        <TextareaInput\n          label=\"Bio\"\n          name=\"bio\"\n          placeholder=\"Tell us about yourself\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function PillTextareaInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Pill Variant</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <TextareaInput\n          label=\"Feedback\"\n          name=\"feedback\"\n          placeholder=\"Share your thoughts\"\n          variant=\"pill\"\n        />\n        <TextareaInput\n          label=\"Comments\"\n          name=\"comments\"\n          placeholder=\"Add your comments\"\n          variant=\"pill\"\n          coloredBorder\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function ValidationTextareaInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">With Validation</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <TextareaInput\n          label=\"Review\"\n          name=\"review\"\n          placeholder=\"Write your review\"\n          error=\"Review must be at least 10 characters\"\n          schema={z.string().min(10, 'Review must be at least 10 characters')}\n        />\n        <TextareaInput\n          label=\"Description\"\n          name=\"description\"\n          placeholder=\"Describe your product\"\n          error=\"Description must be between 20 and 500 characters\"\n          schema={z\n            .string()\n            .min(20, 'Description must be at least 20 characters')\n            .max(500, 'Description cannot exceed 500 characters')}\n          variant=\"pill\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function MutedLabelTextareaInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Muted Label Variant</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <TextareaInput\n          label=\"Notes\"\n          name=\"notes\"\n          placeholder=\"Add any additional notes\"\n          labelVariant=\"muted\"\n        />\n        <TextareaInput\n          label=\"Instructions\"\n          name=\"instructions\"\n          placeholder=\"Provide special instructions\"\n          labelVariant=\"muted\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function RequiredTextareaInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Required Fields</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <TextareaInput\n          label=\"Feedback\"\n          name=\"feedback-required\"\n          placeholder=\"Share your feedback\"\n          required\n        />\n        <TextareaInput\n          label=\"Cover Letter\"\n          name=\"cover-letter\"\n          placeholder=\"Introduce yourself\"\n          required\n          variant=\"pill\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function DisabledTextareaInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Disabled State</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <TextareaInput\n          label=\"Previous Feedback\"\n          name=\"previous-feedback\"\n          placeholder=\"Your previous feedback\"\n          disabled\n          defaultValue=\"This was great! I really enjoyed using this product.\"\n        />\n        <TextareaInput\n          label=\"System Notes\"\n          name=\"system-notes\"\n          placeholder=\"System generated notes\"\n          disabled\n          defaultValue=\"Auto-generated content not editable by users.\"\n          variant=\"pill\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function HintTextareaInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">With Hint Text</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <TextareaInput\n          label=\"Review\"\n          name=\"review-hint\"\n          placeholder=\"Write your review\"\n          hint=\"Be honest and constructive in your feedback\"\n        />\n        <TextareaInput\n          label=\"Bio\"\n          name=\"bio-hint\"\n          placeholder=\"Tell us about yourself\"\n          hint=\"Keep it concise, around 2-3 sentences\"\n          variant=\"pill\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport function RowsTextareaInputDemo() {\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-semibold\">Custom Rows</h2>\n      <div className=\"grid gap-4 md:grid-cols-2\">\n        <TextareaInput\n          label=\"Short Answer\"\n          name=\"short-answer\"\n          placeholder=\"Brief response\"\n          rows={2}\n        />\n        <TextareaInput\n          label=\"Detailed Response\"\n          name=\"detailed-response\"\n          placeholder=\"Provide a detailed explanation\"\n          rows={8}\n          variant=\"pill\"\n        />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/forms/textarea-input-demo.tsx"
    }
  ]
}