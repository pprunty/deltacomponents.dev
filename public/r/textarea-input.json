{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "textarea-input",
  "type": "registry:component",
  "title": "Textarea Input",
  "description": "A component for textarea-input",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "delta/components/textarea-input.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { Textarea } from '@/components/ui/textarea';\nimport { cn } from '@/lib/utils';\nimport type { z } from 'zod';\n\nexport interface TextareaInputProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  /** The label for the textarea field */\n  label: string;\n  /** The name of the textarea field (used for form submission) */\n  name: string;\n  /** Optional description text to display below the label */\n  description?: string;\n  /** Optional hint text to display below the textarea */\n  hint?: string;\n  /** Error message to display (typically from Zod validation) */\n  error?: string;\n  /** Whether the field is required */\n  required?: boolean;\n  /** Whether the field is in a loading/pending state */\n  pending?: boolean;\n  /** Default value for the textarea */\n  defaultValue?: string;\n  /** Container className for the entire component */\n  containerClassName?: string;\n  /** Label className for customizing the label */\n  labelClassName?: string;\n  /** Label variant - 'default' or 'muted' */\n  labelVariant?: 'default' | 'muted';\n  /** Textarea variant - 'default' or 'pill' */\n  variant?: 'default' | 'pill';\n  /** Whether to show a colored border (only applies to pill variant) */\n  coloredBorder?: boolean;\n  /** Size of the textarea - 'sm', 'md', or 'lg' */\n  size?: 'sm' | 'md' | 'lg';\n  /** Zod schema for validation (optional - can be handled at the form level) */\n  schema?: z.ZodType<string>;\n  /** Callback when validation occurs */\n  onValidate?: (isValid: boolean, value: string, error?: string) => void;\n}\n\n/**\n * TextareaInput component that integrates with Zod validation\n */\nexport function TextareaInput({\n  label,\n  name,\n  description,\n  hint,\n  error,\n  required = false,\n  pending = false,\n  defaultValue,\n  containerClassName,\n  labelClassName,\n  labelVariant = 'default',\n  variant = 'default',\n  coloredBorder = false,\n  size = 'md',\n  schema,\n  onValidate,\n  className,\n  id = name,\n  value,\n  ...props\n}: TextareaInputProps) {\n  const [localError, setLocalError] = React.useState<string | undefined>(error);\n  const hasError = !!localError || !!error;\n  const errorId = `error-${id}`;\n  const hintId = `hint-${id}`;\n\n  // Determine if component is controlled or uncontrolled\n  const isControlled = value !== undefined;\n\n  // Update local error when prop changes\n  React.useEffect(() => {\n    setLocalError(error);\n  }, [error]);\n\n  // Handle validation with the provided schema\n  const validateTextarea = React.useCallback(\n    (value: string) => {\n      if (!schema) return;\n\n      const result = schema.safeParse(value);\n      if (!result.success) {\n        const errorMessage = result.error.errors[0]?.message || 'Invalid input';\n        setLocalError(errorMessage);\n        onValidate?.(false, value, errorMessage);\n      } else {\n        setLocalError(undefined);\n        onValidate?.(true, value);\n      }\n    },\n    [schema, onValidate],\n  );\n\n  // Handle textarea change\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const newValue = e.target.value;\n\n    // If we have a schema, validate on change\n    if (schema) {\n      validateTextarea(newValue);\n    }\n\n    // Call the original onChange if provided\n    props.onChange?.(e);\n  };\n\n  // Handle blur event for validation\n  const handleBlur = (e: React.FocusEvent<HTMLTextAreaElement>) => {\n    if (schema) {\n      validateTextarea(e.target.value);\n    }\n\n    // Call the original onBlur if provided\n    props.onBlur?.(e);\n  };\n\n  return (\n    <div\n      className={cn('group/field grid gap-2', containerClassName)}\n      data-invalid={hasError}\n    >\n      <label\n        htmlFor={id}\n        className={cn(\n          'text-sm font-normal leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 group-data-[invalid=true]/field:text-destructive',\n          labelVariant === 'muted' && 'text-muted-foreground',\n          labelClassName,\n        )}\n      >\n        {label}\n        {required && <span aria-hidden=\"true\"> *</span>}\n      </label>\n\n      {description && (\n        <p className=\"text-xs text-muted-foreground\">{description}</p>\n      )}\n\n      <Textarea\n        id={id}\n        name={name}\n        disabled={pending || props.disabled}\n        aria-invalid={hasError}\n        aria-errormessage={hasError ? errorId : undefined}\n        aria-describedby={hint ? hintId : undefined}\n        aria-required={required}\n        size={size}\n        className={cn(\n          'md:text-md text-md focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#4E90F9] dark:ring-offset-black ring-offset-white',\n          // Default variant styling\n          variant === 'default' &&\n            'shadow-[0px_1px_1px_rgba(0,0,0,0.03),_0px_3px_6px_rgba(0,0,0,0.02)]',\n\n          // Pill variant styling - less rounded\n          variant === 'pill' && 'bg-muted border-0 rounded-lg px-4 py-3',\n          variant === 'pill' && coloredBorder && 'border-2 border-primary',\n          variant === 'pill' && 'placeholder:text-muted-foreground',\n\n          // Error styling for both variants\n          'group-data-[invalid=true]/field:border-destructive focus-visible:group-data-[invalid=true]/field:ring-destructive',\n          'scrollbar-hide',\n          className,\n        )}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        // Only pass one of value or defaultValue, not both\n        {...(isControlled ? { value } : { defaultValue })}\n        {...props}\n      />\n\n      {hint && !hasError && (\n        <p id={hintId} className=\"text-xs text-muted-foreground mt-1\">\n          {hint}\n        </p>\n      )}\n\n      {hasError && (\n        <p id={errorId} className=\"text-destructive text-xs\">\n          {localError || error}\n        </p>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "delta/components/textarea-input.tsx"
    },
    {
      "path": "delta/examples/textarea-input-basic-demo.tsx",
      "content": "\"use client\"\n\nimport { TextareaInput } from \"@/delta/components/textarea-input\"\n\nexport default function TextareaInputBasicDemo() {\n  return (\n    <div className=\"flex flex-col space-y-4 max-w-md mx-auto\">\n      <TextareaInput\n        label=\"Feedback\"\n        name=\"feedback\"\n        description=\"Share your thoughts with us\"\n        placeholder=\"Type your feedback here...\"\n      />\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "delta/examples/textarea-input-basic-demo.tsx"
    },
    {
      "path": "content/docs/textarea-input.mdx",
      "content": "export const metadata = {\n  title: 'TextareaInput | Delta Components',\n  description: 'A customizable textarea input component with validation support, multiple style variants, and accessibility features.',\n\n  // Keywords help with SEO\n  keywords: ['shadcn/ui', 'react', 'textarea', 'form components', 'ui components', 'react components', 'delta components', 'nextjs components', 'tailwind components'],\n\n  // Canonical URL to prevent duplicate content issues\n  alternates: {\n    canonical: 'https://deltacomponents.dev/docs/textarea-input',\n  },\n\n  // Category helps with structured data\n  category: 'component',\n\n  openGraph: {\n    title: 'TextareaInput Component | Delta Components',\n    description: 'A customizable textarea input component with validation support, multiple style variants, and accessibility features.',\n    type: 'article',\n    url: 'https://deltacomponents.dev/docs/textarea-input',\n    images: [\n      {\n        url: 'https://deltacomponents.dev/og/textarea-input.png',\n        width: 1200,\n        height: 630,\n        alt: 'TextareaInput Component Preview showing various styling options and examples'\n      }\n    ],\n    // Article specific OpenGraph metadata\n    article: {\n      authors: ['Patrick Prunty'],\n      tags: ['UI Components', 'React', 'Shadcn', 'Textarea', 'Form', 'Design'],\n      section: 'Components'\n    },\n    siteName: 'Delta Components'\n  },\n\n  twitter: {\n    card: 'summary_large_image',\n    title: 'TextareaInput Component | Delta Components',\n    description: 'A customizable textarea input component with validation support, multiple style variants, and accessibility features.',\n    images: ['https://deltacomponents.dev/og/textarea-input.png'],\n    creator: '@pprunty_',\n    site: '@deltacomponents'\n  },\n\n  // Additional metadata for better SEO\n  robots: {\n    index: true,\n    follow: true,\n    nocache: false,\n    googleBot: {\n      index: true,\n      follow: true,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n      'max-video-preview': -1\n    }\n  }\n}\n\n# TextareaInput\n\nA customizable textarea input component with validation support, multiple style variants, and accessibility features.\n\n## Basic Usage\n\n<ComponentTabs name=\"textarea-input-basic\" />\n\n## Installation\n\n```bash\nnpx shadcn@latest add \"textarea-input\"\n```\n\n## Props\n\n<div className=\"my-6 w-full overflow-y-auto\">\n  <table className=\"w-full\">\n    <thead>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <th className=\"border px-4 py-2 text-left font-bold\">Prop</th>\n        <th className=\"border px-4 py-2 text-left font-bold\">Type</th>\n        <th className=\"border px-4 py-2 text-left font-bold\">Default</th>\n        <th className=\"border px-4 py-2 text-left font-bold\">Description</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`label`</td>\n        <td className=\"border px-4 py-2 text-left\">`string`</td>\n        <td className=\"border px-4 py-2 text-left\">-</td>\n        <td className=\"border px-4 py-2 text-left\">The label for the textarea field</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`name`</td>\n        <td className=\"border px-4 py-2 text-left\">`string`</td>\n        <td className=\"border px-4 py-2 text-left\">-</td>\n        <td className=\"border px-4 py-2 text-left\">The name of the textarea field (used for form submission)</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`description`</td>\n        <td className=\"border px-4 py-2 text-left\">`string`</td>\n        <td className=\"border px-4 py-2 text-left\">-</td>\n        <td className=\"border px-4 py-2 text-left\">Optional description text to display below the label</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`hint`</td>\n        <td className=\"border px-4 py-2 text-left\">`string`</td>\n        <td className=\"border px-4 py-2 text-left\">-</td>\n        <td className=\"border px-4 py-2 text-left\">Optional hint text to display below the textarea</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`error`</td>\n        <td className=\"border px-4 py-2 text-left\">`string`</td>\n        <td className=\"border px-4 py-2 text-left\">-</td>\n        <td className=\"border px-4 py-2 text-left\">Error message to display (typically from Zod validation)</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`required`</td>\n        <td className=\"border px-4 py-2 text-left\">`boolean`</td>\n        <td className=\"border px-4 py-2 text-left\">`false`</td>\n        <td className=\"border px-4 py-2 text-left\">Whether the field is required</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`variant`</td>\n        <td className=\"border px-4 py-2 text-left\">`'default' | 'pill'`</td>\n        <td className=\"border px-4 py-2 text-left\">`'default'`</td>\n        <td className=\"border px-4 py-2 text-left\">Textarea variant - 'default' or 'pill'</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`coloredBorder`</td>\n        <td className=\"border px-4 py-2 text-left\">`boolean`</td>\n        <td className=\"border px-4 py-2 text-left\">`false`</td>\n        <td className=\"border px-4 py-2 text-left\">Whether to show a colored border (only applies to pill variant)</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`size`</td>\n        <td className=\"border px-4 py-2 text-left\">`'sm' | 'md' | 'lg'`</td>\n        <td className=\"border px-4 py-2 text-left\">`'md'`</td>\n        <td className=\"border px-4 py-2 text-left\">Size of the textarea - 'sm', 'md', or 'lg'</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`disabled`</td>\n        <td className=\"border px-4 py-2 text-left\">`boolean`</td>\n        <td className=\"border px-4 py-2 text-left\">`false`</td>\n        <td className=\"border px-4 py-2 text-left\">Whether the textarea is disabled</td>\n      </tr>\n      <tr className=\"m-0 border-t p-0 even:bg-muted\">\n        <td className=\"border px-4 py-2 text-left\">`schema`</td>\n        <td className=\"border px-4 py-2 text-left\">`z.ZodType<string>`</td>\n        <td className=\"border px-4 py-2 text-left\">-</td>\n        <td className=\"border px-4 py-2 text-left\">Zod schema for validation</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n## Examples\n\n### Default Variant\n\n```tsx\n<TextareaInput\n  label=\"Feedback\"\n  name=\"feedback\"\n  description=\"Share your thoughts with us\"\n  placeholder=\"Type your feedback here...\"\n/>\n```\n\n### Pill Variant with Colored Border\n\n```tsx\n<TextareaInput\n  label=\"Feedback\"\n  name=\"feedback\"\n  variant=\"pill\"\n  coloredBorder={true}\n  placeholder=\"Type your feedback here...\"\n/>\n```\n\n### Different Sizes\n\n```tsx\n<TextareaInput\n  label=\"Small Textarea\"\n  name=\"small-textarea\"\n  size=\"sm\"\n  placeholder=\"Small size textarea\"\n/>\n\n<TextareaInput\n  label=\"Medium Textarea\"\n  name=\"medium-textarea\"\n  size=\"md\"\n  placeholder=\"Medium size textarea\"\n/>\n\n<TextareaInput\n  label=\"Large Textarea\"\n  name=\"large-textarea\"\n  size=\"lg\"\n  placeholder=\"Large size textarea\"\n/>\n```\n\n## Validation\n\nThe TextareaInput component supports Zod validation:\n\n```tsx\nimport { z } from \"zod\";\nimport { useState } from \"react\";\nimport { TextareaInput } from \"@/components/ui/textarea-input\";\n\nexport default function TextareaValidationExample() {\n  const [error, setError] = useState<string | undefined>();\n  \n  // Schema to validate the text has a minimum length\n  const schema = z.string().min(10, {\n    message: \"Feedback must be at least 10 characters\",\n  });\n  \n  const handleValidate = (isValid: boolean, value: string, error?: string) => {\n    setError(error);\n  };\n  \n  return (\n    <TextareaInput\n      label=\"Feedback\"\n      name=\"feedback\"\n      schema={schema}\n      onValidate={handleValidate}\n      error={error}\n      hint=\"Please provide detailed feedback\"\n    />\n  );\n}\n```\n\n## Accessibility\n\nThe TextareaInput component is built with accessibility in mind:\n\n- Proper labeling and ARIA attributes\n- Clear focus states for keyboard users\n- Error messages are properly associated with the textarea\n- Properly handles disabled states\n",
      "type": "registry:component",
      "target": "content/docs/textarea-input.mdx"
    }
  ]
}